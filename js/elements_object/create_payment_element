<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Stripe JS Reference</title>
    <link rel="shortcut icon" href="https://b.stripecdn.com/docs-legacy-reference-statics-srv/assets/img/favicon-ref.png">
    <link rel="stylesheet" href="https://b.stripecdn.com/docs-legacy-reference-statics-srv/assets/sail-5bfe438c4934bd0e7469.min.css">
    <link rel="stylesheet" href="https://b.stripecdn.com/docs-legacy-reference-statics-srv/assets/apiRef-1f0e88bb4243eca2720c.min.css">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="description" content="">
    <meta content="xKx1nR5942mz50mqfR2IwJyzyZrVbH_x_g_wbol9j90thwDrnJgaS8hy4CUzFuByCsYYM9nGWNaugJ_5mnv9jzw-AV5tnSH15uwq6Cf8hii1x6H0JPTk4coKReFyiVvFcLWk2KKMsw==" name="csrf-token" />
  </head>

  <body id="api-reference" class="js-ref">
    <div id="react-root-sidebar">
      <div id="sidebar">
        <div class="Sidebar-header">
          <div class="Sidebar-header-row">
            <a class="logo" href="/js">
              <span class="site">
                <div class="SVGInline SVGInline--cleaned SVG Logo SVG--color SVG--color--gray600 Box-root Flex-flex">
                  <svg xmlns="http://www.w3.org/2000/svg" width="38" height="16" viewBox="0 0 360 150"><path fill-rule="evenodd" d="M360 77.4c0 2.4-.2 7.6-.2 8.9h-48.9c1.1 11.8 9.7 15.2 19.4 15.2 9.9 0 17.7-2.1 24.5-5.5v20c-6.8 3.8-15.8 6.5-27.7 6.5-24.4 0-41.4-15.2-41.4-45.3 0-25.4 14.4-45.6 38.2-45.6 23.7 0 36.1 20.2 36.1 45.8zm-49.4-9.5h25.8c0-11.3-6.5-16-12.6-16-6.3 0-13.2 4.7-13.2 16zm-63.5-36.3c17.5 0 34 15.8 34.1 44.8 0 31.7-16.3 46.1-34.2 46.1-8.8 0-14.1-3.7-17.7-6.3l-.1 28.3-25 5.3V33.2h22l1.3 6.2c3.5-3.2 9.8-7.8 19.6-7.8zm-6 68.9c9.2 0 15.4-10 15.4-23.4 0-13.1-6.3-23.3-15.4-23.3-5.7 0-9.3 2-11.9 4.9l.1 37.1c2.4 2.6 5.9 4.7 11.8 4.7zm-71.3-74.8V5.3L194.9 0v20.3l-25.1 5.4zm0 7.6h25.1v87.5h-25.1V33.3zm-26.9 7.4c5.9-10.8 17.6-8.6 20.8-7.4v23c-3.1-1.1-13.1-2.5-19 5.2v59.3h-25V33.3h21.6l1.6 7.4zm-50-29.1l-.1 21.7h19v21.3h-19v35.5c0 14.8 15.8 10.2 19 8.9v20.3c-3.3 1.8-9.3 3.3-17.5 3.3-14.8 0-25.9-10.9-25.9-25.7l.1-80.1 24.4-5.2zM25.3 58.7c0 11.2 38.1 5.9 38.2 35.7 0 17.9-14.3 28.2-35.1 28.2-8.6 0-18-1.7-27.3-5.7V93.1c8.4 4.6 19 8 27.3 8 5.6 0 9.6-1.5 9.6-6.1 0-11.9-38-7.5-38-35.1 0-17.7 13.5-28.3 33.8-28.3 8.3 0 16.5 1.3 24.8 4.6v23.5c-7.6-4.1-17.2-6.4-24.8-6.4-5.3 0-8.5 1.5-8.5 5.4z"/></svg>
                </div>
              </span>
              <span class="docs">js</a>
            </a>
          </div>
          <div class="Sidebar-header-row">
            <div class="Search-wrapper">
              <button type="button" class="Search-searchbar"></button>
            </div>
          </div>
        </div>
        <nav role="navigation" class="sidebar-nav">
              <h5 class="sidebar-nav-heading">Setting up</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#intro">
                      Introduction
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#including_stripe_js">
                      Including Stripe.js
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#init_stripe_js">
                      Initializing Stripe.js
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">The Elements object</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_elements">
                      Create an Elements object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_elements_no_intent">
                      Create an Elements object without an Intent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#elements_update">
                      Update an Elements object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#elements_fetch_updates">
                      Fetch Elements Updates
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#elements_submit">
                      Submit an Elements object
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">The Element</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item expandable " href="#payment_element">
                      Payment Element
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#payment_element_create">Create a Payment Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_element_get">Get a Payment Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_element_update">Update a Payment Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#elements_fetch_updates">Fetch Elements Updates</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_element_collapse">Collapse a Payment Element</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#express_checkout_element">
                      Express Checkout Element
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_create">Create an Express Checkout Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_get">Get an Express Checkout Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_update">Update an Express Checkout Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_on_click">Click event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_on_confirm">Confirm event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_on_cancel">Cancel event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_on_shipping_address_change">Shipping address change event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#express_checkout_element_on_shipping_rate_change">Shipping rate change event</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#link_authentication_element">
                      Link Authentication Element
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#link_authentication_element_create">Create a Link Authentication Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#link_authentication_element_get">Get a Link Authentication Element</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#address_element">
                      Address Element
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#address_element_create">Create an Address Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#address_element_get">Get an Address Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#address_element_update">Update an Address Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#address_element_get_value">Get value from an Address Element</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#issuing_elements">
                      Issuing Elements
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#issuing_elements_create">Create an Issuing Element</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#other_element">
                      Other Elements
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#elements_create">Create an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#elements_get_element">Get an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_update">Update an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_container">Style the Element container</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#element_mount">
                      Mount an Element
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#element_other_methods">
                      Element methods
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#element_blur">Blur an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_clear">Clear an Element&#39;s values</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_destroy">Destroy an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_focus">Focus an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_unmount">Unmount an Element</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#element_events">
                      Listen to Element events
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#element_on_change">Change event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_ready">Ready event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_focus">Focus event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_blur">Blur event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_escape">Escape event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_click">Click event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_loaderror">LoadError event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_loaderstart">LoaderStart event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#element_on_networkschange">NetworksChange event</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#element_input_validation">
                      Input validation
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#element_postal_code_formatting">
                      Postal code formatting
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Checkout</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#embedded_checkout_init">
                      Initialize embedded Checkout
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#embedded_checkout_mount">
                      Mount embedded Checkout
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#embedded_checkout_unmount">
                      Unmount embedded Checkout
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#embedded_checkout_destroy">
                      Destroy embedded Checkout
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Custom Checkout</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#custom_checkout_init">
                      Initialize Custom Checkout
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#custom_checkout_checkout_object">
                      The Checkout object
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session">Read session data</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_apply_promotion_code">Apply a promotion code</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_remove_promotion_code">Remove a promotion code</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_update_shipping_address">Update the customer&#39;s shipping address</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_update_billing_address">Update the customer&#39;s billing address</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_update_email">Update the customer&#39;s email address</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_update_phone_number">Update the customer&#39;s phone number</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_update_line_item_quantity">Update line item quantities</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_update_shipping_option">Update shipping option</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_confirm">Confirm the session</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#custom_checkout_session_object">
                      The Session object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#custom_checkout_events">
                      Listen to Custom Checkout events
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_on_change">Change event</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#custom_checkout_elements">
                      Elements methods
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_change_appearance">Update Elements appearance</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_get_element">Get an Element</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_create_element">Create an Element</a></li>
                      </ul>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Custom Checkout (React)</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#custom_checkout_react_custom_checkout_provider">
                      CustomCheckoutProvider
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#custom_checkout_react_use_custom_checkout">
                      useCustomCheckout hook
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_react_apply_promotion_code">Apply a promotion code</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_react_remove_promotion_code">Remove a promotion code</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_react_update_shipping_address">Update the customer&#39;s shipping address</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_session_react_update_billing_address">Update the customer&#39;s billing address</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_react_update_email">Update the customer&#39;s email address</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_react_session_update_phone_number">Update the customer&#39;s phone number</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_react_session_update_line_item_quantity">Update line item quantities</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_react_session_update_shipping_option">Update shipping option</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#custom_checkout_react_session_confirm">Confirm the session</a></li>
                      </ul>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Payment Intents</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#confirm_payment_intent">
                      Confirm a PaymentIntent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#confirm_payment_intent_payment_method">
                      Confirm a PaymentIntent by payment method
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_card_payment">Confirm a card payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_us_bank_account_payment">Confirm an ACH Direct Debit payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_acss_debit_payment">Confirm an ACSS Debit payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_affirm_payment">Confirm an Affirm payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_afterpay_clearpay_payment">Confirm an Afterpay Clearpay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_alipay_payment">Confirm an Alipay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_au_becs_debit_payment">Confirm a BECS debit payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_bancontact_payment">Confirm a Bancontact payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_blik_payment">Confirm a BLIK payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_boleto_payment">Confirm a Boleto payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_customer_balance_payment">Confirm a Customer Balance payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_cashapp_payment">Confirm a Cash App Pay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_eps_payment">Confirm an EPS payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_fpx_payment">Confirm an FPX payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_giropay_payment">Confirm a giropay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_grabpay_payment">Confirm a GrabPay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_ideal_payment">Confirm an iDEAL payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_klarna_payment">Confirm a Klarna payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_konbini_payment">Confirm a Konbini payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_mobilepay_payment">Confirm a MobilePay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_multibanco_payment">Confirm a Multibanco payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_oxxo_payment">Confirm an OXXO payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_p24_payment">Confirm a Przelewy24 payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_paynow_payment">Confirm a PayNow payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_paypal_payment">Confirm a PayPal payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_payto_payment">Confirm a PayTo payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_pix_payment">Confirm a Pix payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_promptpay_payment">Confirm a PromptPay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_sepa_debit_payment">Confirm a SEPA debit payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_sofort_payment">Confirm a Sofort payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_twint_payment">Confirm a TWINT payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_wechat_pay_payment">Confirm a WeChat Pay payment</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_zip_payment">Confirm a Zip payment</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_retrieve_payment_intent">
                      Retrieve a PaymentIntent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_verify_microdeposits_for_payment">
                      Verify with micro-deposits for payment
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_create_radar_session">
                      Create a Radar Session
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_next_action_for_payment">
                      Handle a next action
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_card_action">
                      Handle a card action
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_collect_bank_account_for_payment">
                      Collect bank account details for payment
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Setup Intents</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#confirm_setup_intent">
                      Confirm a SetupIntent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#confirm_setup_intent_payment_method">
                      Confirm a SetupIntent by payment method
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_card_setup">Confirm card setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_us_bank_account_setup">Confirm an ACH Direct Debit setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_acss_debit_setup">Confirm an ACSS Debit setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_au_becs_debit_setup">Confirm BECS Debit setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_bacs_debit_setup">Confirm Bacs Debit setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_bancontact_setup">Confirm Bancontact setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_cashapp_setup">Confirm Cash App Pay setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_ideal_setup">Confirm iDEAL setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_paypal_setup">Confirm PayPal setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_payto_setup">Confirm PayTo setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_sepa_debit_setup">Confirm SEPA Debit setup</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_confirm_sofort_setup">Confirm Sofort setup</a></li>
                      </ul>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_retrieve_setup_intent">
                      Retrieve a SetupIntent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_verify_microdeposits_for_setup">
                      Verify with micro-deposits for setup
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_next_action_for_setup">
                      Handle a next action
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_collect_bank_account_for_setup">
                      Collect bank account details for setup
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">The Payment Request object</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_payment_request">
                      Create a PaymentRequest object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#payment_request_can_make_payment">
                      Check if a payment can be made
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#payment_request_show">
                      Show the payment request interface
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#payment_request_update">
                      Update a PaymentRequest object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#payment_request_events">
                      Listen to PaymentRequest events
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#payment_request_on_token">Token event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_request_on_payment_method">PaymentMethod event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_request_on_source">Source event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_request_on_cancel">Cancel event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_request_on_shipping_address_change">Shipping address change event</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#payment_request_on_shipping_option_change">Shipping option change event</a></li>
                      </ul>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Confirmation Tokens</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#create_confirmation_token">
                      Create a ConfirmationToken
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Payment Methods</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_create_payment_method">
                      Create a PaymentMethod
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_create_payment_method_elements">
                      Create a PaymentMethod with Elements
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Tokens</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#tokens_intro">
                      Introduction
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_create_token">
                      Create a Token
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Identity</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_verify_identity">
                      Show verification modal
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Issuing</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_create_ephemeral_key_nonce">
                      Create an ephemeral key nonce
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_retrieve_issuing_card">
                      Retrieve an Issuing card
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Financial Connections</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#financial_connections_intro">
                      Introduction
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#financial_connections_collect_financial_connections_accounts">
                      Collect Financial Connections Accounts
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#financial_connections_collect_bank_account_token">
                      Use Financial Connections to collect a bank account Token for payouts
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Appendix</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#css_font_source_object">
                      CssFontSource object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#custom_font_source_object">
                      CustomFontSource object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#contact_object">
                      Contact object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#payment_item_object">
                      PaymentItem object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#payment_response_object">
                      PaymentResponse object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#shipping_option_object">
                      ShippingOption object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#shipping_address_object">
                      ShippingAddress object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#style_object">
                      Style object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#update_details_object">
                      UpdateDetails object
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#supported_browsers">
                      Supported browsers
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#supported_locales">
                      Supported locales
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#cookies">
                      Cookies
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#viewport_meta_requirements">
                      Viewport meta tag requirements
                    </a>
                  </li>
            </ul>
              <h5 class="sidebar-nav-heading">Deprecated</h5>
            <ul class="sidebar-nav-items">
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_checkout_redirect_to_checkout">
                      Redirect to Checkout
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_card_payment_element">
                      Handle a card payment with an Element
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_card_payment">
                      Handle a card payment
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_confirm_payment_intent_element">
                      Confirm a PaymentIntent with an Element
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_confirm_payment_intent">
                      Confirm a PaymentIntent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_card_setup_element">
                      Handle card setup with an Element
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_card_setup">
                      Handle card setup
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_confirm_setup_intent_element">
                      Confirm a SetupIntent with an Element
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_confirm_setup_intent">
                      Confirm a SetupIntent
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item  disabled" href="#stripe_handle_fpx_payment">
                      Handle an FPX payment
                    </a>
                  </li>
                  <li>
                    <a class="sidebar-nav-item expandable disabled" href="#sources">
                      Sources
                    </a>
                      <ul class="sidebar-nav-items">
                            <li><a class="sidebar-nav-item disabled" href="#stripe_create_source">Create a Source</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_create_source_data">Create a Source from data</a></li>
                            <li><a class="sidebar-nav-item disabled" href="#stripe_retrieve_source">Retrieve a Source</a></li>
                      </ul>
                  </li>
            </ul>
        </nav>
        <div class="Sidebar-footer">
        </div>
      </div>
    </div>

    <div id="react-root-content">
      <!-- api docs -->
      <div id="content">
          <section class="method" id="intro">
          </section>
          <section class="method" id="including_stripe_js">
          </section>
          <section class="method" id="init_stripe_js">
          </section>
          <section class="method" id="elements_intro">
          </section>
          <section class="method" id="stripe_elements">
          </section>
          <section class="method" id="stripe_elements_no_intent">
          </section>
          <section class="method" id="elements_update">
          </section>
          <section class="method" id="elements_fetch_updates">
          </section>
          <section class="method" id="elements_submit">
          </section>
          <section class="method" id="element_intro">
          </section>
          <section class="method" id="payment_element">
          </section>
          <section class="method" id="payment_element_create">
          </section>
          <section class="method" id="payment_element_get">
          </section>
          <section class="method" id="payment_element_update">
          </section>
          <section class="method" id="payment_element_collapse">
          </section>
          <section class="method" id="express_checkout_element">
          </section>
          <section class="method" id="express_checkout_element_create">
          </section>
          <section class="method" id="express_checkout_element_get">
          </section>
          <section class="method" id="express_checkout_element_update">
          </section>
          <section class="method" id="express_checkout_element_on_click">
          </section>
          <section class="method" id="express_checkout_element_on_confirm">
          </section>
          <section class="method" id="express_checkout_element_on_cancel">
          </section>
          <section class="method" id="express_checkout_element_on_shipping_address_change">
          </section>
          <section class="method" id="express_checkout_element_on_shipping_rate_change">
          </section>
          <section class="method" id="link_authentication_element">
          </section>
          <section class="method" id="link_authentication_element_create">
          </section>
          <section class="method" id="link_authentication_element_get">
          </section>
          <section class="method" id="address_element">
          </section>
          <section class="method" id="address_element_create">
          </section>
          <section class="method" id="address_element_get">
          </section>
          <section class="method" id="address_element_update">
          </section>
          <section class="method" id="address_element_get_value">
          </section>
          <section class="method" id="issuing_elements">
          </section>
          <section class="method" id="issuing_elements_create">
          </section>
          <section class="method" id="other_element">
          </section>
          <section class="method" id="elements_create">
          </section>
          <section class="method" id="elements_get_element">
          </section>
          <section class="method" id="element_update">
          </section>
          <section class="method" id="element_container">
          </section>
          <section class="method" id="element_mount">
          </section>
          <section class="method" id="element_other_methods">
          </section>
          <section class="method" id="element_blur">
          </section>
          <section class="method" id="element_clear">
          </section>
          <section class="method" id="element_destroy">
          </section>
          <section class="method" id="element_focus">
          </section>
          <section class="method" id="element_unmount">
          </section>
          <section class="method" id="element_events">
          </section>
          <section class="method" id="element_on_change">
          </section>
          <section class="method" id="element_on_ready">
          </section>
          <section class="method" id="element_on_focus">
          </section>
          <section class="method" id="element_on_blur">
          </section>
          <section class="method" id="element_on_escape">
          </section>
          <section class="method" id="element_on_click">
          </section>
          <section class="method" id="element_on_loaderror">
          </section>
          <section class="method" id="element_on_loaderstart">
          </section>
          <section class="method" id="element_on_networkschange">
          </section>
          <section class="method" id="element_input_validation">
          </section>
          <section class="method" id="element_postal_code_formatting">
          </section>
          <section class="method" id="embedded_checkout_intro">
          </section>
          <section class="method" id="embedded_checkout_init">
          </section>
          <section class="method" id="embedded_checkout_mount">
          </section>
          <section class="method" id="embedded_checkout_unmount">
          </section>
          <section class="method" id="embedded_checkout_destroy">
          </section>
          <section class="method" id="custom_checkout_intro">
          </section>
          <section class="method" id="custom_checkout_init">
          </section>
          <section class="method" id="custom_checkout_checkout_object">
          </section>
          <section class="method" id="custom_checkout_session">
          </section>
          <section class="method" id="custom_checkout_session_apply_promotion_code">
          </section>
          <section class="method" id="custom_checkout_session_remove_promotion_code">
          </section>
          <section class="method" id="custom_checkout_session_update_shipping_address">
          </section>
          <section class="method" id="custom_checkout_session_update_billing_address">
          </section>
          <section class="method" id="custom_checkout_session_update_email">
          </section>
          <section class="method" id="custom_checkout_session_update_phone_number">
          </section>
          <section class="method" id="custom_checkout_session_update_line_item_quantity">
          </section>
          <section class="method" id="custom_checkout_session_update_shipping_option">
          </section>
          <section class="method" id="custom_checkout_session_confirm">
          </section>
          <section class="method" id="custom_checkout_session_object">
          </section>
          <section class="method" id="custom_checkout_events">
          </section>
          <section class="method" id="custom_checkout_on_change">
          </section>
          <section class="method" id="custom_checkout_elements">
          </section>
          <section class="method" id="custom_checkout_change_appearance">
          </section>
          <section class="method" id="custom_checkout_get_element">
          </section>
          <section class="method" id="custom_checkout_create_element">
          </section>
          <section class="method" id="custom_checkout_react_intro">
          </section>
          <section class="method" id="custom_checkout_react_custom_checkout_provider">
          </section>
          <section class="method" id="custom_checkout_react_use_custom_checkout">
          </section>
          <section class="method" id="custom_checkout_session_react_apply_promotion_code">
          </section>
          <section class="method" id="custom_checkout_session_react_remove_promotion_code">
          </section>
          <section class="method" id="custom_checkout_session_react_update_shipping_address">
          </section>
          <section class="method" id="custom_checkout_session_react_update_billing_address">
          </section>
          <section class="method" id="custom_checkout_react_update_email">
          </section>
          <section class="method" id="custom_checkout_react_session_update_phone_number">
          </section>
          <section class="method" id="custom_checkout_react_session_update_line_item_quantity">
          </section>
          <section class="method" id="custom_checkout_react_session_update_shipping_option">
          </section>
          <section class="method" id="custom_checkout_react_session_confirm">
          </section>
          <section class="method" id="payment_intents_intro">
          </section>
          <section class="method" id="confirm_payment_intent">
          </section>
          <section class="method" id="confirm_payment_intent_payment_method">
          </section>
          <section class="method" id="stripe_confirm_card_payment">
          </section>
          <section class="method" id="stripe_confirm_us_bank_account_payment">
          </section>
          <section class="method" id="stripe_confirm_acss_debit_payment">
          </section>
          <section class="method" id="stripe_confirm_affirm_payment">
          </section>
          <section class="method" id="stripe_confirm_afterpay_clearpay_payment">
          </section>
          <section class="method" id="stripe_confirm_alipay_payment">
          </section>
          <section class="method" id="stripe_confirm_au_becs_debit_payment">
          </section>
          <section class="method" id="stripe_confirm_bancontact_payment">
          </section>
          <section class="method" id="stripe_confirm_blik_payment">
          </section>
          <section class="method" id="stripe_confirm_boleto_payment">
          </section>
          <section class="method" id="stripe_confirm_customer_balance_payment">
          </section>
          <section class="method" id="stripe_confirm_cashapp_payment">
          </section>
          <section class="method" id="stripe_confirm_eps_payment">
          </section>
          <section class="method" id="stripe_confirm_fpx_payment">
          </section>
          <section class="method" id="stripe_confirm_giropay_payment">
          </section>
          <section class="method" id="stripe_confirm_grabpay_payment">
          </section>
          <section class="method" id="stripe_confirm_ideal_payment">
          </section>
          <section class="method" id="stripe_confirm_klarna_payment">
          </section>
          <section class="method" id="stripe_confirm_konbini_payment">
          </section>
          <section class="method" id="stripe_confirm_mobilepay_payment">
          </section>
          <section class="method" id="stripe_confirm_multibanco_payment">
          </section>
          <section class="method" id="stripe_confirm_oxxo_payment">
          </section>
          <section class="method" id="stripe_confirm_p24_payment">
          </section>
          <section class="method" id="stripe_confirm_paynow_payment">
          </section>
          <section class="method" id="stripe_confirm_paypal_payment">
          </section>
          <section class="method" id="stripe_confirm_payto_payment">
          </section>
          <section class="method" id="stripe_confirm_pix_payment">
          </section>
          <section class="method" id="stripe_confirm_promptpay_payment">
          </section>
          <section class="method" id="stripe_confirm_sepa_debit_payment">
          </section>
          <section class="method" id="stripe_confirm_sofort_payment">
          </section>
          <section class="method" id="stripe_confirm_twint_payment">
          </section>
          <section class="method" id="stripe_confirm_wechat_pay_payment">
          </section>
          <section class="method" id="stripe_confirm_zip_payment">
          </section>
          <section class="method" id="stripe_retrieve_payment_intent">
          </section>
          <section class="method" id="stripe_verify_microdeposits_for_payment">
          </section>
          <section class="method" id="stripe_create_radar_session">
          </section>
          <section class="method" id="stripe_handle_next_action_for_payment">
          </section>
          <section class="method" id="stripe_handle_card_action">
          </section>
          <section class="method" id="stripe_collect_bank_account_for_payment">
          </section>
          <section class="method" id="setup_intents_intro">
          </section>
          <section class="method" id="confirm_setup_intent">
          </section>
          <section class="method" id="confirm_setup_intent_payment_method">
          </section>
          <section class="method" id="stripe_confirm_card_setup">
          </section>
          <section class="method" id="stripe_confirm_us_bank_account_setup">
          </section>
          <section class="method" id="stripe_confirm_acss_debit_setup">
          </section>
          <section class="method" id="stripe_confirm_au_becs_debit_setup">
          </section>
          <section class="method" id="stripe_confirm_bacs_debit_setup">
          </section>
          <section class="method" id="stripe_confirm_bancontact_setup">
          </section>
          <section class="method" id="stripe_confirm_cashapp_setup">
          </section>
          <section class="method" id="stripe_confirm_ideal_setup">
          </section>
          <section class="method" id="stripe_confirm_paypal_setup">
          </section>
          <section class="method" id="stripe_confirm_payto_setup">
          </section>
          <section class="method" id="stripe_confirm_sepa_debit_setup">
          </section>
          <section class="method" id="stripe_confirm_sofort_setup">
          </section>
          <section class="method" id="stripe_retrieve_setup_intent">
          </section>
          <section class="method" id="stripe_verify_microdeposits_for_setup">
          </section>
          <section class="method" id="stripe_handle_next_action_for_setup">
          </section>
          <section class="method" id="stripe_collect_bank_account_for_setup">
          </section>
          <section class="method" id="payment_request_intro">
          </section>
          <section class="method" id="stripe_payment_request">
          </section>
          <section class="method" id="payment_request_can_make_payment">
          </section>
          <section class="method" id="payment_request_show">
          </section>
          <section class="method" id="payment_request_update">
          </section>
          <section class="method" id="payment_request_events">
          </section>
          <section class="method" id="payment_request_on_token">
          </section>
          <section class="method" id="payment_request_on_payment_method">
          </section>
          <section class="method" id="payment_request_on_source">
          </section>
          <section class="method" id="payment_request_on_cancel">
          </section>
          <section class="method" id="payment_request_on_shipping_address_change">
          </section>
          <section class="method" id="payment_request_on_shipping_option_change">
          </section>
          <section class="method" id="confirmation_tokens_intro">
          </section>
          <section class="method" id="create_confirmation_token">
          </section>
          <section class="method" id="payment_methods_intro">
          </section>
          <section class="method" id="stripe_create_payment_method">
          </section>
          <section class="method" id="stripe_create_payment_method_elements">
          </section>
          <section class="method" id="tokens_intro">
          </section>
          <section class="method" id="stripe_create_token">
          </section>
          <section class="method" id="stripe_verify_identity">
          </section>
          <section class="method" id="stripe_create_ephemeral_key_nonce">
          </section>
          <section class="method" id="stripe_retrieve_issuing_card">
          </section>
          <section class="method" id="financial_connections_intro">
          </section>
          <section class="method" id="financial_connections_collect_financial_connections_accounts">
          </section>
          <section class="method" id="financial_connections_collect_bank_account_token">
          </section>
          <section class="method" id="css_font_source_object">
          </section>
          <section class="method" id="custom_font_source_object">
          </section>
          <section class="method" id="contact_object">
          </section>
          <section class="method" id="payment_item_object">
          </section>
          <section class="method" id="payment_response_object">
          </section>
          <section class="method" id="shipping_option_object">
          </section>
          <section class="method" id="shipping_address_object">
          </section>
          <section class="method" id="style_object">
          </section>
          <section class="method" id="update_details_object">
          </section>
          <section class="method" id="supported_browsers">
          </section>
          <section class="method" id="supported_locales">
          </section>
          <section class="method" id="cookies">
          </section>
          <section class="method" id="viewport_meta_requirements">
          </section>
          <section class="method" id="stripe_checkout_redirect_to_checkout">
          </section>
          <section class="method" id="stripe_handle_card_payment_element">
          </section>
          <section class="method" id="stripe_handle_card_payment">
          </section>
          <section class="method" id="stripe_confirm_payment_intent_element">
          </section>
          <section class="method" id="stripe_confirm_payment_intent">
          </section>
          <section class="method" id="stripe_handle_card_setup_element">
          </section>
          <section class="method" id="stripe_handle_card_setup">
          </section>
          <section class="method" id="stripe_confirm_setup_intent_element">
          </section>
          <section class="method" id="stripe_confirm_setup_intent">
          </section>
          <section class="method" id="stripe_handle_fpx_payment">
          </section>
          <section class="method" id="sources">
          </section>
          <section class="method" id="stripe_create_source">
          </section>
          <section class="method" id="stripe_create_source_data">
          </section>
          <section class="method" id="stripe_retrieve_source">
          </section>
      </div>
    </div>



      <script src="https://b.stripecdn.com/docs-legacy-reference-statics-srv/assets/vendor-badfcee7a6f841dad2e3.min.js" type="text/javascript"></script>
      <script src="https://b.stripecdn.com/docs-legacy-reference-statics-srv/assets/baseRef-723da6851adf53f010fa.min.js" type="text/javascript"></script>

      <script type="text/javascript" nonce="LqZeVM9oj4Ps3JqYRIqEjQ==">
          window.CSRF_TOKEN = 'xKx1nR5942mz50mqfR2IwJyzyZrVbH_x_g_wbol9j90thwDrnJgaS8hy4CUzFuByCsYYM9nGWNaugJ_5mnv9jzw-AV5tnSH15uwq6Cf8hii1x6H0JPTk4coKReFyiVvFcLWk2KKMsw==';
          window.INITIAL_STATE = {
            baseUrl: '/js',
            site: 'js',
            lang: 'js',
            title: '',
            version: '',
            apiSections: [{"title":"Setting up","anchor":"setting_up","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"intro","path":"/","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Including Stripe.js","anchor":"including_stripe_js","path":"/including","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Initializing Stripe.js","anchor":"init_stripe_js","path":"/initializing","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"The Elements object","anchor":"elements_object","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"elements_intro","path":"/elements_object","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Create an Elements object","anchor":"stripe_elements","path":"/elements_object/create","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Create an Elements object without an Intent","anchor":"stripe_elements_no_intent","path":"/elements_object/create_without_intent","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update an Elements object","anchor":"elements_update","path":"/elements_object/update","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Fetch Elements Updates","anchor":"elements_fetch_updates","path":"/elements_object/fetch_updates","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Submit an Elements object","anchor":"elements_submit","path":"/elements/submit","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"The Element","anchor":"element","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"element_intro","path":"/element","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Payment Element","anchor":"payment_element","path":"/element/payment_element","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create a Payment Element","anchor":"payment_element_create","path":"/elements_object/create_payment_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get a Payment Element","anchor":"payment_element_get","path":"/elements_object/get_payment_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update a Payment Element","anchor":"payment_element_update","path":"/elements_object/update_payment_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Fetch Elements Updates","anchor":"elements_fetch_updates","path":"/elements_object/fetch_updates","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Collapse a Payment Element","anchor":"payment_element_collapse","path":"/elements_object/collapse_payment_element","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Express Checkout Element","anchor":"express_checkout_element","path":"/element/express_checkout_element","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create an Express Checkout Element","anchor":"express_checkout_element_create","path":"/elements_object/create_express_checkout_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get an Express Checkout Element","anchor":"express_checkout_element_get","path":"/elements_object/get_express_checkout_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update an Express Checkout Element","anchor":"express_checkout_element_update","path":"/elements_object/update_express_checkout_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Click event","anchor":"express_checkout_element_on_click","path":"/elements_object/express_checkout_element_click_event","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm event","anchor":"express_checkout_element_on_confirm","path":"/elements_object/express_checkout_element_confirm_event","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Cancel event","anchor":"express_checkout_element_on_cancel","path":"/elements_object/express_checkout_element_cancel_event","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Shipping address change event","anchor":"express_checkout_element_on_shipping_address_change","path":"/elements_object/express_checkout_element_shippingaddresschange_event","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Shipping rate change event","anchor":"express_checkout_element_on_shipping_rate_change","path":"/elements_object/express_checkout_element_shippingratechange_event","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Link Authentication Element","anchor":"link_authentication_element","path":"/element/link_authentication_element","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create a Link Authentication Element","anchor":"link_authentication_element_create","path":"/elements_object/create_link_authentication_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get a Link Authentication Element","anchor":"link_authentication_element_get","path":"/elements_object/get_link_authentication_element","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Address Element","anchor":"address_element","path":"/element/address_element","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create an Address Element","anchor":"address_element_create","path":"/elements_object/create_address_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get an Address Element","anchor":"address_element_get","path":"/elements_object/get_address_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update an Address Element","anchor":"address_element_update","path":"/elements_object/update_address_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get value from an Address Element","anchor":"address_element_get_value","path":"/elements_object/get_value_address_element","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Issuing Elements","anchor":"issuing_elements","path":"/element/issuing","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create an Issuing Element","anchor":"issuing_elements_create","path":"/issuing_elements/create","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Other Elements","anchor":"other_element","path":"/element/other_element","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create an Element","anchor":"elements_create","path":"/elements_object/create_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get an Element","anchor":"elements_get_element","path":"/elements_object/get_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update an Element","anchor":"element_update","path":"/element/other_methods/update","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Style the Element container","anchor":"element_container","path":"/element/the_element_container","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Mount an Element","anchor":"element_mount","path":"/element/mount","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Element methods","anchor":"element_other_methods","path":"/element/other_methods","gate":null,"hide_from_nav":null,"subsections":[{"title":"Blur an Element","anchor":"element_blur","path":"/element/other_methods/blur","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Clear an Element's values","anchor":"element_clear","path":"/element/other_methods/clear","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Destroy an Element","anchor":"element_destroy","path":"/element/other_methods/destroy","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Focus an Element","anchor":"element_focus","path":"/element/other_methods/focus","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Unmount an Element","anchor":"element_unmount","path":"/element/other_methods/unmount","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Listen to Element events","anchor":"element_events","path":"/element/events","gate":null,"hide_from_nav":null,"subsections":[{"title":"Change event","anchor":"element_on_change","path":"/element/events/on_change","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Ready event","anchor":"element_on_ready","path":"/element/events/on_ready","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Focus event","anchor":"element_on_focus","path":"/element/events/on_focus","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Blur event","anchor":"element_on_blur","path":"/element/events/on_blur","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Escape event","anchor":"element_on_escape","path":"/element/events/on_escape","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Click event","anchor":"element_on_click","path":"/element/events/on_click","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"LoadError event","anchor":"element_on_loaderror","path":"/element/events/on_loaderror","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"LoaderStart event","anchor":"element_on_loaderstart","path":"/element/events/on_loaderstart","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"NetworksChange event","anchor":"element_on_networkschange","path":"/element/events/on_networkschange","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Input validation","anchor":"element_input_validation","path":"/element/input_validation","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Postal code formatting","anchor":"element_postal_code_formatting","path":"/element/postal_code_formatting","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"Checkout","anchor":"embedded_checkout","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Checkout","anchor":"embedded_checkout_intro","path":"/embedded_checkout","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Initialize embedded Checkout","anchor":"embedded_checkout_init","path":"/embedded_checkout/init","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Mount embedded Checkout","anchor":"embedded_checkout_mount","path":"/embedded_checkout/mount","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Unmount embedded Checkout","anchor":"embedded_checkout_unmount","path":"/embedded_checkout/unmount","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Destroy embedded Checkout","anchor":"embedded_checkout_destroy","path":"/embedded_checkout/destroy","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"Custom Checkout","anchor":"custom_checkout","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"custom_checkout_intro","path":"/custom_checkout","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Initialize Custom Checkout","anchor":"custom_checkout_init","path":"/custom_checkout/init","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"The Checkout object","anchor":"custom_checkout_checkout_object","path":"/custom_checkout/checkout_object","gate":null,"hide_from_nav":null,"subsections":[{"title":"Read session data","anchor":"custom_checkout_session","path":"/custom_checkout/session","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Apply a promotion code","anchor":"custom_checkout_session_apply_promotion_code","path":"/custom_checkout/apply_promotion_code","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Remove a promotion code","anchor":"custom_checkout_session_remove_promotion_code","path":"/custom_checkout/remove_promotion_code","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's shipping address","anchor":"custom_checkout_session_update_shipping_address","path":"/custom_checkout/update_shipping_address","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's billing address","anchor":"custom_checkout_session_update_billing_address","path":"/custom_checkout/update_billing_address","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's email address","anchor":"custom_checkout_session_update_email","path":"/custom_checkout/update_email","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's phone number","anchor":"custom_checkout_session_update_phone_number","path":"/custom_checkout/update_phone_number","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update line item quantities","anchor":"custom_checkout_session_update_line_item_quantity","path":"/custom_checkout/update_line_item_quantity","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update shipping option","anchor":"custom_checkout_session_update_shipping_option","path":"/custom_checkout/update_shipping_option","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm the session","anchor":"custom_checkout_session_confirm","path":"/custom_checkout/confirm","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"The Session object","anchor":"custom_checkout_session_object","path":"/custom_checkout/session_object","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Listen to Custom Checkout events","anchor":"custom_checkout_events","path":"/custom_checkout/events","gate":null,"hide_from_nav":null,"subsections":[{"title":"Change event","anchor":"custom_checkout_on_change","path":"/custom_checkout/change_event","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Elements methods","anchor":"custom_checkout_elements","path":"/custom_checkout/custom_checkout_elements","gate":null,"hide_from_nav":null,"subsections":[{"title":"Update Elements appearance","anchor":"custom_checkout_change_appearance","path":"/custom_checkout/change_appearance","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Get an Element","anchor":"custom_checkout_get_element","path":"/custom_checkout/get_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Create an Element","anchor":"custom_checkout_create_element","path":"/custom_checkout/create_element","gate":null,"hide_from_nav":null,"subsections":[]}]}],"expanded":true},{"title":"Custom Checkout (React)","anchor":"custom_checkout_react","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"custom_checkout_react_intro","path":"/custom_checkout/react","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"CustomCheckoutProvider","anchor":"custom_checkout_react_custom_checkout_provider","path":"/custom_checkout/react/custom_checkout_provider","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"useCustomCheckout hook","anchor":"custom_checkout_react_use_custom_checkout","path":"/custom_checkout/react/use_custom_checkout","gate":null,"hide_from_nav":null,"subsections":[{"title":"Apply a promotion code","anchor":"custom_checkout_session_react_apply_promotion_code","path":"/custom_checkout/react/apply_promotion_code","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Remove a promotion code","anchor":"custom_checkout_session_react_remove_promotion_code","path":"/custom_checkout/react/remove_promotion_code","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's shipping address","anchor":"custom_checkout_session_react_update_shipping_address","path":"/custom_checkout/react/update_shipping_address","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's billing address","anchor":"custom_checkout_session_react_update_billing_address","path":"/custom_checkout/react/update_billing_address","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's email address","anchor":"custom_checkout_react_update_email","path":"/custom_checkout/react/update_email","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update the customer's phone number","anchor":"custom_checkout_react_session_update_phone_number","path":"/custom_checkout/react/update_phone_number","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update line item quantities","anchor":"custom_checkout_react_session_update_line_item_quantity","path":"/custom_checkout/react/update_line_item_quantity","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update shipping option","anchor":"custom_checkout_react_session_update_shipping_option","path":"/custom_checkout/react/update_shipping_option","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm the session","anchor":"custom_checkout_react_session_confirm","path":"/custom_checkout/react/confirm","gate":null,"hide_from_nav":null,"subsections":[]}]}],"expanded":true},{"title":"Payment Intents","anchor":"payment_intents","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"payment_intents_intro","path":"/payment_intents","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Confirm a PaymentIntent","anchor":"confirm_payment_intent","path":"/payment_intents/confirm_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PaymentIntent by payment method","anchor":"confirm_payment_intent_payment_method","path":"/payment_intents/payment_method","gate":null,"hide_from_nav":null,"subsections":[{"title":"Confirm a card payment","anchor":"stripe_confirm_card_payment","path":"/payment_intents/confirm_card_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an ACH Direct Debit payment","anchor":"stripe_confirm_us_bank_account_payment","path":"/payment_intents/confirm_us_bank_account_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an ACSS Debit payment","anchor":"stripe_confirm_acss_debit_payment","path":"/payment_intents/confirm_acss_debit_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an Affirm payment","anchor":"stripe_confirm_affirm_payment","path":"/payment_intents/confirm_affirm_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an Afterpay Clearpay payment","anchor":"stripe_confirm_afterpay_clearpay_payment","path":"/payment_intents/confirm_afterpay_clearpay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an Alipay payment","anchor":"stripe_confirm_alipay_payment","path":"/payment_intents/confirm_alipay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a BECS debit payment","anchor":"stripe_confirm_au_becs_debit_payment","path":"/payment_intents/confirm_au_becs_debit_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Bancontact payment","anchor":"stripe_confirm_bancontact_payment","path":"/payment_intents/confirm_bancontact_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a BLIK payment","anchor":"stripe_confirm_blik_payment","path":"/payment_intents/confirm_blik_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Boleto payment","anchor":"stripe_confirm_boleto_payment","path":"/payment_intents/confirm_boleto_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Customer Balance payment","anchor":"stripe_confirm_customer_balance_payment","path":"/payment_intents/confirm_customer_balance_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Cash App Pay payment","anchor":"stripe_confirm_cashapp_payment","path":"/payment_intents/confirm_cashapp_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an EPS payment","anchor":"stripe_confirm_eps_payment","path":"/payment_intents/confirm_eps_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an FPX payment","anchor":"stripe_confirm_fpx_payment","path":"/payment_intents/confirm_fpx_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a giropay payment","anchor":"stripe_confirm_giropay_payment","path":"/payment_intents/confirm_giropay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a GrabPay payment","anchor":"stripe_confirm_grabpay_payment","path":"/payment_intents/confirm_grabpay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an iDEAL payment","anchor":"stripe_confirm_ideal_payment","path":"/payment_intents/confirm_ideal_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Klarna payment","anchor":"stripe_confirm_klarna_payment","path":"/payment_intents/confirm_klarna_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Konbini payment","anchor":"stripe_confirm_konbini_payment","path":"/payment_intents/confirm_konbini_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a MobilePay payment","anchor":"stripe_confirm_mobilepay_payment","path":"/payment_intents/confirm_mobilepay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Multibanco payment","anchor":"stripe_confirm_multibanco_payment","path":"/payment_intents/confirm_multibanco_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an OXXO payment","anchor":"stripe_confirm_oxxo_payment","path":"/payment_intents/confirm_oxxo_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Przelewy24 payment","anchor":"stripe_confirm_p24_payment","path":"/payment_intents/confirm_p24_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PayNow payment","anchor":"stripe_confirm_paynow_payment","path":"/payment_intents/confirm_paynow_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PayPal payment","anchor":"stripe_confirm_paypal_payment","path":"/payment_intents/confirm_paypal_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PayTo payment","anchor":"stripe_confirm_payto_payment","path":"/payment_intents/confirm_payto_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Pix payment","anchor":"stripe_confirm_pix_payment","path":"/payment_intents/confirm_pix_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PromptPay payment","anchor":"stripe_confirm_promptpay_payment","path":"/payment_intents/confirm_promptpay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a SEPA debit payment","anchor":"stripe_confirm_sepa_debit_payment","path":"/payment_intents/confirm_sepa_debit_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Sofort payment","anchor":"stripe_confirm_sofort_payment","path":"/payment_intents/confirm_sofort_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a TWINT payment","anchor":"stripe_confirm_twint_payment","path":"/payment_intents/confirm_twint_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a WeChat Pay payment","anchor":"stripe_confirm_wechat_pay_payment","path":"/payment_intents/confirm_wechat_pay_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a Zip payment","anchor":"stripe_confirm_zip_payment","path":"/payment_intents/confirm_zip_payment","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Retrieve a PaymentIntent","anchor":"stripe_retrieve_payment_intent","path":"/payment_intents/retrieve_payment_intent","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Verify with micro-deposits for payment","anchor":"stripe_verify_microdeposits_for_payment","path":"/payment_intents/verify_microdeposits_for_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Create a Radar Session","anchor":"stripe_create_radar_session","path":"/payment_intents/create_radar_session","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle a next action","anchor":"stripe_handle_next_action_for_payment","path":"/payment_intents/handle_next_action","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle a card action","anchor":"stripe_handle_card_action","path":"/payment_intents/handle_card_action","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Collect bank account details for payment","anchor":"stripe_collect_bank_account_for_payment","path":"/payment_intents/collect_bank_account_for_payment","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"Setup Intents","anchor":"setup_intents","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"setup_intents_intro","path":"/setup_intents","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Confirm a SetupIntent","anchor":"confirm_setup_intent","path":"/setup_intents/confirm_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a SetupIntent by payment method","anchor":"confirm_setup_intent_payment_method","path":"/setup_intents/payment_method","gate":null,"hide_from_nav":null,"subsections":[{"title":"Confirm card setup","anchor":"stripe_confirm_card_setup","path":"/setup_intents/confirm_card_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an ACH Direct Debit setup","anchor":"stripe_confirm_us_bank_account_setup","path":"/setup_intents/confirm_us_bank_account_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm an ACSS Debit setup","anchor":"stripe_confirm_acss_debit_setup","path":"/setup_intents/confirm_acss_debit_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm BECS Debit setup","anchor":"stripe_confirm_au_becs_debit_setup","path":"/setup_intents/confirm_au_becs_debit_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm Bacs Debit setup","anchor":"stripe_confirm_bacs_debit_setup","path":"/setup_intents/confirm_bacs_debit_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm Bancontact setup","anchor":"stripe_confirm_bancontact_setup","path":"/setup_intents/confirm_bancontact_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm Cash App Pay setup","anchor":"stripe_confirm_cashapp_setup","path":"/setup_intents/confirm_cashapp_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm iDEAL setup","anchor":"stripe_confirm_ideal_setup","path":"/setup_intents/confirm_ideal_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm PayPal setup","anchor":"stripe_confirm_paypal_setup","path":"/setup_intents/confirm_paypal_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm PayTo setup","anchor":"stripe_confirm_payto_setup","path":"/setup_intents/confirm_payto_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm SEPA Debit setup","anchor":"stripe_confirm_sepa_debit_setup","path":"/setup_intents/confirm_sepa_debit_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm Sofort setup","anchor":"stripe_confirm_sofort_setup","path":"/setup_intents/confirm_sofort_setup","gate":null,"hide_from_nav":null,"subsections":[]}]},{"title":"Retrieve a SetupIntent","anchor":"stripe_retrieve_setup_intent","path":"/setup_intents/retrieve_setup_intent","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Verify with micro-deposits for setup","anchor":"stripe_verify_microdeposits_for_setup","path":"/setup_intents/verify_microdeposits_for_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle a next action","anchor":"stripe_handle_next_action_for_setup","path":"/setup_intents/handle_next_action","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Collect bank account details for setup","anchor":"stripe_collect_bank_account_for_setup","path":"/setup_intents/collect_bank_account_for_setup","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"The Payment Request object","anchor":"payment_request","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"payment_request_intro","path":"/payment_request","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Create a PaymentRequest object","anchor":"stripe_payment_request","path":"/payment_request/create","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Check if a payment can be made","anchor":"payment_request_can_make_payment","path":"/payment_request/can_make_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Show the payment request interface","anchor":"payment_request_show","path":"/payment_request/show","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Update a PaymentRequest object","anchor":"payment_request_update","path":"/payment_request/update","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Listen to PaymentRequest events","anchor":"payment_request_events","path":"/payment_request/events","gate":null,"hide_from_nav":null,"subsections":[{"title":"Token event","anchor":"payment_request_on_token","path":"/payment_request/events/on_token","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"PaymentMethod event","anchor":"payment_request_on_payment_method","path":"/payment_request/events/on_paymentmethod","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Source event","anchor":"payment_request_on_source","path":"/payment_request/events/on_source","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Cancel event","anchor":"payment_request_on_cancel","path":"/payment_request/events/on_cancel","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Shipping address change event","anchor":"payment_request_on_shipping_address_change","path":"/payment_request/events/on_shipping_address_change","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Shipping option change event","anchor":"payment_request_on_shipping_option_change","path":"/payment_request/events/on_shipping_option_change","gate":null,"hide_from_nav":null,"subsections":[]}]}],"expanded":true},{"title":"Confirmation Tokens","anchor":"confirmation_tokens","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"confirmation_tokens_intro","path":"/confirmation_tokens","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Create a ConfirmationToken","anchor":"create_confirmation_token","path":"/confirmation_tokens/create_confirmation_token","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"Payment Methods","anchor":"payment_methods","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"payment_methods_intro","path":"/payment_methods","gate":null,"hide_from_nav":true,"subsections":[]},{"title":"Create a PaymentMethod","anchor":"stripe_create_payment_method","path":"/payment_methods/create_payment_method","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Create a PaymentMethod with Elements","anchor":"stripe_create_payment_method_elements","path":"/payment_methods/create_payment_method_elements","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":false},{"title":"Tokens","anchor":"tokens","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"tokens_intro","path":"/tokens","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Create a Token","anchor":"stripe_create_token","path":"/tokens/create_token","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":false},{"title":"Identity","anchor":"identity","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Show verification modal","anchor":"stripe_verify_identity","path":"/identity/modal","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":true},{"title":"Issuing","anchor":"issuing_elements","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Create an ephemeral key nonce","anchor":"stripe_create_ephemeral_key_nonce","path":"/issuing/create_ephemeral_key_nonce","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Retrieve an Issuing card","anchor":"stripe_retrieve_issuing_card","path":"/issuing/retrieve_issuing_card","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":false},{"title":"Financial Connections","anchor":"financial_connections","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Introduction","anchor":"financial_connections_intro","path":"/financial_connections","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Collect Financial Connections Accounts","anchor":"financial_connections_collect_financial_connections_accounts","path":"/financial_connections/collect_financial_connections_accounts","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Use Financial Connections to collect a bank account Token for payouts","anchor":"financial_connections_collect_bank_account_token","path":"/financial_connections/collect_bank_account_token","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":false},{"title":"Appendix","anchor":"appendix","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"CssFontSource object","anchor":"css_font_source_object","path":"/appendix/css_font_source_object","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"CustomFontSource object","anchor":"custom_font_source_object","path":"/appendix/custom_font_source_object","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Contact object","anchor":"contact_object","path":"/appendix/contact_object","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"PaymentItem object","anchor":"payment_item_object","path":"/appendix/payment_item_object","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"PaymentResponse object","anchor":"payment_response_object","path":"/appendix/payment_response","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"ShippingOption object","anchor":"shipping_option_object","path":"/appendix/shipping_option","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"ShippingAddress object","anchor":"shipping_address_object","path":"/appendix/shipping_address","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Style object","anchor":"style_object","path":"/appendix/style","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"UpdateDetails object","anchor":"update_details_object","path":"/appendix/update_details","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Supported browsers","anchor":"supported_browsers","path":"/appendix/supported_browsers","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Supported locales","anchor":"supported_locales","path":"/appendix/supported_locales","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Cookies","anchor":"cookies","path":"/appendix/cookies","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Viewport meta tag requirements","anchor":"viewport_meta_requirements","path":"/appendix/viewport_meta_requirements","gate":null,"hide_from_nav":null,"subsections":[]}],"expanded":false},{"title":"Deprecated","anchor":"deprecated","path":null,"gate":null,"hide_from_nav":null,"sections":[{"title":"Redirect to Checkout","anchor":"stripe_checkout_redirect_to_checkout","path":"/deprecated/redirect_to_checkout","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle a card payment with an Element","anchor":"stripe_handle_card_payment_element","path":"/deprecated/handle_card_payment_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle a card payment","anchor":"stripe_handle_card_payment","path":"/deprecated/handle_card_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PaymentIntent with an Element","anchor":"stripe_confirm_payment_intent_element","path":"/deprecated/confirm_payment_intent_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a PaymentIntent","anchor":"stripe_confirm_payment_intent","path":"/deprecated/confirm_payment_intent","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle card setup with an Element","anchor":"stripe_handle_card_setup_element","path":"/deprecated/handle_card_setup_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle card setup","anchor":"stripe_handle_card_setup","path":"/deprecated/handle_card_setup","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a SetupIntent with an Element","anchor":"stripe_confirm_setup_intent_element","path":"/deprecated/confirm_setup_intent_element","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Confirm a SetupIntent","anchor":"stripe_confirm_setup_intent","path":"/deprecated/confirm_setup_intent","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Handle an FPX payment","anchor":"stripe_handle_fpx_payment","path":"/deprecated/handle_fpx_payment","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Sources","anchor":"sources","path":"/deprecated/sources","gate":null,"hide_from_nav":null,"subsections":[{"title":"Create a Source","anchor":"stripe_create_source","path":"/deprecated/sources/create_source","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Create a Source from data","anchor":"stripe_create_source_data","path":"/deprecated/sources/create_source_data","gate":null,"hide_from_nav":null,"subsections":[]},{"title":"Retrieve a Source","anchor":"stripe_retrieve_source","path":"/deprecated/sources/retrieve_source","gate":null,"hide_from_nav":null,"subsections":[]}]}],"expanded":false}],
            flattenedAPISections: {"intro":{"title":"Introduction","group_title":"Setting up","group_anchor":"setting_up","anchor":"intro","section_anchor":"intro","subsection_anchors":null,"path":"/","gate":false,"data":{"section_type":"generic","title":"Stripe.js reference","description":"This reference documents every object and method available in Stripe’s browser-side JavaScript library, Stripe.js.\nUse our [React Stripe.js reference](/stripe-js/react) if you want to add Elements to your React based app.\n\nYou can use Stripe.js’ APIs to tokenize customer information,\ncollect sensitive payment details using customizable [Stripe Elements](/payments/elements),\nand accept payments with [browser payment APIs](/stripe-js/elements/payment-request-button)\nlike Apple Pay and the Payment Request API.\n","section_tag":"intro"},"display_on_load":true},"including_stripe_js":{"title":"Including Stripe.js","group_title":"Setting up","group_anchor":"setting_up","anchor":"including_stripe_js","section_anchor":"including_stripe_js","subsection_anchors":null,"path":"/including","gate":false,"data":{"section_type":"generic","title":"Including Stripe.js","description":"Include the Stripe.js script on each page of your site—it should always be loaded directly from `https://js.stripe.com`, rather than included in a bundle or hosted yourself.\n\nTo best leverage Stripe’s advanced fraud functionality, include this script on every page, not just the checkout page.\nThis [allows Stripe to detect suspicious behavior](/disputes/prevention/advanced-fraud-detection) that may be indicative of fraud as customers browse your website.\n\n**Using Stripe.js as a module**\n\nWe also provide an npm package that makes it easier to load and use Stripe.js as a module.\nFor more information, check out the [project on GitHub](https://github.com/stripe/stripe-js).\n\n**Asynchronous and deferred loading of Stripe.js**\n\nAsynchronous loading of JavaScript is generally recommended, as it can improve the user experience of your site by not blocking DOM rendering during [script loading.](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#script_loading_strategies)\nThe easiest way to asynchronously load Stripe.js is to use the npm module as described above.\nIt does asynchronous loading by default.\n\nYou can also load Stripe.js using the `async` or `defer` attribute on the script tag.\nNote, however, that with asynchronous loading any API calls will have to be made only after the script execution has finished.\n\n","request":{"title":"Including Stripe.js","snippets":{"html":"\u003Cscript src=\"https://js.stripe.com/v3/\"\u003E\u003C/script\u003E\n"}},"section_tag":"including_stripe_js"},"display_on_load":true},"init_stripe_js":{"title":"Initializing Stripe.js","group_title":"Setting up","group_anchor":"setting_up","anchor":"init_stripe_js","section_anchor":"init_stripe_js","subsection_anchors":null,"path":"/initializing","gate":false,"data":{"section_type":"method","title":"Initializing Stripe.js","description":"Use `Stripe(publishableKey, options?)` to create an instance of the **Stripe object**. The Stripe object is your entrypoint to the rest of the Stripe.js SDK.\n\nYour Stripe publishable [API key](/keys) is required when calling this function, as it identifies your website to Stripe.\n\nWe've prefilled the example with a sample [test API key](/keys). Don’t submit any personally identifiable information in requests made with this key.\nTo create a Stripe object using your account, replace the sample API key with your actual API key or [sign in](/login?redirect=%2Fdocs%2Fjs%2Finitializing).\n\n\nWhen you’re ready to accept live payments, replace the test key with your live key in production.\nLearn more about how API keys work in [test mode and live mode](/dashboard#viewing-test-data).\n\nWhen you use the same publishable API key and options, create and share a single instance of the Stripe object. Creating multiple instances might lead to performance issues.\n","signature":{"object_name":"Stripe","args":[{"name":"publishableKey","documentation":"Your publishable key.\n","validation":"string","required":true},{"name":"options","documentation":"Initialization options.\n","validation":"object","subspec":[{"name":"stripeAccount","documentation":"For usage with [Connect](/connect) only.\nSpecifying a connected account ID (e.g., `acct_24BFMpJ1svR5A89k`) allows you to perform actions on behalf of that account.\n","validation":"string"},{"name":"apiVersion","documentation":"Override your account's [API version](/api/versioning).\n","validation":"string"},{"name":"locale","documentation":"A [locale](#supported_locales) used to globally configure localization in Stripe.\nSetting the locale here will localize error strings for all Stripe.js methods.\nIt will also configure the locale for [Elements](#element_mount).\nDefault is `auto` (Stripe detects the locale of the browser).\n","validation":"string"}]}]},"table_content":{"items":[{"name":"publishableKey","documentation":"Your publishable key.\n","validation":"string","required":true},{"name":"options","documentation":"Initialization options.\n","validation":"object","subspec":[{"name":"stripeAccount","documentation":"For usage with [Connect](/connect) only.\nSpecifying a connected account ID (e.g., `acct_24BFMpJ1svR5A89k`) allows you to perform actions on behalf of that account.\n","validation":"string"},{"name":"apiVersion","documentation":"Override your account's [API version](/api/versioning).\n","validation":"string"},{"name":"locale","documentation":"A [locale](#supported_locales) used to globally configure localization in Stripe.\nSetting the locale here will localize error strings for all Stripe.js methods.\nIt will also configure the locale for [Elements](#element_mount).\nDefault is `auto` (Stripe detects the locale of the browser).\n","validation":"string"}]}]},"request":{"title":"Initializing Stripe.js","snippets":{"js":"var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n","es_next":"const stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n"}},"section_tag":"init_stripe_js"},"display_on_load":true},"elements_intro":{"title":"Introduction","group_title":"The Elements object","group_anchor":"elements_object","anchor":"elements_intro","section_anchor":"elements_intro","subsection_anchors":null,"path":"/elements_object","gate":false,"data":{"section_type":"generic","title":"The Elements object","description":"[Stripe Elements](/payments/elements) are customizable UI components used to collect sensitive information in your payment forms.\n\nUse an `Elements` instance to create and manage a group of individual [Element](/js/element) instances.\n","section_tag":"elements_intro"},"display_on_load":true},"stripe_elements":{"title":"Create an Elements object","group_title":"The Elements object","group_anchor":"elements_object","anchor":"stripe_elements","section_anchor":"stripe_elements","subsection_anchors":null,"path":"/elements_object/create","gate":false,"data":{"section_type":"method","title":"Create an Elements instance","description":"This method creates an `Elements` instance, which manages a group of elements.\n\nFor the [Payment Element created without an Intent](/payments/accept-a-payment-deferred) and the [Express Checkout Element](/elements/express-checkout-element), see the [Elements object without an Intent](/js/elements_object/create_without_intent) reference instead.\n","signature":{"object_name":"stripe","method_name":"elements","args":[{"name":"options","required":false,"expanded":true,"validation":"object","documentation":"A set of options to create this `Elements` instance with.\n","subspec":[{"name":"fonts","documentation":"An array of custom fonts, which elements created from the `Elements` object can use. Fonts can be specified as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false},{"name":"locale","documentation":"A [locale](#supported_locales) to display placeholders and error strings in.\nDefault is `auto` (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nTo indicate the direction of text for *right to left* languages such as Arabic and Hebrew, mount Elements underneath an HTML element that includes the `dir=\"rtl\"` attribute.\n","validation":"string","required":false},{"name":"externalPaymentMethodTypes","documentation":"The [external payment methods](/payments/external-payment-methods) to be displayed in the [Payment Element](/payments/payment-element) that you are already integrated with.\nMust be an [available external payment methods](/payments/external-payment-methods#available-external-payment-methods).\n","validation":"string","required":false},{"name":"clientSecret","documentation":"Required to use with the [Payment Element](/payments/payment-element) and the [Link Authentication Element](/payments/link).\n\nThe [client secret](/api/payment_intents/object#payment_intent_object-client_secret) for a PaymentIntent or SetupIntent.\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"appearance","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), and the [Address Element](/elements/address-element/).\n\nMatch the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), and the [Address Element](/elements/address-element/).\n\nDisplay skeleton loader UI while waiting for Elements to be fully loaded, after they are mounted.\nDefault is `'auto'` (Stripe determines if a loader UI should be shown).\n","validation":"'auto' | 'always' | 'never'"},{"name":"currency","documentation":"Used with the [Payment Element](/payments/payment-element).\n\nInfluences available payment methods when creating SetupIntents with [automatic_payment_methods](/api/setup_intents/create#create_setup_intent-automatic_payment_methods).\nPayment Element renders the payment methods enabled in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) that support the provided currency.\n\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](/currencies).\n","validation":"string","required":false}]}]},"table_content":{"items":[{"name":"options","required":false,"expanded":true,"validation":"object","documentation":"A set of options to create this `Elements` instance with.\n","subspec":[{"name":"fonts","documentation":"An array of custom fonts, which elements created from the `Elements` object can use. Fonts can be specified as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false},{"name":"locale","documentation":"A [locale](#supported_locales) to display placeholders and error strings in.\nDefault is `auto` (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nTo indicate the direction of text for *right to left* languages such as Arabic and Hebrew, mount Elements underneath an HTML element that includes the `dir=\"rtl\"` attribute.\n","validation":"string","required":false},{"name":"externalPaymentMethodTypes","documentation":"The [external payment methods](/payments/external-payment-methods) to be displayed in the [Payment Element](/payments/payment-element) that you are already integrated with.\nMust be an [available external payment methods](/payments/external-payment-methods#available-external-payment-methods).\n","validation":"string","required":false},{"name":"clientSecret","documentation":"Required to use with the [Payment Element](/payments/payment-element) and the [Link Authentication Element](/payments/link).\n\nThe [client secret](/api/payment_intents/object#payment_intent_object-client_secret) for a PaymentIntent or SetupIntent.\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"appearance","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), and the [Address Element](/elements/address-element/).\n\nMatch the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), and the [Address Element](/elements/address-element/).\n\nDisplay skeleton loader UI while waiting for Elements to be fully loaded, after they are mounted.\nDefault is `'auto'` (Stripe determines if a loader UI should be shown).\n","validation":"'auto' | 'always' | 'never'"},{"name":"currency","documentation":"Used with the [Payment Element](/payments/payment-element).\n\nInfluences available payment methods when creating SetupIntents with [automatic_payment_methods](/api/setup_intents/create#create_setup_intent-automatic_payment_methods).\nPayment Element renders the payment methods enabled in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) that support the provided currency.\n\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](/currencies).\n","validation":"string","required":false}]}]},"request":{"title":"Create an Elements instance","snippets":{"js":"var elements = stripe.elements({\n  clientSecret: 'CLIENT_SECRET',\n});\n","es_next":"const elements = stripe.elements({\n  clientSecret: 'CLIENT_SECRET',\n});\n"}},"section_tag":"stripe_elements"},"display_on_load":true},"stripe_elements_no_intent":{"title":"Create an Elements object without an Intent","group_title":"The Elements object","group_anchor":"elements_object","anchor":"stripe_elements_no_intent","section_anchor":"stripe_elements_no_intent","subsection_anchors":null,"path":"/elements_object/create_without_intent","gate":false,"data":{"section_type":"method","title":"Create an Elements instance without an intent","description":"This method creates an `Elements` instance, which manages a group of elements.\n\nThis reference applies to the [Payment Element created without an Intent](/payments/accept-a-payment-deferred), [Express Checkout Element](/elements/express-checkout-element), and [Card Elements](/payments/card-element). For other elements, see the [Elements object](/js/elements_object/create) reference instead.\n","signature":{"object_name":"stripe","method_name":"elements","args":[{"name":"options","required":false,"expanded":true,"validation":"object","documentation":"A set of options to create this `Elements` instance with.\n","subspec":[{"name":"fonts","documentation":"An array of custom fonts, which elements created from the `Elements` object can use. Fonts can be specified as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false},{"name":"locale","documentation":"A [locale](#supported_locales) to display placeholders and error strings in.\nDefault is `auto` (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nTo indicate the direction of text for *right to left* languages such as Arabic and Hebrew, mount Elements underneath an HTML element that includes the `dir=\"rtl\"` attribute.\n","validation":"string","required":false},{"name":"mode","documentation":"Required to use with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nFilters out payment methods based on intended use.\n","validation":"'payment' | 'setup' | 'subscription'","required":true,"requirement_text":"Conditionally required"},{"name":"currency","documentation":"Required to use with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](/currencies).\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"amount","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element). Required when `mode` is `payment` or `subscription`.\n\nShown in Apple Pay, Google Pay, or Buy now pay later UIs. The amount intended to be collected from the customer right now.\nA positive integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100\nto charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](/currencies#minimum-and-maximum-charge-amounts).\nThe amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n","validation":"number","required":true,"requirement_text":"Conditionally required"},{"name":"setupFutureUsage","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nIndicates that you intend to make future payments with the payment details collected by the Payment Element.\n\nThis should match the [setup_future_usage](/api/payment_intents/create#create_payment_intent-setup_future_usage) provided on the Intent used when confirming payment.\n","validation":"'on_session' | 'off_session'"},{"name":"captureMethod","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nInfluences available payment methods. This should match the [capture_method](/api/payment_intents/create#create_payment_intent-capture_method) provided on the Intent used when confirming payment.\n","validation":"'automatic' | 'automatic_async' | 'manual'"},{"name":"onBehalfOf","documentation":"Used with the [Payment Element](/payments/payment-element), [Express Checkout Element](/elements/express-checkout-element), and [Card Elements](/payments/card-element).\n\nThe Stripe account ID which is the business of record. See [use cases](/connect/charges) to determine if this option is relevant for your integration. This should match the [on_behalf_of](/api/payment_intents/create#create_payment_intent-on_behalf_of) provided on the Intent used when confirming payment.\n","validation":"string","requirement_text":"Connect only"},{"name":"paymentMethodTypes","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nA list of payment method types to render. You can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n","validation":"array"},{"name":"paymentMethodConfiguration","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nThe [payment method configuration](/api/payment_method_configurations) to use when managing your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). If none is specified, your default configuration is used.\n","validation":"string"},{"name":"paymentMethodCreation","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nAllows PaymentMethods to be created from the Elements instance using [stripe.createPaymentMethod](/js/payment_methods/create_payment_method_elements).\n","validation":"'manual'"},{"name":"paymentMethodOptions","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nAdditional payment-method-specific options for configuring behavior when initialized without an intent.\n","validation":"object","subspec":[{"name":"us_bank_account","documentation":"If this is a `us_bank_account` PaymentMethod, this sub-hash contains details about the US bank account payment method options.\n","validation":"object","subspec":[{"name":"verification_method","documentation":"Verification method for the US bank account collection flow\n","validation":"'automatic' | 'instant'"},{"name":"financial_connections","documentation":"Additional fields for Financial Connections session creation\n","validation":"object","subspec":[{"name":"permissions","validation":"array","documentation":"The list of permissions to request. If this parameter is passed, the `payment_method` permission must be included. Valid permissions include: `balances`, `ownership`, `payment_method`, and `transactions`.\n"}]}]}]},{"name":"appearance","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), the [Express Checkout Element](/elements/express-checkout-element), and the [Address Element](/elements/address-element/).\n\nMatch the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), and the [Address Element](/elements/address-element/).\n\nDisplay skeleton loader UI while waiting for Elements to be fully loaded, after they are mounted.\nDefault is `'auto'` (Stripe determines if a loader UI should be shown).\n","validation":"'auto' | 'always' | 'never'"}]}]},"table_content":{"items":[{"name":"options","required":false,"expanded":true,"validation":"object","documentation":"A set of options to create this `Elements` instance with.\n","subspec":[{"name":"fonts","documentation":"An array of custom fonts, which elements created from the `Elements` object can use. Fonts can be specified as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false},{"name":"locale","documentation":"A [locale](#supported_locales) to display placeholders and error strings in.\nDefault is `auto` (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nTo indicate the direction of text for *right to left* languages such as Arabic and Hebrew, mount Elements underneath an HTML element that includes the `dir=\"rtl\"` attribute.\n","validation":"string","required":false},{"name":"mode","documentation":"Required to use with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nFilters out payment methods based on intended use.\n","validation":"'payment' | 'setup' | 'subscription'","required":true,"requirement_text":"Conditionally required"},{"name":"currency","documentation":"Required to use with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](/currencies).\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"amount","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element). Required when `mode` is `payment` or `subscription`.\n\nShown in Apple Pay, Google Pay, or Buy now pay later UIs. The amount intended to be collected from the customer right now.\nA positive integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100\nto charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](/currencies#minimum-and-maximum-charge-amounts).\nThe amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n","validation":"number","required":true,"requirement_text":"Conditionally required"},{"name":"setupFutureUsage","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nIndicates that you intend to make future payments with the payment details collected by the Payment Element.\n\nThis should match the [setup_future_usage](/api/payment_intents/create#create_payment_intent-setup_future_usage) provided on the Intent used when confirming payment.\n","validation":"'on_session' | 'off_session'"},{"name":"captureMethod","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nInfluences available payment methods. This should match the [capture_method](/api/payment_intents/create#create_payment_intent-capture_method) provided on the Intent used when confirming payment.\n","validation":"'automatic' | 'automatic_async' | 'manual'"},{"name":"onBehalfOf","documentation":"Used with the [Payment Element](/payments/payment-element), [Express Checkout Element](/elements/express-checkout-element), and [Card Elements](/payments/card-element).\n\nThe Stripe account ID which is the business of record. See [use cases](/connect/charges) to determine if this option is relevant for your integration. This should match the [on_behalf_of](/api/payment_intents/create#create_payment_intent-on_behalf_of) provided on the Intent used when confirming payment.\n","validation":"string","requirement_text":"Connect only"},{"name":"paymentMethodTypes","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nA list of payment method types to render. You can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n","validation":"array"},{"name":"paymentMethodConfiguration","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nThe [payment method configuration](/api/payment_method_configurations) to use when managing your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). If none is specified, your default configuration is used.\n","validation":"string"},{"name":"paymentMethodCreation","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nAllows PaymentMethods to be created from the Elements instance using [stripe.createPaymentMethod](/js/payment_methods/create_payment_method_elements).\n","validation":"'manual'"},{"name":"paymentMethodOptions","documentation":"Used with the [Payment Element](/payments/payment-element) and [Express Checkout Element](/elements/express-checkout-element).\n\nAdditional payment-method-specific options for configuring behavior when initialized without an intent.\n","validation":"object","subspec":[{"name":"us_bank_account","documentation":"If this is a `us_bank_account` PaymentMethod, this sub-hash contains details about the US bank account payment method options.\n","validation":"object","subspec":[{"name":"verification_method","documentation":"Verification method for the US bank account collection flow\n","validation":"'automatic' | 'instant'"},{"name":"financial_connections","documentation":"Additional fields for Financial Connections session creation\n","validation":"object","subspec":[{"name":"permissions","validation":"array","documentation":"The list of permissions to request. If this parameter is passed, the `payment_method` permission must be included. Valid permissions include: `balances`, `ownership`, `payment_method`, and `transactions`.\n"}]}]}]},{"name":"appearance","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), the [Express Checkout Element](/elements/express-checkout-element), and the [Address Element](/elements/address-element/).\n\nMatch the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Supported for the [Payment Element](/payments/payment-element), the [Link Authentication Element](/payments/link), and the [Address Element](/elements/address-element/).\n\nDisplay skeleton loader UI while waiting for Elements to be fully loaded, after they are mounted.\nDefault is `'auto'` (Stripe determines if a loader UI should be shown).\n","validation":"'auto' | 'always' | 'never'"}]}]},"request":{"title":"Create an Elements instance without an intent","snippets":{"js":"var elements = stripe.elements({\n  mode: 'payment',\n  currency: 'usd',\n  amount: 1099,\n});\n","es_next":"const elements = stripe.elements({\n  mode: 'payment',\n  currency: 'usd',\n  amount: 1099,\n});\n"}},"section_tag":"stripe_elements_no_intent"},"display_on_load":true},"elements_update":{"title":"Update an Elements object","group_title":"The Elements object","group_anchor":"elements_object","anchor":"elements_update","section_anchor":"elements_update","subsection_anchors":null,"path":"/elements_object/update","gate":false,"data":{"section_type":"method","title":"Update Elements Options","description":"This method updates options on an existing instance of `Elements`. Note that not all options (e.g. `fonts`) are updatable.\n","signature":{"object_name":"elements","method_name":"update","args":[{"name":"options","required":true,"expanded":true,"validation":"object","documentation":"A set of options to update this `Elements` instance with.\n","subspec":[{"name":"locale","documentation":"A [locale](#supported_locales) to display placeholders and error strings in.\nDefault is `auto` (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nTo indicate the direction of text for *right to left* languages such as Arabic and Hebrew, mount Elements underneath an HTML element that includes the `dir=\"rtl\"` attribute.\n","validation":"string","required":false},{"name":"mode","documentation":"Used with the [Payment Element](/payments/payment-element).\n\nFilters out payment methods based on intended use.\n","validation":"'payment' | 'setup' | 'subscription'"},{"name":"currency","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](/currencies).\n","validation":"string"},{"name":"amount","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nShown in Apple Pay, Google Pay, or Buy now pay later UIs. The amount intended to be collected from the customer right now.\nA positive integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100\nto charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](/currencies#minimum-and-maximum-charge-amounts).\nThe amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n","validation":"number"},{"name":"setupFutureUsage","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nInfluences available payment methods and the [terms](/js/elements_object/create_payment_element#payment_element_create-options-terms) shown by the Payment Element.\n\nThis should match the [setup_future_usage](/api/payment_intents/create#create_payment_intent-setup_future_usage) provided on the Intent used when confirming payment.\n","validation":"'on_session' | 'off_session'"},{"name":"captureMethod","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nInfluences available payment methods. This should match the [capture method](/api/payment_intents/create#create_payment_intent-capture_method) provided on the PaymentIntent or SetupIntent used when confirming payment.\n","validation":"'automatic' | 'automatic_async' | 'manual'"},{"name":"onBehalfOf","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element). This property can't be updated when used with the [Card Element](/payments/card-element).\n\nThe Stripe account ID, which is the business of record. Review the [use cases](/connect/charges) to determine if this option is relevant for your integration. Make sure this matches the [on_behalf_of](/api/payment_intents/create#create_payment_intent-on_behalf_of) provided on the Intent used when confirming payment.\n","validation":"string","requirement_text":"Connect only"},{"name":"paymentMethodTypes","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nInstead of using dynamic payment methods, declare specific [payment methods](/payments/payment-methods/overview) to enable.\n","validation":"array"},{"name":"paymentMethodOptions","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nAdditional payment-method-specific options for configuring behavior when initialized without an intent.\n","validation":"object","subspec":[{"name":"us_bank_account","documentation":"If this is a `us_bank_account` PaymentMethod, this sub-hash contains details about the US bank account payment method options.\n","validation":"object","subspec":[{"name":"verification_method","documentation":"Verification method for the US bank account collection flow\n","validation":"'automatic' | 'instant'"},{"name":"financial_connections","documentation":"Additional fields for Financial Connections session creation\n","validation":"object","subspec":[{"name":"permissions","validation":"array","documentation":"The list of permissions to request. If this parameter is passed, the `payment_method` permission must be included. Valid permissions include: `balances`, `ownership`, `payment_method`, and `transactions`.\n"}]}]}]},{"name":"appearance","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nMatch the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object"}]}]},"table_content":{"items":[{"name":"options","required":true,"expanded":true,"validation":"object","documentation":"A set of options to update this `Elements` instance with.\n","subspec":[{"name":"locale","documentation":"A [locale](#supported_locales) to display placeholders and error strings in.\nDefault is `auto` (Stripe detects the locale of the browser).\n\nSetting the locale does not affect the behavior of postal code validation—a valid postal code for the billing country of the card is still required.\n\nTo indicate the direction of text for *right to left* languages such as Arabic and Hebrew, mount Elements underneath an HTML element that includes the `dir=\"rtl\"` attribute.\n","validation":"string","required":false},{"name":"mode","documentation":"Used with the [Payment Element](/payments/payment-element).\n\nFilters out payment methods based on intended use.\n","validation":"'payment' | 'setup' | 'subscription'"},{"name":"currency","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nThree-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](/currencies).\n","validation":"string"},{"name":"amount","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nShown in Apple Pay, Google Pay, or Buy now pay later UIs. The amount intended to be collected from the customer right now.\nA positive integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100\nto charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](/currencies#minimum-and-maximum-charge-amounts).\nThe amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n","validation":"number"},{"name":"setupFutureUsage","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nInfluences available payment methods and the [terms](/js/elements_object/create_payment_element#payment_element_create-options-terms) shown by the Payment Element.\n\nThis should match the [setup_future_usage](/api/payment_intents/create#create_payment_intent-setup_future_usage) provided on the Intent used when confirming payment.\n","validation":"'on_session' | 'off_session'"},{"name":"captureMethod","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nInfluences available payment methods. This should match the [capture method](/api/payment_intents/create#create_payment_intent-capture_method) provided on the PaymentIntent or SetupIntent used when confirming payment.\n","validation":"'automatic' | 'automatic_async' | 'manual'"},{"name":"onBehalfOf","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element). This property can't be updated when used with the [Card Element](/payments/card-element).\n\nThe Stripe account ID, which is the business of record. Review the [use cases](/connect/charges) to determine if this option is relevant for your integration. Make sure this matches the [on_behalf_of](/api/payment_intents/create#create_payment_intent-on_behalf_of) provided on the Intent used when confirming payment.\n","validation":"string","requirement_text":"Connect only"},{"name":"paymentMethodTypes","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nInstead of using dynamic payment methods, declare specific [payment methods](/payments/payment-methods/overview) to enable.\n","validation":"array"},{"name":"paymentMethodOptions","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nAdditional payment-method-specific options for configuring behavior when initialized without an intent.\n","validation":"object","subspec":[{"name":"us_bank_account","documentation":"If this is a `us_bank_account` PaymentMethod, this sub-hash contains details about the US bank account payment method options.\n","validation":"object","subspec":[{"name":"verification_method","documentation":"Verification method for the US bank account collection flow\n","validation":"'automatic' | 'instant'"},{"name":"financial_connections","documentation":"Additional fields for Financial Connections session creation\n","validation":"object","subspec":[{"name":"permissions","validation":"array","documentation":"The list of permissions to request. If this parameter is passed, the `payment_method` permission must be included. Valid permissions include: `balances`, `ownership`, `payment_method`, and `transactions`.\n"}]}]}]},{"name":"appearance","documentation":"Used with the [Payment Element](/payments/payment-element) and the [Express Checkout Element](/elements/express-checkout-element).\n\nMatch the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object"}]}]},"request":{"title":"Update Elements","snippets":{"js":"elements.update({locale: 'fr'});\n","es_next":"elements.update({locale: 'fr'});\n"}},"section_tag":"elements_update"},"display_on_load":true},"elements_fetch_updates":{"title":"Fetch Elements Updates","group_title":"The Element","group_anchor":"element","anchor":"elements_fetch_updates","section_anchor":"payment_element","subsection_anchors":null,"path":"/elements_object/fetch_updates","gate":false,"data":{"section_type":"method","title":"Fetch Server Updates","description":"Used with the [Payment Element](/payments/payment-element).\n\nThis method fetches updates from the associated [PaymentIntent](/api/payment_intents) or [SetupIntent](/api/setup_intents) on an existing instance of `Elements`, and reflects these updates in the Payment Element.\n","signature":{"object_name":"elements","method_name":"fetchUpdates"},"request":{"title":"Fetch Server Updates","snippets":{"js":"elements.fetchUpdates()\n  .then(function(result) {\n    // Handle result.error\n  });\n","es_next":"const {error} = await elements.fetchUpdates();\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nIf this method succeeds, the result object will be empty.\nIf this method fails, the result object will contain a localized error message in the `error.message` field. If the associated [PaymentIntent](/api/payment_intents) or [SetupIntent](/api/setup_intents) is in an unexpected status, the result object will also contain the intent's status in the `error.status` field.\n","section_tag":"elements_fetch_updates"},"display_on_load":true},"elements_submit":{"title":"Submit an Elements object","group_title":"The Elements object","group_anchor":"elements_object","anchor":"elements_submit","section_anchor":"elements_submit","subsection_anchors":null,"path":"/elements/submit","gate":false,"data":{"section_type":"method","title":"Submit ","description":"Use `elements.submit()` when creating the [Elements object without an Intent](#stripe_elements_no_intent).\n\nBefore confirming a payment, call `elements.submit()` to validate the form fields and collect any data required for [wallets](#payment_element_create-options-wallets).\n","signature":{"object_name":"element","method_name":"submit"},"request":{"title":"Submit Elements","snippets":{"js":"elements.submit()\n  .then(function(result) {\n    // Handle result.error\n  });\n","es_next":"const {error} = await elements.submit();\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nIf this method succeeds, the result object will be empty.\nIf this method fails, the result object will contain a localized error message in the `error.message` field.\n","section_tag":"elements_submit"},"display_on_load":true},"element_intro":{"title":"Introduction","group_title":"The Element","group_anchor":"element","anchor":"element_intro","section_anchor":"element_intro","subsection_anchors":null,"path":"/element","gate":false,"data":{"section_type":"generic","title":"The Element","description":"Use `Element` instances to collect sensitive information in your checkout flow.\n","section_tag":"element_intro"},"display_on_load":true},"payment_element":{"title":"Payment Element","group_title":"The Element","group_anchor":"element","anchor":"payment_element","section_anchor":"payment_element","subsection_anchors":["payment_element_create","payment_element_get","payment_element_update","elements_fetch_updates","payment_element_collapse"],"path":"/element/payment_element","gate":false,"data":{"section_type":"generic","title":"The Payment Element","description":"The [Payment Element](/payments/payment-element) is\nan embeddable component for securely collecting payment details.\nThe Payment Element supports dozens of payment methods with a single integration.\n","section_tag":"payment_element"},"display_on_load":true},"payment_element_create":{"title":"Create a Payment Element","group_title":"The Element","group_anchor":"element","anchor":"payment_element_create","section_anchor":"payment_element","subsection_anchors":null,"path":"/elements_object/create_payment_element","gate":false,"data":{"section_type":"method","title":"Create the Payment Element","description":"This method creates an instance of the Payment Element.\n","signature":{"object_name":"elements","method_name":"create","args":[{"name":"type","documentation":"The type of Element being created, which is `payment` in this case.\n","validation":"'payment'","render_as_value":"'payment'","required":true},{"name":"options","documentation":"Options for creating the Payment Element.\n","validation":"object","expanded":true,"subspec":[{"name":"layout","validation":"'accordion' | 'tabs' | object","documentation":"Specify the layout for the Payment Element. If you only pass a layout type (`'accordion'` or `‘tabs’`) without any additional parameters, the Payment Element renders using that layout and the default values associated with it.\n\nAn object can also be passed to specify the layout with additional configuration.\n","expanded":false,"subspec":[{"name":"type","validation":"'accordion' | 'tabs'","required":true,"documentation":"Defines the layout to render the Payment Element.\n"},{"name":"defaultCollapsed","validation":"boolean","documentation":"Controls if the Payment Element renders in a collapsed state (where no payment method is selected by default). When you leave this `undefined`, Stripe renders the experience that it determines will have the best conversion.\n"},{"name":"radios","validation":"boolean","documentation":"Renders each Payment Method with a radio input next to its logo. The radios visually indicate the current selection of the Payment Element.\n\n_This property is only applicable to the `accordion` layout._\n"},{"name":"spacedAccordionItems","validation":"boolean","documentation":"When `true`, the Payment Methods render as standalone buttons with space in between them.\n\n_This property is only applicable to the `accordion` layout._\n"},{"name":"visibleAccordionItemsCount","validation":"number","documentation":"Sets the max number of Payment Methods visible before using the \"More\" button to hide additional Payment Methods. Set this value to `0` to disable the \"More\" button and render all available Payment Methods. Default is `5`.\n\n_This property is only applicable to the `accordion` layout._\n"}]},{"name":"defaultValues","validation":"object","documentation":"Provide initial customer information that will be displayed in the Payment Element.\nThe form will render with empty fields if not provided.\n","expanded":false,"subspec":[{"name":"billingDetails","validation":"object","documentation":"Specify customer's billing details, which lets you pre-fill a customer’s name, email,\nphone number and address if required by payment method. Pre-filling as much information\nas possible streamlines the checkout process.\n","expanded":true,"subspec":[{"name":"name","validation":"string"},{"name":"email","validation":"string"},{"name":"phone","validation":"string"},{"name":"address","validation":"object","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"country","validation":"string"},{"name":"postal_code","validation":"string"}]}]},{"name":"paymentMethods","validation":"object","documentation":"Specify customer's default information for different payment methods. Pre-filling as much information\nas possible streamlines the checkout process.\n","expanded":true,"subspec":[{"name":"ideal","validation":"object","subspec":[{"name":"bank","documentation":"A pre-filled iDEAL bank value for the Payment Element. Can only be one of the banks listed in the [iDEAL guide](/payments/ideal/accept-a-payment?ui=element#bank-reference) (e.g., `abn_amro`).\n","validation":"string"}]}]},{"name":"card","validation":"object","documentation":"Specify default settings for card payments.\n","expanded":true,"subspec":[{"name":"network","validation":"array","documentation":"Specifies a network preference for [Card Brand Choice](/card-brand-choice). The first network in the array that matches a network on the entered co-branded card will be selected by default in the Card Brand Choice dropdown. See the [supported networks](/api/payment_methods/create#create_payment_method-card-networks-preferred) for valid values.\n"}]}]},{"name":"business","documentation":"Provide information about your business that will be displayed in the Payment Element.\nThis information will be retrieved from your Stripe account if not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name will be used to render mandate text for some payment methods.\n"}],"expanded":true},{"name":"paymentMethodOrder","documentation":"By default, the Payment Element will use a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.\n\nIf the associated PaymentIntent has payment method types not specified in `paymentMethodOrder`, they will be displayed\nafter the payment methods you specify. If you specify payment method types not on the associated PaymentIntent, they will be ignored.\n","validation":"array"},{"name":"fields","documentation":"By default, the Payment Element will collect all necessary details to complete a payment.\n\nFor some payment methods, this means that the Payment Element will collect details like name or email\nthat you may have already collected from the user. If this is the case, you can prevent the Payment Element\nfrom collecting these data by using the `fields` option.\n\nIf you disable the collection of a certain field\nwith the `fields` option, you must pass that same data to [stripe.confirmPayment](/js/payment_intents/confirm_payment)\nor the payment will be rejected.\n\nSee [below](/js/elements_object/create_payment_element#payment_element_create-customized_fields) for details.\n","validation":"object","subspec":[{"name":"billingDetails","validation":"'never' | 'auto' | object","documentation":"Specify `never` to avoid collecting all [billing details](/api/payment_methods/object#payment_method_object-billing_details)\nin the Payment Element. If you would like to disable only certain billing details,\npass an object specifying which fields you would like to disable collection for.\nThe default setting for each field or object is `auto`.\n","expanded":true,"subspec":[{"name":"name","validation":"'never' | 'auto'"},{"name":"email","validation":"'never' | 'auto'"},{"name":"phone","validation":"'never' | 'auto'"},{"name":"address","validation":"'never' | 'auto' | object","subspec":[{"name":"line1","validation":"'never' | 'auto'"},{"name":"line2","validation":"'never' | 'auto'"},{"name":"city","validation":"'never' | 'auto'"},{"name":"state","validation":"'never' | 'auto'"},{"name":"country","validation":"'never' | 'auto'"},{"name":"postalCode","validation":"'never' | 'auto'"}]}]}]},{"name":"readOnly","documentation":"Applies a read-only state to the Payment Element so that payment details can’t be changed. Default is false.\n\nEnabling the `readOnly` option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the [Appearance API](/elements/appearance-api).\n","validation":"boolean"},{"name":"terms","documentation":"Control how mandates or other legal agreements are displayed in the Payment Element.\nUse `never` to never display legal agreements. The default setting is `auto`, which causes\nlegal agreements to only be shown when necessary.\n","validation":"object","subspec":[{"name":"applePay","validation":"'auto' | 'always' | 'never'"},{"name":"auBecsDebit","validation":"'auto' | 'always' | 'never'"},{"name":"bancontact","validation":"'auto' | 'always' | 'never'"},{"name":"card","validation":"'auto' | 'always' | 'never'"},{"name":"cashapp","validation":"'auto' | 'always' | 'never'"},{"name":"googlePay","validation":"'auto' | 'always' | 'never'"},{"name":"ideal","validation":"'auto' | 'always' | 'never'"},{"name":"paypal","validation":"'auto' | 'always' | 'never'"},{"name":"sepaDebit","validation":"'auto' | 'always' | 'never'"},{"name":"sofort","validation":"'auto' | 'always' | 'never'"},{"name":"usBankAccount","validation":"'auto' | 'always' | 'never'"}]},{"name":"wallets","documentation":"By default, the Payment Element will display all the payment\nmethods that the underlying Payment Intent was created with.\n\nHowever, wallets like Apple Pay and Google Pay are not payment\nmethods per the Payment Intent API. They will show when the\nPayment Intent has the `card` payment method and the customer is\nusing a supported platform and have an active card in their\naccount.  This is the `auto` behavior, and it is the default for\nchoice for all wallets.\n\nIf you do not want to show a given wallet as a payment option, you\ncan set its property in `wallets` to `never`.\n","validation":"object","subspec":[{"name":"applePay","validation":"'auto' | 'never'"},{"name":"googlePay","validation":"'auto' | 'never'"}]},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.,\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"\"If set, you must also supply a freeCancellationDate.,\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]}],"required":false}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created, which is `payment` in this case.\n","validation":"'payment'","render_as_value":"'payment'","required":true},{"name":"options","documentation":"Options for creating the Payment Element.\n","validation":"object","expanded":true,"subspec":[{"name":"layout","validation":"'accordion' | 'tabs' | object","documentation":"Specify the layout for the Payment Element. If you only pass a layout type (`'accordion'` or `‘tabs’`) without any additional parameters, the Payment Element renders using that layout and the default values associated with it.\n\nAn object can also be passed to specify the layout with additional configuration.\n","expanded":false,"subspec":[{"name":"type","validation":"'accordion' | 'tabs'","required":true,"documentation":"Defines the layout to render the Payment Element.\n"},{"name":"defaultCollapsed","validation":"boolean","documentation":"Controls if the Payment Element renders in a collapsed state (where no payment method is selected by default). When you leave this `undefined`, Stripe renders the experience that it determines will have the best conversion.\n"},{"name":"radios","validation":"boolean","documentation":"Renders each Payment Method with a radio input next to its logo. The radios visually indicate the current selection of the Payment Element.\n\n_This property is only applicable to the `accordion` layout._\n"},{"name":"spacedAccordionItems","validation":"boolean","documentation":"When `true`, the Payment Methods render as standalone buttons with space in between them.\n\n_This property is only applicable to the `accordion` layout._\n"},{"name":"visibleAccordionItemsCount","validation":"number","documentation":"Sets the max number of Payment Methods visible before using the \"More\" button to hide additional Payment Methods. Set this value to `0` to disable the \"More\" button and render all available Payment Methods. Default is `5`.\n\n_This property is only applicable to the `accordion` layout._\n"}]},{"name":"defaultValues","validation":"object","documentation":"Provide initial customer information that will be displayed in the Payment Element.\nThe form will render with empty fields if not provided.\n","expanded":false,"subspec":[{"name":"billingDetails","validation":"object","documentation":"Specify customer's billing details, which lets you pre-fill a customer’s name, email,\nphone number and address if required by payment method. Pre-filling as much information\nas possible streamlines the checkout process.\n","expanded":true,"subspec":[{"name":"name","validation":"string"},{"name":"email","validation":"string"},{"name":"phone","validation":"string"},{"name":"address","validation":"object","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"country","validation":"string"},{"name":"postal_code","validation":"string"}]}]},{"name":"paymentMethods","validation":"object","documentation":"Specify customer's default information for different payment methods. Pre-filling as much information\nas possible streamlines the checkout process.\n","expanded":true,"subspec":[{"name":"ideal","validation":"object","subspec":[{"name":"bank","documentation":"A pre-filled iDEAL bank value for the Payment Element. Can only be one of the banks listed in the [iDEAL guide](/payments/ideal/accept-a-payment?ui=element#bank-reference) (e.g., `abn_amro`).\n","validation":"string"}]}]},{"name":"card","validation":"object","documentation":"Specify default settings for card payments.\n","expanded":true,"subspec":[{"name":"network","validation":"array","documentation":"Specifies a network preference for [Card Brand Choice](/card-brand-choice). The first network in the array that matches a network on the entered co-branded card will be selected by default in the Card Brand Choice dropdown. See the [supported networks](/api/payment_methods/create#create_payment_method-card-networks-preferred) for valid values.\n"}]}]},{"name":"business","documentation":"Provide information about your business that will be displayed in the Payment Element.\nThis information will be retrieved from your Stripe account if not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name will be used to render mandate text for some payment methods.\n"}],"expanded":true},{"name":"paymentMethodOrder","documentation":"By default, the Payment Element will use a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.\n\nIf the associated PaymentIntent has payment method types not specified in `paymentMethodOrder`, they will be displayed\nafter the payment methods you specify. If you specify payment method types not on the associated PaymentIntent, they will be ignored.\n","validation":"array"},{"name":"fields","documentation":"By default, the Payment Element will collect all necessary details to complete a payment.\n\nFor some payment methods, this means that the Payment Element will collect details like name or email\nthat you may have already collected from the user. If this is the case, you can prevent the Payment Element\nfrom collecting these data by using the `fields` option.\n\nIf you disable the collection of a certain field\nwith the `fields` option, you must pass that same data to [stripe.confirmPayment](/js/payment_intents/confirm_payment)\nor the payment will be rejected.\n\nSee [below](/js/elements_object/create_payment_element#payment_element_create-customized_fields) for details.\n","validation":"object","subspec":[{"name":"billingDetails","validation":"'never' | 'auto' | object","documentation":"Specify `never` to avoid collecting all [billing details](/api/payment_methods/object#payment_method_object-billing_details)\nin the Payment Element. If you would like to disable only certain billing details,\npass an object specifying which fields you would like to disable collection for.\nThe default setting for each field or object is `auto`.\n","expanded":true,"subspec":[{"name":"name","validation":"'never' | 'auto'"},{"name":"email","validation":"'never' | 'auto'"},{"name":"phone","validation":"'never' | 'auto'"},{"name":"address","validation":"'never' | 'auto' | object","subspec":[{"name":"line1","validation":"'never' | 'auto'"},{"name":"line2","validation":"'never' | 'auto'"},{"name":"city","validation":"'never' | 'auto'"},{"name":"state","validation":"'never' | 'auto'"},{"name":"country","validation":"'never' | 'auto'"},{"name":"postalCode","validation":"'never' | 'auto'"}]}]}]},{"name":"readOnly","documentation":"Applies a read-only state to the Payment Element so that payment details can’t be changed. Default is false.\n\nEnabling the `readOnly` option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the [Appearance API](/elements/appearance-api).\n","validation":"boolean"},{"name":"terms","documentation":"Control how mandates or other legal agreements are displayed in the Payment Element.\nUse `never` to never display legal agreements. The default setting is `auto`, which causes\nlegal agreements to only be shown when necessary.\n","validation":"object","subspec":[{"name":"applePay","validation":"'auto' | 'always' | 'never'"},{"name":"auBecsDebit","validation":"'auto' | 'always' | 'never'"},{"name":"bancontact","validation":"'auto' | 'always' | 'never'"},{"name":"card","validation":"'auto' | 'always' | 'never'"},{"name":"cashapp","validation":"'auto' | 'always' | 'never'"},{"name":"googlePay","validation":"'auto' | 'always' | 'never'"},{"name":"ideal","validation":"'auto' | 'always' | 'never'"},{"name":"paypal","validation":"'auto' | 'always' | 'never'"},{"name":"sepaDebit","validation":"'auto' | 'always' | 'never'"},{"name":"sofort","validation":"'auto' | 'always' | 'never'"},{"name":"usBankAccount","validation":"'auto' | 'always' | 'never'"}]},{"name":"wallets","documentation":"By default, the Payment Element will display all the payment\nmethods that the underlying Payment Intent was created with.\n\nHowever, wallets like Apple Pay and Google Pay are not payment\nmethods per the Payment Intent API. They will show when the\nPayment Intent has the `card` payment method and the customer is\nusing a supported platform and have an active card in their\naccount.  This is the `auto` behavior, and it is the default for\nchoice for all wallets.\n\nIf you do not want to show a given wallet as a payment option, you\ncan set its property in `wallets` to `never`.\n","validation":"object","subspec":[{"name":"applePay","validation":"'auto' | 'never'"},{"name":"googlePay","validation":"'auto' | 'never'"}]},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.,\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"\"If set, you must also supply a freeCancellationDate.,\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]}],"required":false}]},"request":{"title":"Create a Payment Element","snippets":{"js":"var paymentElement = elements.create('payment');\n","es_next":"const paymentElement = elements.create('payment');\n"}},"use_cases":[{"name":"customized_fields","title":"with customized fields","description":"","table_content":{"title":"Option parameter","items":[{"name":"fields","documentation":"Pass an object to specify payment `fields` you don't want to collect with the Payment Element.\n","validation":"object","expanded":true,"subspec":[{"name":"billingDetails","validation":"'never' | 'auto' | object","documentation":"Specify `never` to avoid collecting all [billing details](/api/payment_methods/object#payment_method_object-billing_details)\nin the Payment Element. If you would like to disable only certain billing details,\npass an object specifying which fields you would like to disable collection for.\nThe default setting for each field or object is `auto`.\n","expanded":true,"subspec":[{"name":"name","validation":"'never' | 'auto'"},{"name":"email","validation":"'never' | 'auto'"},{"name":"phone","validation":"'never' | 'auto'"},{"name":"address","validation":"'never' | 'auto' | object","subspec":[{"name":"line1","validation":"'never' | 'auto'"},{"name":"line2","validation":"'never' | 'auto'"},{"name":"city","validation":"'never' | 'auto'"},{"name":"state","validation":"'never' | 'auto'"},{"name":"country","validation":"'never' | 'auto'"},{"name":"postalCode","validation":"'never' | 'auto'"}]}]}]}]},"request":{"title":"Create a Payment Element with customized fields","snippets":{"js":"// Customize which fields are collected by the Payment Element\nvar paymentElement = elements.create('payment', {\n  fields: {\n    billingDetails: {\n      name: 'never',\n      email: 'never',\n    }\n  }\n});\n\n// If you disable collecting fields in the Payment Element, you\n// must pass equivalent data when calling `stripe.confirmPayment`.\nform.addEventListener('submit', async (event) =\u003E {\n  stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      return_url: 'https://example.com',\n      payment_method_data: {\n        billing_details: {\n          name: 'Jenny Rosen',\n          email: 'jenny.rosen@example.com',\n        }\n      },\n    },\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n});\n","es_next":"// Customize which fields are collected by the Payment Element\nconst paymentElement = elements.create('payment', {\n  fields: {\n    billingDetails: {\n      name: 'never',\n      email: 'never',\n    }\n  }\n});\n\n// If you disable collecting fields in the Payment Element, you\n// must pass equivalent data when calling `stripe.confirmPayment`.\nconst handleSubmit = async () =\u003E {\n  const {error} = await stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      return_url: 'https://example.com/return',\n      payment_method_data: {\n        billing_details: {\n          name: 'Jenny Rosen',\n          email: 'jenny.rosen@example.com',\n        }\n      },\n    },\n  });\n     // Other actions ...\n};\n"}}}],"section_tag":"payment_element_create"},"display_on_load":true},"payment_element_get":{"title":"Get a Payment Element","group_title":"The Element","group_anchor":"element","anchor":"payment_element_get","section_anchor":"payment_element","subsection_anchors":null,"path":"/elements_object/get_payment_element","gate":false,"data":{"section_type":"method","title":"Get a Payment Element","description":"This method retrieves a previously created Payment Element.\n","signature":{"object_name":"elements","method_name":"getElement","args":[{"name":"type","documentation":"The type of Element being retrieved, which is `payment` in this case.\n","validation":"'payment'","render_as_value":"'payment'","required":true}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being retrieved, which is `payment` in this case.\n","validation":"'payment'","render_as_value":"'payment'","required":true}]},"request":{"title":"Get a Payment Element","snippets":{"js":"var paymentElement = elements.getElement('payment');\n","es_next":"const paymentElement = elements.getElement('payment');\n"}},"returns":"`elements.getElement('payment')` returns one of the following:\n\n* An instance of a Payment Element.\n* `null`, when no Payment Element has been created.\n","section_tag":"payment_element_get"},"display_on_load":true},"payment_element_update":{"title":"Update a Payment Element","group_title":"The Element","group_anchor":"element","anchor":"payment_element_update","section_anchor":"payment_element","subsection_anchors":null,"path":"/elements_object/update_payment_element","gate":false,"data":{"section_type":"method","title":"Update a Payment Element","description":"Updates the options the [Payment Element](/js/element/payment_element)\nwas initialized with. Updates are merged into the existing configuration.\n\n**NOTE**: Don't use `element.update()` to fetch updates from a [PaymentIntent](/api/payment_intents) or [SetupIntent](/api/setup_intents).\nUse [elements.fetchUpdates()](/js/elements_object/fetch_updates) instead.\n","signature":{"object_name":"element","method_name":"update","args":[{"name":"options","documentation":"The [same options as `element.create`](/js/elements_object/create_payment_element).\n","validation":"object","required":true}]},"table_content":{"items":[{"name":"options","documentation":"Options for updating the Payment Element.\n","validation":"object","expanded":true,"subspec":[{"name":"defaultValues","validation":"object","documentation":"Provide initial customer information that will be displayed in the Payment Element.\nThe form will render with empty fields if not provided.\n","expanded":false,"subspec":[{"name":"billingDetails","validation":"object","documentation":"Specify customer's billing details, which lets you pre-fill a customer’s name, email,\nphone number and address if required by payment method. Pre-filling as much information\nas possible streamlines the checkout process.\n","expanded":true,"subspec":[{"name":"name","validation":"string"},{"name":"email","validation":"string"},{"name":"phone","validation":"string"},{"name":"address","validation":"object","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"country","validation":"string"},{"name":"postal_code","validation":"string"}]}]},{"name":"paymentMethods","validation":"object","documentation":"Specify customer's default information for different payment methods. Pre-filling as much information\nas possible streamlines the checkout process.\n","expanded":true,"subspec":[{"name":"ideal","validation":"object","subspec":[{"name":"bank","documentation":"A pre-filled iDEAL bank value for the Payment Element. Can only be one of the banks listed in the [iDEAL guide](/payments/ideal/accept-a-payment?ui=element#bank-reference) (e.g., `abn_amro`).\n","validation":"string"}]}]},{"name":"card","validation":"object","documentation":"Specify default settings for card payments.\n","expanded":true,"subspec":[{"name":"network","validation":"array","documentation":"Specifies a network preference for [Card Brand Choice](/card-brand-choice). The first network in the array that matches a network on the entered co-branded card will be selected by default in the Card Brand Choice dropdown. See the [supported networks](/api/payment_methods/create#create_payment_method-card-networks-preferred) for valid values.\n"}]}]},{"name":"business","documentation":"Provide information about your business that will be displayed in the Payment Element.\nThis information will be retrieved from your Stripe account if not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name will be used to render mandate text for some payment methods.\n"}],"expanded":true},{"name":"paymentMethodOrder","documentation":"By default, the Payment Element will use a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.\n\nIf the associated PaymentIntent has payment method types not specified in `paymentMethodOrder`, they will be displayed\nafter the payment methods you specify. If you specify payment method types not on the associated PaymentIntent, they will be ignored.\n","validation":"array"},{"name":"fields","documentation":"By default, the Payment Element will collect all necessary details to complete a payment.\n\nFor some payment methods, this means that the Payment Element will collect details like name or email\nthat you may have already collected from the user. If this is the case, you can prevent the Payment Element\nfrom collecting these data by using the `fields` option.\n\nIf you disable the collection of a certain field\nwith the `fields` option, you must pass that same data to [stripe.confirmPayment](/js/payment_intents/confirm_payment)\nor the payment will be rejected.\n\nSee [below](/js/elements_object/create_payment_element#payment_element_create-customized_fields) for details.\n","validation":"object","subspec":[{"name":"billingDetails","validation":"'never' | 'auto' | object","documentation":"Specify `never` to avoid collecting all [billing details](/api/payment_methods/object#payment_method_object-billing_details)\nin the Payment Element. If you would like to disable only certain billing details,\npass an object specifying which fields you would like to disable collection for.\nThe default setting for each field or object is `auto`.\n","expanded":true,"subspec":[{"name":"name","validation":"'never' | 'auto'"},{"name":"email","validation":"'never' | 'auto'"},{"name":"phone","validation":"'never' | 'auto'"},{"name":"address","validation":"'never' | 'auto' | object","subspec":[{"name":"line1","validation":"'never' | 'auto'"},{"name":"line2","validation":"'never' | 'auto'"},{"name":"city","validation":"'never' | 'auto'"},{"name":"state","validation":"'never' | 'auto'"},{"name":"country","validation":"'never' | 'auto'"},{"name":"postalCode","validation":"'never' | 'auto'"}]}]}]},{"name":"readOnly","documentation":"Applies a read-only state to the Payment Element so that payment details can’t be changed. Default is false.\n\nEnabling the `readOnly` option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the [Appearance API](/elements/appearance-api).\n","validation":"boolean"},{"name":"terms","documentation":"Control how mandates or other legal agreements are displayed in the Payment Element.\nUse `never` to never display legal agreements. The default setting is `auto`, which causes\nlegal agreements to only be shown when necessary.\n","validation":"object","subspec":[{"name":"applePay","validation":"'auto' | 'always' | 'never'"},{"name":"auBecsDebit","validation":"'auto' | 'always' | 'never'"},{"name":"bancontact","validation":"'auto' | 'always' | 'never'"},{"name":"card","validation":"'auto' | 'always' | 'never'"},{"name":"cashapp","validation":"'auto' | 'always' | 'never'"},{"name":"googlePay","validation":"'auto' | 'always' | 'never'"},{"name":"ideal","validation":"'auto' | 'always' | 'never'"},{"name":"paypal","validation":"'auto' | 'always' | 'never'"},{"name":"sepaDebit","validation":"'auto' | 'always' | 'never'"},{"name":"sofort","validation":"'auto' | 'always' | 'never'"},{"name":"usBankAccount","validation":"'auto' | 'always' | 'never'"}]},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]}]}]},"request":{"title":"Update a Payment Element","snippets":{"js":"// Update a Payment Element after creation\nvar paymentElement = elements.getElement('payment');\npaymentElement.update({business: {name: 'Stripe Shop'}});\n","es_next":"// Update a Payment Element after creation\nconst paymentElement = elements.getElement('payment');\npaymentElement.update({business: {name: 'Stripe Shop'}});\n"}},"section_tag":"payment_element_update"},"display_on_load":true},"payment_element_collapse":{"title":"Collapse a Payment Element","group_title":"The Element","group_anchor":"element","anchor":"payment_element_collapse","section_anchor":"payment_element","subsection_anchors":null,"path":"/elements_object/collapse_payment_element","gate":false,"data":{"section_type":"method","title":"Collapse a Payment Element","description":"This method collapses the Payment Element into a row of payment method tabs.\n","signature":{"object_name":"element","method_name":"collapse"},"request":{"title":"Collapse a Payment Element","snippets":{"js":"// Collapse a Payment Element\nvar paymentElement = elements.getElement('payment');\npaymentElement.collapse();\n","es_next":"// Collapse a Payment Element\nconst paymentElement = elements.getElement('payment');\npaymentElement.collapse();\n"}},"section_tag":"payment_element_collapse"},"display_on_load":true},"express_checkout_element":{"title":"Express Checkout Element","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element","section_anchor":"express_checkout_element","subsection_anchors":["express_checkout_element_create","express_checkout_element_get","express_checkout_element_update","express_checkout_element_on_click","express_checkout_element_on_confirm","express_checkout_element_on_cancel","express_checkout_element_on_shipping_address_change","express_checkout_element_on_shipping_rate_change"],"path":"/element/express_checkout_element","gate":false,"data":{"section_type":"generic","title":"The Express Checkout Element","description":"The Express Checkout Element is\nan embeddable component for accepting payments through one-click payment buttons.\n","section_tag":"express_checkout_element"},"display_on_load":true},"express_checkout_element_create":{"title":"Create an Express Checkout Element","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_create","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/create_express_checkout_element","gate":false,"data":{"section_type":"method","title":"Create the Express Checkout Element","description":"This method creates an instance of the Express Checkout Element.\n","signature":{"object_name":"elements","method_name":"create","args":[{"name":"type","documentation":"The type of Element being created, which is `expressCheckout` in this case.\n","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true},{"name":"options","documentation":"Options for creating the Express Checkout Element.\n","validation":"object","expanded":true,"subspec":[{"name":"buttonHeight","documentation":"By default, the height of the buttons are 44px.\n\nYou can override this to specify a custom button height in the range of 40px-55px.\n","validation":"number"},{"name":"buttonTheme","validation":"object","documentation":"Specify the preferred button theme to use. By default, Elements determines the themes based on the specified [appearance option](/js/elements_object/create#stripe_elements-options-appearance).\n","subspec":[{"name":"applePay","validation":"'black' | 'white' | 'white-outline'"},{"name":"googlePay","validation":"'black' | 'white'"},{"name":"paypal","validation":"'gold' | 'blue' | 'silver' | 'white' | 'black'"}]},{"name":"buttonType","validation":"object","documentation":"Specify the preferred button type to display.\n","subspec":[{"name":"applePay","validation":"'add-money' | 'book' | 'buy' | 'check-out' | 'contribute' | 'donate' | 'order' | 'plain' | 'reload' | 'rent' | 'subscribe' | 'support' | 'tip' | 'top-up'","documentation":"Default is `plain`.\n"},{"name":"googlePay","validation":"'book' | 'buy' | 'checkout' | 'donate' | 'order' | 'pay' | 'plain' | 'subscribe'","documentation":"Default is `buy`.\n"},{"name":"paypal","validation":"'paypal' | 'checkout' | 'buynow' | 'pay'","documentation":"Default is `paypal`.\n"}]},{"name":"layout","validation":"object","documentation":"Specify how the buttons are arranged in a grid-like layout in the Express Checkout Element.\nElements determines the layout by using certain factors, such as available space, number of buttons, and the defined `layout` object.\n","expanded":false,"subspec":[{"name":"maxColumns","validation":"number","documentation":"Defines the maximum number of columns the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"maxRows","validation":"number","documentation":"Defines the maximum number of rows the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"overflow","validation":"'auto' | 'never'","documentation":"Specify whether or not to always hide the overflow menu or allow Elements to determine when to show the overflow menu. Default is `auto`.\nYou can't specify both `overflow: 'never'` and set `maxRows` to a number greater than 0.\n"}]},{"name":"paymentMethods","documentation":"By default, the Express Checkout Element displays all payment\nmethods possible as a result of your Dashboard configuration. This is the `auto` behavior.\n\nIf you don't want to show a given payment method as a payment option, set its\nproperty in `paymentMethods` to `never`.\n","validation":"object","subspec":[{"name":"amazonPay","validation":"'auto' | 'never'"},{"name":"applePay","documentation":"Apple Pay has additional configurations\nthat determine when Stripe can show it. By default, Apple Pay shows when the customer\nis using a supported platform and when we determine it's advantageous for your conversion.\nThis is the `auto` behavior.\n\nIf you want to always show Apple Pay when the customer is using a supported platform,\nyou can set its property in `paymentMethods` to `always`.\n","validation":"'always' | 'auto' | 'never'"},{"name":"googlePay","documentation":"Google Pay has additional configurations\nthat determine when Stripe can show it. By default, Google Pay shows when the customer\nis using a supported platform and when we determine it's advantageous for your conversion.\nThis is the `auto` behavior.\n\nIf you want to always show Google Pay when the customer is using a supported platform,\nyou can set its property in `paymentMethods` to `always`.\n","validation":"'always' | 'auto' | 'never'"},{"name":"link","validation":"'auto' | 'never'"},{"name":"paypal","validation":"'auto' | 'never'"}]},{"name":"paymentMethodOrder","documentation":"By default, the Express Checkout Element uses a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods display in the Express Checkout Element with a list of payment method types.\n\nIf there are payment methods that will show that are not specified in `paymentMethodOrder`, they display after the payment methods you specify. If you specify payment methods that will not show, they are ignored.\n","validation":"array"}]}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created, which is `expressCheckout` in this case.\n","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true},{"name":"options","documentation":"Options for creating the Express Checkout Element.\n","validation":"object","expanded":true,"subspec":[{"name":"buttonHeight","documentation":"By default, the height of the buttons are 44px.\n\nYou can override this to specify a custom button height in the range of 40px-55px.\n","validation":"number"},{"name":"buttonTheme","validation":"object","documentation":"Specify the preferred button theme to use. By default, Elements determines the themes based on the specified [appearance option](/js/elements_object/create#stripe_elements-options-appearance).\n","subspec":[{"name":"applePay","validation":"'black' | 'white' | 'white-outline'"},{"name":"googlePay","validation":"'black' | 'white'"},{"name":"paypal","validation":"'gold' | 'blue' | 'silver' | 'white' | 'black'"}]},{"name":"buttonType","validation":"object","documentation":"Specify the preferred button type to display.\n","subspec":[{"name":"applePay","validation":"'add-money' | 'book' | 'buy' | 'check-out' | 'contribute' | 'donate' | 'order' | 'plain' | 'reload' | 'rent' | 'subscribe' | 'support' | 'tip' | 'top-up'","documentation":"Default is `plain`.\n"},{"name":"googlePay","validation":"'book' | 'buy' | 'checkout' | 'donate' | 'order' | 'pay' | 'plain' | 'subscribe'","documentation":"Default is `buy`.\n"},{"name":"paypal","validation":"'paypal' | 'checkout' | 'buynow' | 'pay'","documentation":"Default is `paypal`.\n"}]},{"name":"layout","validation":"object","documentation":"Specify how the buttons are arranged in a grid-like layout in the Express Checkout Element.\nElements determines the layout by using certain factors, such as available space, number of buttons, and the defined `layout` object.\n","expanded":false,"subspec":[{"name":"maxColumns","validation":"number","documentation":"Defines the maximum number of columns the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"maxRows","validation":"number","documentation":"Defines the maximum number of rows the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"overflow","validation":"'auto' | 'never'","documentation":"Specify whether or not to always hide the overflow menu or allow Elements to determine when to show the overflow menu. Default is `auto`.\nYou can't specify both `overflow: 'never'` and set `maxRows` to a number greater than 0.\n"}]},{"name":"paymentMethods","documentation":"By default, the Express Checkout Element displays all payment\nmethods possible as a result of your Dashboard configuration. This is the `auto` behavior.\n\nIf you don't want to show a given payment method as a payment option, set its\nproperty in `paymentMethods` to `never`.\n","validation":"object","subspec":[{"name":"amazonPay","validation":"'auto' | 'never'"},{"name":"applePay","documentation":"Apple Pay has additional configurations\nthat determine when Stripe can show it. By default, Apple Pay shows when the customer\nis using a supported platform and when we determine it's advantageous for your conversion.\nThis is the `auto` behavior.\n\nIf you want to always show Apple Pay when the customer is using a supported platform,\nyou can set its property in `paymentMethods` to `always`.\n","validation":"'always' | 'auto' | 'never'"},{"name":"googlePay","documentation":"Google Pay has additional configurations\nthat determine when Stripe can show it. By default, Google Pay shows when the customer\nis using a supported platform and when we determine it's advantageous for your conversion.\nThis is the `auto` behavior.\n\nIf you want to always show Google Pay when the customer is using a supported platform,\nyou can set its property in `paymentMethods` to `always`.\n","validation":"'always' | 'auto' | 'never'"},{"name":"link","validation":"'auto' | 'never'"},{"name":"paypal","validation":"'auto' | 'never'"}]},{"name":"paymentMethodOrder","documentation":"By default, the Express Checkout Element uses a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods display in the Express Checkout Element with a list of payment method types.\n\nIf there are payment methods that will show that are not specified in `paymentMethodOrder`, they display after the payment methods you specify. If you specify payment methods that will not show, they are ignored.\n","validation":"array"}]}]},"request":{"title":"Create an Express Checkout Element","snippets":{"js":"var expressCheckoutElement = elements.create('expressCheckout');\n","es_next":"const expressCheckoutElement = elements.create('expressCheckout');\n"}},"section_tag":"express_checkout_element_create"},"display_on_load":true},"express_checkout_element_get":{"title":"Get an Express Checkout Element","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_get","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/get_express_checkout_element","gate":false,"data":{"section_type":"method","title":"Get an Express Checkout Element","description":"This method retrieves a previously created Express Checkout Element.\n","signature":{"object_name":"elements","method_name":"getElement","args":[{"name":"type","documentation":"The type of Element being retrieved, which is `expressCheckout` in this case.\n","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being retrieved, which is `expressCheckout` in this case.\n","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true}]},"request":{"title":"Get an Express Checkout Element","snippets":{"js":"var expressCheckoutElement = elements.getElement('expressCheckout');\n","es_next":"const expressCheckoutElement = elements.getElement('expressCheckout');\n"}},"returns":"`elements.getElement('expressCheckout')` returns one of the following:\n\n* An instance of an Express Checkout Element.\n* `null`, when no Express Checkout Element has been created.\n","section_tag":"express_checkout_element_get"},"display_on_load":true},"express_checkout_element_update":{"title":"Update an Express Checkout Element","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_update","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/update_express_checkout_element","gate":false,"data":{"section_type":"method","title":"Update an Express Checkout Element","description":"Updates the options the [Express Checkout Element](/js/element/express_checkout_element)\nwas initialized with. Updates merge into the existing configuration.\n","signature":{"object_name":"element","method_name":"update","args":[{"name":"options","documentation":"The same as the [`applePay`, `buttonHeight`, `layout`, and `paymentMethodOrder` options in `element.create`](/js/elements_object/create_express_checkout_element).\n","validation":"object","required":true}]},"table_content":{"items":[{"name":"options","documentation":"Options for updating the Express Checkout Element.\n","validation":"object","expanded":true,"subspec":[{"name":"layout","validation":"object","documentation":"Specify how the buttons are arranged in a grid-like layout in the Express Checkout Element.\nElements determines the layout by using certain factors, such as available space, number of buttons, and the defined `layout` object.\n","expanded":false,"subspec":[{"name":"maxColumns","validation":"number","documentation":"Defines the maximum number of columns the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"maxRows","validation":"number","documentation":"Defines the maximum number of rows the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"overflow","validation":"'auto' | 'never'","documentation":"Specify whether or not to always hide the overflow menu or allow Elements to determine when to show the overflow menu. Default is `auto`.\nYou can't specify both `overflow: 'never'` and set `maxRows` to a number greater than 0.\n"}]},{"name":"paymentMethodOrder","documentation":"By default, the Express Checkout Element uses a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods display in the Express Checkout Element with a list of payment method types.\n\nIf there are payment methods that will show that are not specified in `paymentMethodOrder`, they display after the payment methods you specify. If you specify payment methods that will not show, they are ignored.\n","validation":"array"}]}]},"request":{"title":"Update an Express Checkout Element","snippets":{"js":"var expressCheckoutElement = elements.getElement('expressCheckout');\n\nexpressCheckoutElement.update({\n  layout: 'horizontal',\n});\n","es_next":"const expressCheckoutElement = elements.getElement('expressCheckout');\n\nexpressCheckoutElement.update({\n  layout: 'horizontal',\n});\n"}},"section_tag":"express_checkout_element_update"},"display_on_load":true},"express_checkout_element_on_click":{"title":"Click event","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_on_click","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/express_checkout_element_click_event","gate":false,"data":{"section_type":"method","title":"Click event","signature":{"object_name":"expressCheckoutElement","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `click`.\n","validation":"'click'","required":true,"render_as_value":"'click'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** you provide that's called after the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"expressPaymentType","validation":"'apple_pay' | 'google_pay' | 'amazon_pay' | 'paypal' | 'link'","required":true,"documentation":"The payment method the customer checks out with.\n"},{"name":"resolve","validation":"function","documentation":"A function `resolve(payload) =\u003E void` that's called to show the payment interface. You must call this function within 1 second if you handle the `click` event.\n","required":true,"subspec_title":"resolve parameters","subspec":[{"name":"allowedShippingCountries","validation":"array","documentation":"By default, the Express Checkout Element allows all countries for shipping.\n\nYou can specify which countries are allowed for shipping in the Express Checkout Element with a list of two-letter country codes.\n"},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]},{"name":"billingAddressRequired","validation":"boolean","documentation":"By default, the Express Checkout Element collects the billing address. You can disable this by setting `billingAddressRequired` to `false`.\n\nWe highly recommend that you collect the billing address because it can be used to perform address verifications and block fraudulent payments.\n"},{"name":"business","documentation":"Provide information about your business that's displayed in the Express Checkout Element.\nThis information will be retrieved from your Stripe account if it's not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name is used to signal to the customer who they're paying.\n"}],"expanded":true},{"name":"emailRequired","validation":"boolean","documentation":"Collect the customer's email by setting this option to `true`.\n"},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"phoneNumberRequired","validation":"boolean","documentation":"Collect the customer's phone number by setting this option to `true`.\n\nPayPal doesn't provide a phone number, even when this option is set to `true`.\n"},{"name":"shippingAddressRequired","validation":"boolean","documentation":"Collect the customer's shipping address by setting this option to `true`.\n\nIf `true`, you must also supply a valid `shippingRates` option.\n"},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]}]},"description":"The `click` event is triggered from an Express Checkout Element when the customer\nclicks a payment button. Use this event to configure the payment interface.\n","table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `click`.\n","validation":"'click'","required":true,"render_as_value":"'click'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** you provide that's called after the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"expressPaymentType","validation":"'apple_pay' | 'google_pay' | 'amazon_pay' | 'paypal' | 'link'","required":true,"documentation":"The payment method the customer checks out with.\n"},{"name":"resolve","validation":"function","documentation":"A function `resolve(payload) =\u003E void` that's called to show the payment interface. You must call this function within 1 second if you handle the `click` event.\n","required":true,"subspec_title":"resolve parameters","subspec":[{"name":"allowedShippingCountries","validation":"array","documentation":"By default, the Express Checkout Element allows all countries for shipping.\n\nYou can specify which countries are allowed for shipping in the Express Checkout Element with a list of two-letter country codes.\n"},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]},{"name":"billingAddressRequired","validation":"boolean","documentation":"By default, the Express Checkout Element collects the billing address. You can disable this by setting `billingAddressRequired` to `false`.\n\nWe highly recommend that you collect the billing address because it can be used to perform address verifications and block fraudulent payments.\n"},{"name":"business","documentation":"Provide information about your business that's displayed in the Express Checkout Element.\nThis information will be retrieved from your Stripe account if it's not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name is used to signal to the customer who they're paying.\n"}],"expanded":true},{"name":"emailRequired","validation":"boolean","documentation":"Collect the customer's email by setting this option to `true`.\n"},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"phoneNumberRequired","validation":"boolean","documentation":"Collect the customer's phone number by setting this option to `true`.\n\nPayPal doesn't provide a phone number, even when this option is set to `true`.\n"},{"name":"shippingAddressRequired","validation":"boolean","documentation":"Collect the customer's shipping address by setting this option to `true`.\n\nIf `true`, you must also supply a valid `shippingRates` option.\n"},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]}]},"request":{"title":"Handle an express checkout element click event","snippets":{"js":"expressCheckoutElement.on('click', function(event) {\n  // Handle click event\n});\n","es_next":"expressCheckoutElement.on('click', (event) =\u003E {\n  // Handle click event\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  elementType: 'expressCheckout',\n  expressPaymentType: 'apple_pay',\n  resolve: function(status) {\n    // Call this function to show the payment interface.\n    // Note that you must call this within 1 second.\n  },\n  ...,\n}\n"}},"section_tag":"express_checkout_element_on_click"},"display_on_load":true},"express_checkout_element_on_confirm":{"title":"Confirm event","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_on_confirm","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/express_checkout_element_confirm_event","gate":false,"data":{"section_type":"method","title":"Confirm event","description":"The `confirm` event is triggered from an Express Checkout Element when the customer\nfinalizes their payment. Use this event to trigger payment confirmation.\n","signature":{"object_name":"expressCheckoutElement","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `confirm`.\n","validation":"string","required":true,"render_as_value":"'confirm'"},{"name":"handler","documentation":"A callback function `handler(event) =\u003E void` you provide that's\ncalled after the event is fired. When called, it passes an event object\nwith the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event fires from, which is `expressCheckout` in this case.\n"},{"name":"expressPaymentType","validation":"'apple_pay' | 'google_pay' | 'amazon_pay' | 'paypal' | 'link'","required":true,"documentation":"The payment method the customer checks out with.\n"},{"name":"paymentFailed","validation":"function","required":true,"documentation":"A function `paymentFailed(payload) =\u003E void` that's called if you're unable\nto process the customer's payment.\n","subspec_title":"paymentFailed parameters","subspec":[{"name":"reason","validation":"'fail' | 'invalid_shipping_address'","documentation":"Default is `'fail'`. The payment interface might surface the reason\nto provide a hint to the customer on why their payment failed.\n"}]},{"name":"billingDetails","validation":"object","documentation":"Object containing information about the customer's billing details.\n","subspec":[{"name":"name","validation":"string","documentation":"The name of the customer.\n"},{"name":"email","validation":"string","documentation":"The email address of the customer.\n"},{"name":"phone","validation":"string","documentation":"The phone number of the customer.\n"},{"name":"address","validation":"string","documentation":"The billing address of the customer.\n\n**Note:** When using PayPal, the full billing address of the customer is not always exposed.\nTypically, only the country code is passed back from PayPal.\nTo access the full billing address, you would need to request it from PayPal directly.\n","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","validation":"string"}]}]},{"name":"shippingAddress","validation":"object","documentation":"Object containing information about the customer's shipping address.\n","subspec":[{"name":"name","validation":"string","documentation":"The name of the recipient.\n"},{"name":"address","validation":"string","documentation":"The shipping address of the customer.\n","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","validation":"string"}]}]},{"name":"shippingRate","validation":"object","documentation":"Object containing information about the selected shipping rate.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `confirm`.\n","validation":"string","required":true,"render_as_value":"'confirm'"},{"name":"handler","documentation":"A callback function `handler(event) =\u003E void` you provide that's\ncalled after the event is fired. When called, it passes an event object\nwith the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event fires from, which is `expressCheckout` in this case.\n"},{"name":"expressPaymentType","validation":"'apple_pay' | 'google_pay' | 'amazon_pay' | 'paypal' | 'link'","required":true,"documentation":"The payment method the customer checks out with.\n"},{"name":"paymentFailed","validation":"function","required":true,"documentation":"A function `paymentFailed(payload) =\u003E void` that's called if you're unable\nto process the customer's payment.\n","subspec_title":"paymentFailed parameters","subspec":[{"name":"reason","validation":"'fail' | 'invalid_shipping_address'","documentation":"Default is `'fail'`. The payment interface might surface the reason\nto provide a hint to the customer on why their payment failed.\n"}]},{"name":"billingDetails","validation":"object","documentation":"Object containing information about the customer's billing details.\n","subspec":[{"name":"name","validation":"string","documentation":"The name of the customer.\n"},{"name":"email","validation":"string","documentation":"The email address of the customer.\n"},{"name":"phone","validation":"string","documentation":"The phone number of the customer.\n"},{"name":"address","validation":"string","documentation":"The billing address of the customer.\n\n**Note:** When using PayPal, the full billing address of the customer is not always exposed.\nTypically, only the country code is passed back from PayPal.\nTo access the full billing address, you would need to request it from PayPal directly.\n","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","validation":"string"}]}]},{"name":"shippingAddress","validation":"object","documentation":"Object containing information about the customer's shipping address.\n","subspec":[{"name":"name","validation":"string","documentation":"The name of the recipient.\n"},{"name":"address","validation":"string","documentation":"The shipping address of the customer.\n","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","validation":"string"}]}]},{"name":"shippingRate","validation":"object","documentation":"Object containing information about the selected shipping rate.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]},"request":{"title":"Handle 'confirm' event","snippets":{"js":"expressCheckoutElement.on('confirm', function(event) {\n  // call Stripe function to initiate payment confirmation\n  stripe.confirmPayment({\n    elements,\n    clientSecret,\n    confirmParams: {\n      return_url: 'https://example.com',\n    },\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there's an error.\n    }\n  });\n});\n","es_next":"expressCheckoutElement.on('confirm', (event) =\u003E {\n  // call Stripe function to initiate payment confirmation\n  const {error} = await stripe.confirmPayment({\n    elements,\n    clientSecret,\n    confirmParams: {\n      return_url: 'https://example.com',\n    },\n  });\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  elementType: 'expressCheckout',\n  expressPaymentType: 'apple_pay',\n  paymentFailed: function(status) {\n    // You can only call this before calling `confirmPayment` to signal\n    // an error before payment confirmation.\n  },\n  ...,\n}\n"}},"section_tag":"express_checkout_element_on_confirm"},"display_on_load":true},"express_checkout_element_on_cancel":{"title":"Cancel event","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_on_cancel","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/express_checkout_element_cancel_event","gate":false,"data":{"section_type":"method","title":"Cancel event","description":"The `cancel` event is triggered from an Express Checkout Element when the payment interface is dismissed.\n\nNote that in some browsers, the payment interface might be dismissed by the customer even after they authorize the payment.\nThis means that you might receive a `cancel` event after receiving a `confirm` event.\nIf you're using the `cancel` event as a hook for canceling the customer's order, make sure you also refund the payment that you just created.\n","signature":{"object_name":"expressCheckoutElement","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `cancel`.\n","validation":"string","required":true,"render_as_value":"'cancel'"},{"name":"handler","documentation":"A callback function that you provide that's called after the event is fired.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `cancel`.\n","validation":"string","required":true,"render_as_value":"'cancel'"},{"name":"handler","documentation":"A callback function that you provide that's called after the event is fired.\n","validation":"function","required":true}]},"request":{"title":"Handle 'cancel' event","snippets":{"js":"expressCheckoutElement.on('cancel', function() {\n  // handle cancel event\n});\n","es_next":"expressCheckoutElement.on('cancel', () =\u003E {\n  // handle cancel event\n});\n"}},"section_tag":"express_checkout_element_on_cancel"},"display_on_load":true},"express_checkout_element_on_shipping_address_change":{"title":"Shipping address change event","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_on_shipping_address_change","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/express_checkout_element_shippingaddresschange_event","gate":false,"data":{"section_type":"method","title":"Shippingaddresschange event","description":"The `shippingaddresschange` event is triggered from an Express Checkout Element whenever the customer selects a new address in the payment interface.\n","signature":{"object_name":"expressCheckoutElement","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `shippingaddresschange`.\n","validation":"string","required":true,"render_as_value":"'shippingaddresschange'"},{"name":"handler","documentation":"A callback function `handler(event) =\u003E void` you provide that's\ncalled after the event is fired. After it's called, it passes an event object\nwith the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"resolve","validation":"function","required":true,"documentation":"A function `resolve(payload) =\u003E void` that's called if the recipient's shipping address is valid.\n","subspec_title":"resolve parameters","subspec":[{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]}]}]},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]},{"name":"reject","validation":"function","required":true,"documentation":"A function `reject() =\u003E void` that's called if the recipient's shipping address is invalid.\n"},{"name":"name","validation":"string","documentation":"The name of the recipient.\n"},{"name":"address","validation":"string","documentation":"The shipping address of the recipient.\n\nTo maintain privacy, browsers might anonymize the shipping address by removing sensitive information that isn't necessary to calculate shipping costs.\nDepending on the country, some fields can be missing or partially redacted.\nFor example, the shipping address in the US can only contain a city, state, and ZIP code.\nThe full shipping address appears in the [PaymentResponse](/js/appendix/payment_response) object after the purchase is confirmed in the browser’s payment interface.\n","subspec":[{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","validation":"string"}]}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `shippingaddresschange`.\n","validation":"string","required":true,"render_as_value":"'shippingaddresschange'"},{"name":"handler","documentation":"A callback function `handler(event) =\u003E void` you provide that's\ncalled after the event is fired. After it's called, it passes an event object\nwith the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"resolve","validation":"function","required":true,"documentation":"A function `resolve(payload) =\u003E void` that's called if the recipient's shipping address is valid.\n","subspec_title":"resolve parameters","subspec":[{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]}]}]},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]},{"name":"reject","validation":"function","required":true,"documentation":"A function `reject() =\u003E void` that's called if the recipient's shipping address is invalid.\n"},{"name":"name","validation":"string","documentation":"The name of the recipient.\n"},{"name":"address","validation":"string","documentation":"The shipping address of the recipient.\n\nTo maintain privacy, browsers might anonymize the shipping address by removing sensitive information that isn't necessary to calculate shipping costs.\nDepending on the country, some fields can be missing or partially redacted.\nFor example, the shipping address in the US can only contain a city, state, and ZIP code.\nThe full shipping address appears in the [PaymentResponse](/js/appendix/payment_response) object after the purchase is confirmed in the browser’s payment interface.\n","subspec":[{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","validation":"string"}]}]}]},"request":{"title":"Handle 'shippingaddresschange' event","snippets":{"js":"expressCheckoutElement.on('shippingaddresschange', function(event) {\n  var resolve = event.resolve;\n  var address = event.address;\n  // handle shippingaddresschange event\n\n  // call event.resolve within 20 seconds\n  resolve(payload);\n});\n","es_next":"expressCheckoutElement.on('shippingaddresschange', (event) =\u003E {\n  const {resolve, address} = event;\n  // handle shippingaddresschange event\n\n  // call event.resolve within 20 seconds\n  resolve(payload);\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  name: \"\",\n  address: {\n    city: \"San Francisco\",\n    state: \"CA\",\n    postal_code: \"94107\",\n    country: \"US\",\n  },\n  resolve: function(payload) {\n    // Call this function to accept the shipping address and optionally update the payment interface.\n    // Note that you must call this within 20 seconds.\n  },\n  reject: function() {\n    // Call this function to reject the selected shipping address.\n    // Note that you must call this within 20 seconds.\n  }\n}\n"}},"section_tag":"express_checkout_element_on_shipping_address_change"},"display_on_load":true},"express_checkout_element_on_shipping_rate_change":{"title":"Shipping rate change event","group_title":"The Element","group_anchor":"element","anchor":"express_checkout_element_on_shipping_rate_change","section_anchor":"express_checkout_element","subsection_anchors":null,"path":"/elements_object/express_checkout_element_shippingratechange_event","gate":false,"data":{"section_type":"method","title":"Shippingratechange event","description":"The `shippingratechange` event is triggered from an Express Checkout Element whenever the customer selects a new shipping rate in the payment interface.\n","signature":{"object_name":"expressCheckoutElement","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `shippingratechange`.\n","validation":"string","required":true,"render_as_value":"'shippingratechange'"},{"name":"handler","documentation":"A callback function `handler(event) =\u003E void` you provide that's\ncalled after the event is fired. After it's called, it passes an event object\nwith the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"resolve","validation":"function","required":true,"documentation":"A function `resolve(payload) =\u003E void` that's called if the customer's shipping rate is valid.\n","subspec_title":"resolve parameters","subspec":[{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]}]}]},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]},{"name":"reject","validation":"function","required":true,"documentation":"A function `reject() =\u003E void` that's called if the customer's shipping rate is invalid.\n"},{"name":"shippingRate","validation":"object","documentation":"The shipping rate selected by the customer.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `shippingratechange`.\n","validation":"string","required":true,"render_as_value":"'shippingratechange'"},{"name":"handler","documentation":"A callback function `handler(event) =\u003E void` you provide that's\ncalled after the event is fired. After it's called, it passes an event object\nwith the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"resolve","validation":"function","required":true,"documentation":"A function `resolve(payload) =\u003E void` that's called if the customer's shipping rate is valid.\n","subspec_title":"resolve parameters","subspec":[{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]}]}]},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]},{"name":"reject","validation":"function","required":true,"documentation":"A function `reject() =\u003E void` that's called if the customer's shipping rate is invalid.\n"},{"name":"shippingRate","validation":"object","documentation":"The shipping rate selected by the customer.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]},"request":{"title":"Handle 'shippingratechange' event","snippets":{"js":"expressCheckoutElement.on('shippingratechange', function(event) {\n  var resolve = event.resolve;\n  var shippingRate = event.shippingRate;\n  // handle shippingratechange event\n\n  // call event.resolve within 20 seconds\n  resolve(payload);\n});\n","es_next":"expressCheckoutElement.on('shippingratechange', (event) =\u003E {\n  const {resolve, shippingRate} = event;\n  // handle shippingratechange event\n\n  // call event.resolve within 20 seconds\n  resolve(payload);\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  shippingRate: {\n    id: '123',\n    amount: 0,\n    displayName: \"Free Shipping\"\n  },\n  resolve: function(payload) {\n    // Call this function to accept the shipping rate and optionally update the payment interface.\n    // Note that you must call this within 20 seconds.\n  },\n  reject: function() {\n    // Call this function to reject the selected shipping rate.\n    // Note that you must call this within 20 seconds.\n  }\n}\n"}},"section_tag":"express_checkout_element_on_shipping_rate_change"},"display_on_load":true},"link_authentication_element":{"title":"Link Authentication Element","group_title":"The Element","group_anchor":"element","anchor":"link_authentication_element","section_anchor":"link_authentication_element","subsection_anchors":["link_authentication_element_create","link_authentication_element_get"],"path":"/element/link_authentication_element","gate":false,"data":{"section_type":"generic","title":"The Link Authentication Element","description":"The [Link Authentication Element](/payments/link/accept-a-payment) is\nan embeddable component for collecting email addresses and allow users to\nlog into Link on your checkout page.\n","section_tag":"link_authentication_element"},"display_on_load":true},"link_authentication_element_create":{"title":"Create a Link Authentication Element","group_title":"The Element","group_anchor":"element","anchor":"link_authentication_element_create","section_anchor":"link_authentication_element","subsection_anchors":null,"path":"/elements_object/create_link_authentication_element","gate":false,"data":{"section_type":"method","title":"Create the Link Authentication Element","description":"This method creates an instance of the Link Authentication Element.\n","signature":{"object_name":"elements","method_name":"create","args":[{"name":"type","documentation":"The type of Element being created, which is `linkAuthentication` in this case.\n","validation":"'linkAuthentication'","render_as_value":"'linkAuthentication'","required":true},{"name":"options","documentation":"Options for creating the Link Authentication Element.\n","validation":"object","expanded":true,"subspec":[{"name":"defaultValues","validation":"object","documentation":"Provide the initial contact information that will be displayed in the Link Authentication Element.\nThe form will render with empty fields if not provided.\n","expanded":false,"subspec":[{"name":"email","validation":"string"}]}],"required":false}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created, which is `linkAuthentication` in this case.\n","validation":"'linkAuthentication'","render_as_value":"'linkAuthentication'","required":true},{"name":"options","documentation":"Options for creating the Link Authentication Element.\n","validation":"object","expanded":true,"subspec":[{"name":"defaultValues","validation":"object","documentation":"Provide the initial contact information that will be displayed in the Link Authentication Element.\nThe form will render with empty fields if not provided.\n","expanded":false,"subspec":[{"name":"email","validation":"string"}]}],"required":false}]},"request":{"title":"Create a Link Authentication Element","snippets":{"js":"var linkAuthenticationElement = elements.create('linkAuthentication');\n","es_next":"const linkAuthenticationElement = elements.create('linkAuthentication');\n"}},"section_tag":"link_authentication_element_create"},"display_on_load":true},"link_authentication_element_get":{"title":"Get a Link Authentication Element","group_title":"The Element","group_anchor":"element","anchor":"link_authentication_element_get","section_anchor":"link_authentication_element","subsection_anchors":null,"path":"/elements_object/get_link_authentication_element","gate":false,"data":{"section_type":"method","title":"Get a Link Authentication Element","description":"This method retrieves a previously created Link Authentication Element.\n","signature":{"object_name":"elements","method_name":"getElement","args":[{"name":"type","documentation":"The type of Element being retrieved, which is `linkAuthentication` in this case.\n","validation":"'linkAuthentication'","render_as_value":"'linkAuthentication'","required":true}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being retrieved, which is `linkAuthentication` in this case.\n","validation":"'linkAuthentication'","render_as_value":"'linkAuthentication'","required":true}]},"request":{"title":"Get a Link Authentication Element","snippets":{"js":"var linkAuthenticationElement = elements.getElement('linkAuthentication');\n","es_next":"const linkAuthenticationElement = elements.getElement('linkAuthentication');\n"}},"returns":"`elements.getElement('linkAuthentication')` returns one of the following:\n\n* An instance of a Link Authentication Element.\n* `null`, when no Link Authentication Element has been created.\n","section_tag":"link_authentication_element_get"},"display_on_load":true},"address_element":{"title":"Address Element","group_title":"The Element","group_anchor":"element","anchor":"address_element","section_anchor":"address_element","subsection_anchors":["address_element_create","address_element_get","address_element_update","address_element_get_value"],"path":"/element/address_element","gate":false,"data":{"section_type":"generic","title":"The Address Element","description":"The Address Element is\nan embeddable component for collecting local and international billing and shipping addresses.\n","section_tag":"address_element"},"display_on_load":true},"address_element_create":{"title":"Create an Address Element","group_title":"The Element","group_anchor":"element","anchor":"address_element_create","section_anchor":"address_element","subsection_anchors":null,"path":"/elements_object/create_address_element","gate":false,"data":{"section_type":"method","title":"Create the Address Element","description":"This method creates an instance of the Address Element.\n","signature":{"object_name":"elements","method_name":"create","args":[{"name":"type","documentation":"The type of Element being created, which is `address` in this case.\n","validation":"'address'","render_as_value":"'address'","required":true},{"name":"options","documentation":"Options for creating the Address Element.\n","validation":"object","expanded":true,"subspec":[{"name":"mode","documentation":"Specify which mode you would like to use Address Element for.\n\nWhen `shipping` mode is used with the Payment Element and Link Authentication Element, it will automatically pass shipping information when confirming Payment Intent or Setup Intent.\n\nWhen `billing` mode is used with the Payment Element, it will automatically pass the billing information when confirming Payment Intent or Setup Intent.\n","validation":"'shipping' | 'billing'","required":true},{"name":"autocomplete","validation":"object","documentation":"By default, the Address Element will have autocomplete enabled with Stripe provided Google Maps API key for certain countries if any of the following condition is met:\n* If Payment Element is mounted in the same elements group as Address Element in a single page application.\n* If the Address Element is used in an active Link session.\n\nYou can customize the autocomplete setting with this option.\n","expanded":true,"subspec":[{"name":"mode","validation":"‘automatic’ | ‘disabled’ | ‘google_maps_api’","required":true,"documentation":"Specify `disabled` to disable autocomplete in the Address Element.\n\nSpecify `google_maps_api` to enable [Google Maps API](https://developers.google.com/maps/documentation/javascript/places) with your own key. It will only be used when Stripe provided Google Maps API key is not available.\n\nThe default setting is `automatic`, where we’ll support autocomplete when possible.\n"},{"name":"apiKey","validation":"string","documentation":"Specify your own [Google Maps API key](https://developers.google.com/maps/documentation/javascript/places#add-places-api-to-the-api-keys-api-restrictions-list) with it.\n\n**Only needs to be passed in when `autocomplete.mode` is set to `google_maps_api`.**\n"}]},{"name":"allowedCountries","documentation":"By default, the Address Element will display all countries for selection.\n\nYou can specify which countries are displayed in the Address Element with a list of two-letter country codes.\nIf only one country is specified, the country field will not display.\n","validation":"array"},{"name":"blockPoBox","documentation":"By default, PO boxes are considered a valid address type.\n\nYou can override this to invalidate PO Boxes.\n","validation":"boolean"},{"name":"contacts","validation":"array","documentation":"An array of [Contact](/js/appendix/contact_object) that can be displayed as saved addresses in the Address Element. The first contact will be automatically selected.\n"},{"name":"defaultValues","validation":"object","documentation":"Provide the initial information that will be displayed in the Address Element.\nThe form will render with empty fields if not provided.\n","expanded":true,"subspec":[{"name":"name","validation":"string","documentation":"Provide the initial full name or organization name.\n"},{"name":"firstName","validation":"string","documentation":"Provide the initial first name.\nThe [display.name](/js/elements_object/create_address_element#address_element_create-options-display-name) option must be set to `split` if this property is specified.\n"},{"name":"lastName","validation":"string","documentation":"Provide the initial last name.\nThe [display.name](/js/elements_object/create_address_element#address_element_create-options-display-name) option must be set to `split` if this property is specified.\n"},{"name":"phone","validation":"string","documentation":"Provide the initial phone number value.\nThe [fields.phone](/js/elements_object/create_address_element#address_element_create-options-fields-phone) option must be set to `always` if this property is specified.\n"},{"name":"address","validation":"object","documentation":"Provide the initial address details.\n","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","required":true,"validation":"string"}]}]},{"name":"fields","validation":"object","documentation":"By default, the Address Element will collect all the necessary information needed for an address.\nIn some cases, it might be necessary to collect other types of information. You can specify other types of fields to render\nin the form with this option.\n","expanded":true,"subspec":[{"name":"phone","validation":"'always' | 'auto' | 'never'","documentation":"Specify `always` to enable phone number collection in the Address Element.\nOnly collect phone numbers if you need them for the transaction. Default is `auto`.\n"}]},{"name":"validation","validation":"object","documentation":"By default, the Address Element will enforce preset validation for each field.\nYou can customize the settings by using this option.\n","expanded":true,"subspec":[{"name":"phone","validation":"object","expanded":true,"subspec":[{"name":"required","validation":"'always' | 'auto' | 'never'","documentation":"Specify `always` to make phone number a required field.\nThe [fields.phone](/js/elements_object/create_address_element#address_element_create-options-fields-phone) option must be set to `always` if this property is specified.\nDefault is `auto`.\n"}]}]},{"name":"display","validation":"object","documentation":"You can customize how certain fields are displayed.\n","expanded":true,"subspec":[{"name":"name","validation":"'full' | 'split' | 'organization'","documentation":"By default, the Address Element will display a full name field.\nSpecify 'split' to display a first name field and a last name field.\nSpecify 'organization' to display an organization field.\n"}]}],"required":true}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created, which is `address` in this case.\n","validation":"'address'","render_as_value":"'address'","required":true},{"name":"options","documentation":"Options for creating the Address Element.\n","validation":"object","expanded":true,"subspec":[{"name":"mode","documentation":"Specify which mode you would like to use Address Element for.\n\nWhen `shipping` mode is used with the Payment Element and Link Authentication Element, it will automatically pass shipping information when confirming Payment Intent or Setup Intent.\n\nWhen `billing` mode is used with the Payment Element, it will automatically pass the billing information when confirming Payment Intent or Setup Intent.\n","validation":"'shipping' | 'billing'","required":true},{"name":"autocomplete","validation":"object","documentation":"By default, the Address Element will have autocomplete enabled with Stripe provided Google Maps API key for certain countries if any of the following condition is met:\n* If Payment Element is mounted in the same elements group as Address Element in a single page application.\n* If the Address Element is used in an active Link session.\n\nYou can customize the autocomplete setting with this option.\n","expanded":true,"subspec":[{"name":"mode","validation":"‘automatic’ | ‘disabled’ | ‘google_maps_api’","required":true,"documentation":"Specify `disabled` to disable autocomplete in the Address Element.\n\nSpecify `google_maps_api` to enable [Google Maps API](https://developers.google.com/maps/documentation/javascript/places) with your own key. It will only be used when Stripe provided Google Maps API key is not available.\n\nThe default setting is `automatic`, where we’ll support autocomplete when possible.\n"},{"name":"apiKey","validation":"string","documentation":"Specify your own [Google Maps API key](https://developers.google.com/maps/documentation/javascript/places#add-places-api-to-the-api-keys-api-restrictions-list) with it.\n\n**Only needs to be passed in when `autocomplete.mode` is set to `google_maps_api`.**\n"}]},{"name":"allowedCountries","documentation":"By default, the Address Element will display all countries for selection.\n\nYou can specify which countries are displayed in the Address Element with a list of two-letter country codes.\nIf only one country is specified, the country field will not display.\n","validation":"array"},{"name":"blockPoBox","documentation":"By default, PO boxes are considered a valid address type.\n\nYou can override this to invalidate PO Boxes.\n","validation":"boolean"},{"name":"contacts","validation":"array","documentation":"An array of [Contact](/js/appendix/contact_object) that can be displayed as saved addresses in the Address Element. The first contact will be automatically selected.\n"},{"name":"defaultValues","validation":"object","documentation":"Provide the initial information that will be displayed in the Address Element.\nThe form will render with empty fields if not provided.\n","expanded":true,"subspec":[{"name":"name","validation":"string","documentation":"Provide the initial full name or organization name.\n"},{"name":"firstName","validation":"string","documentation":"Provide the initial first name.\nThe [display.name](/js/elements_object/create_address_element#address_element_create-options-display-name) option must be set to `split` if this property is specified.\n"},{"name":"lastName","validation":"string","documentation":"Provide the initial last name.\nThe [display.name](/js/elements_object/create_address_element#address_element_create-options-display-name) option must be set to `split` if this property is specified.\n"},{"name":"phone","validation":"string","documentation":"Provide the initial phone number value.\nThe [fields.phone](/js/elements_object/create_address_element#address_element_create-options-fields-phone) option must be set to `always` if this property is specified.\n"},{"name":"address","validation":"object","documentation":"Provide the initial address details.\n","subspec":[{"name":"line1","validation":"string"},{"name":"line2","validation":"string"},{"name":"city","validation":"string"},{"name":"state","validation":"string"},{"name":"postal_code","validation":"string"},{"name":"country","required":true,"validation":"string"}]}]},{"name":"fields","validation":"object","documentation":"By default, the Address Element will collect all the necessary information needed for an address.\nIn some cases, it might be necessary to collect other types of information. You can specify other types of fields to render\nin the form with this option.\n","expanded":true,"subspec":[{"name":"phone","validation":"'always' | 'auto' | 'never'","documentation":"Specify `always` to enable phone number collection in the Address Element.\nOnly collect phone numbers if you need them for the transaction. Default is `auto`.\n"}]},{"name":"validation","validation":"object","documentation":"By default, the Address Element will enforce preset validation for each field.\nYou can customize the settings by using this option.\n","expanded":true,"subspec":[{"name":"phone","validation":"object","expanded":true,"subspec":[{"name":"required","validation":"'always' | 'auto' | 'never'","documentation":"Specify `always` to make phone number a required field.\nThe [fields.phone](/js/elements_object/create_address_element#address_element_create-options-fields-phone) option must be set to `always` if this property is specified.\nDefault is `auto`.\n"}]}]},{"name":"display","validation":"object","documentation":"You can customize how certain fields are displayed.\n","expanded":true,"subspec":[{"name":"name","validation":"'full' | 'split' | 'organization'","documentation":"By default, the Address Element will display a full name field.\nSpecify 'split' to display a first name field and a last name field.\nSpecify 'organization' to display an organization field.\n"}]}],"required":true}]},"request":{"title":"Create an Address Element","snippets":{"js":"// Create the Address Element in shipping mode\nvar addressElement = elements.create('address', {\n  mode: 'shipping',\n});\n\n// Create the Address Element in billing mode\nvar addressElement = elements.create('address', {\n  mode: 'billing',\n});\n","es_next":"// Create the Address Element in shipping mode\nconst addressElement = elements.create('address', {\n  mode: 'shipping',\n});\n\n// Create the Address Element in billing mode\nconst addressElement = elements.create('address', {\n  mode: 'billing',\n});\n"}},"section_tag":"address_element_create"},"display_on_load":true},"address_element_get":{"title":"Get an Address Element","group_title":"The Element","group_anchor":"element","anchor":"address_element_get","section_anchor":"address_element","subsection_anchors":null,"path":"/elements_object/get_address_element","gate":false,"data":{"section_type":"method","title":"Get an Address Element","description":"This method retrieves a previously created Address Element.\n","signature":{"object_name":"elements","method_name":"getElement","args":[{"name":"type","documentation":"The type of Element being retrieved, which is `address` in this case.\n","validation":"'address'","render_as_value":"'address'","required":true}]},"table_content":{"items":[{"name":"type","documentation":"The type of Element being retrieved, which is `address` in this case.\n","validation":"'address'","render_as_value":"'address'","required":true}]},"request":{"title":"Get an Address Element","snippets":{"js":"var addressElement = elements.getElement('address');\n","es_next":"const addressElement = elements.getElement('address');\n"}},"returns":"`elements.getElement('address')` returns one of the following:\n\n* An instance of an Address Element.\n* `null`, when no Address Element has been created.\n","section_tag":"address_element_get"},"display_on_load":true},"address_element_update":{"title":"Update an Address Element","group_title":"The Element","group_anchor":"element","anchor":"address_element_update","section_anchor":"address_element","subsection_anchors":null,"path":"/elements_object/update_address_element","gate":false,"data":{"section_type":"method","title":"Update an Address Element","description":"Updates the options the [Address Element](/js/element/address_element)\nwas initialized with. Updates are merged into the existing configuration.\n","signature":{"object_name":"element","method_name":"update","args":[{"name":"options","documentation":"The same as the [fields and validation options in `element.create`](/js/elements_object/create_address_element).\n","validation":"object","required":true}]},"table_content":{"items":[{"name":"options","documentation":"Options for updating the Address Element.\n","validation":"object","expanded":true,"subspec":[{"name":"fields","validation":"object","documentation":"By default, the Address Element will collect all the necessary information needed for an address.\nIn some cases, it might be necessary to collect other types of information. You can specify other types of fields to render\nin the form with this option.\n","expanded":true,"subspec":[{"name":"phone","validation":"'always' | 'auto' | 'never'","documentation":"Specify `always` to enable phone number collection in the Address Element.\nOnly collect phone numbers if you need them for the transaction. Default is `auto`.\n"}]},{"name":"validation","validation":"object","documentation":"By default, the Address Element will enforce preset validation for each field.\nYou can customize the settings by using this option.\n","expanded":true,"subspec":[{"name":"phone","validation":"object","expanded":true,"subspec":[{"name":"required","validation":"'always' | 'auto' | 'never'","documentation":"Specify `always` to make phone number a required field.\nThe [fields.phone](/js/elements_object/create_address_element#address_element_create-options-fields-phone) option must be set to `always` if this property is specified.\nDefault is `auto`.\n"}]}]}]}]},"request":{"title":"Update an Address Element","snippets":{"js":"var addressElement = elements.getElement('address');\n\naddressElement.update({\n  validation: {\n    phone: {\n      required: 'never',\n    },\n  },\n});\n","es_next":"const addressElement = elements.getElement('address');\n\naddressElement.update({\n  validation: {\n    phone: {\n      required: 'never',\n    },\n  },\n});\n"}},"section_tag":"address_element_update"},"display_on_load":true},"address_element_get_value":{"title":"Get value from an Address Element","group_title":"The Element","group_anchor":"element","anchor":"address_element_get_value","section_anchor":"address_element","subsection_anchors":null,"path":"/elements_object/get_value_address_element","gate":false,"data":{"section_type":"method","title":"Get value from an Address Element","description":"Validates and retrieves form values from an Address Element. If there are any input validation errors,\nthe errors will display by their respective fields.\n","signature":{"object_name":"element","method_name":"getValue"},"request":{"title":"Get value from an Address Element","snippets":{"js":"var addressElement = elements.getElement('address');\n\naddressElement.getValue()\n.then(function(result) {\n  if (result.complete) {\n    // Allow user to proceed to the next step\n    // Optionally, use value to store the address details\n  }\n})\n","es_next":"const addressElement = elements.getElement('address');\nconst {complete, value} = await addressElement.getValue();\nif (complete) {\n  // Allow user to proceed to the next step\n  // Optionally store the address details with value\n}\n"}},"response":{"title":"Response","snippets":{"response":"{\n  complete: false,\n  isNewAddress: true,\n  value: {\n    name: \"\",\n    firstName?: \"\",\n    lastName? \"\",\n    phone?: \"\",\n    address: {\n      line1: \"\",\n      line2: null,\n      city: \"\",\n      state: \"\",\n      country: 'US',\n      postal_code: \"\"\n    }\n  }\n}\n"}},"returns":"`addressElement.getValue()` returns a promise. This promise will return an object with the following:\n\n* `complete`, `true` if the value is well-formed and potentially complete.\n  The `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n  It is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\n  In many cases the customer could still add further input.\n* `isNewAddress`, `true` if the Address Element is currently displaying the form collection view.\n* `value`, an object containing the current address information. The `firstName` and\n  `lastName` properties only appear if the `display.name` option is set to `split`.\n  The `phone` property only appears if the `fields.phone` option is set to `always`.\n","section_tag":"address_element_get_value"},"display_on_load":true},"issuing_elements":{"title":"Issuing Elements","group_title":"The Element","group_anchor":"element","anchor":"issuing_elements","section_anchor":"issuing_elements","subsection_anchors":["issuing_elements_create"],"path":"/element/issuing","gate":false,"data":{"section_type":"generic","title":"Issuing Elements","description":"[Issuing Elements](/issuing/elements) allows you to display\nthe sensitive data of your Issuing cards in a PCI-compliant manner.\n","section_tag":"issuing_elements"},"display_on_load":true},"issuing_elements_create":{"title":"Create an Issuing Element","group_title":"The Element","group_anchor":"element","anchor":"issuing_elements_create","section_anchor":"issuing_elements","subsection_anchors":null,"path":"/issuing_elements/create","gate":false,"data":{"section_type":"method","title":"Create an Element","description":"This method creates an instance of an individual Issuing Element.\n\nIt takes the `type` of Element to create as well as an `options` object.\n","signature":{"object_name":"elements","method_name":"create","args":[{"name":"type","documentation":"The type of Element being created. One of: `issuingCardNumberDisplay`, `issuingCardCvcDisplay`,\n`issuingCardExpiryDisplay`, `issuingCardPinDisplay`, or `issuingCardCopyButton`.\n","validation":"string","required":true,"selectable":true},{"name":"options","documentation":"All Issuing Elements accept a common set of options","validation":"object","required":true}]},"types_parent":"type","types_data":{"issuingCardNumberDisplay":{"render_as_value":"'issuingCardNumberDisplay'","request":{"title":"Create a issuingCardNumberDisplay Element","snippets":{"js":"var element = elements.create('issuingCardNumberDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n","es_next":"const element = elements.create('issuingCardNumberDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created. One of: `issuingCardNumberDisplay`, `issuingCardCvcDisplay`,\n`issuingCardExpiryDisplay`, `issuingCardPinDisplay`, or `issuingCardCopyButton`.\n","validation":"string","required":true},{"name":"options","validation":"object","required":true,"documentation":"Options for creating an Issuing element.\n","subspec":[{"name":"issuingCard","documentation":"ID of the [Issuing card](/api/issuing/cards/object) to be displayed in this Element.\n","validation":"string"},{"name":"ephemeralKeySecret","documentation":"The `secret` component of the ephemeral key created\nto display this Element.\n","validation":"string"},{"name":"nonce","documentation":"The ephemeral key nonce used to create the ephemeral\nkey provided to this Element.\n","validation":"string"},{"name":"style","documentation":"Customize the appearance of this Element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object","required":false}]}]}},"issuingCardCvcDisplay":{"render_as_value":"'issuingCardCvcDisplay'","request":{"title":"Create a issuingCardCvcDisplay Element","snippets":{"js":"var element = elements.create('issuingCardCvcDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n","es_next":"const element = elements.create('issuingCardCvcDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created. One of: `issuingCardNumberDisplay`, `issuingCardCvcDisplay`,\n`issuingCardExpiryDisplay`, `issuingCardPinDisplay`, or `issuingCardCopyButton`.\n","validation":"string","required":true},{"name":"options","validation":"object","required":true,"documentation":"Options for creating an Issuing element.\n","subspec":[{"name":"issuingCard","documentation":"ID of the [Issuing card](/api/issuing/cards/object) to be displayed in this Element.\n","validation":"string"},{"name":"ephemeralKeySecret","documentation":"The `secret` component of the ephemeral key created\nto display this Element.\n","validation":"string"},{"name":"nonce","documentation":"The ephemeral key nonce used to create the ephemeral\nkey provided to this Element.\n","validation":"string"},{"name":"style","documentation":"Customize the appearance of this Element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object","required":false}]}]}},"issuingCardExpiryDisplay":{"render_as_value":"'issuingCardExpiryDisplay'","request":{"title":"Create a issuingCardExpiryDisplay Element","snippets":{"js":"var element = elements.create('issuingCardExpiryDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n","es_next":"const element = elements.create('issuingCardExpiryDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created. One of: `issuingCardNumberDisplay`, `issuingCardCvcDisplay`,\n`issuingCardExpiryDisplay`, `issuingCardPinDisplay`, or `issuingCardCopyButton`.\n","validation":"string","required":true},{"name":"options","validation":"object","required":true,"documentation":"Options for creating an Issuing element.\n","subspec":[{"name":"issuingCard","documentation":"ID of the [Issuing card](/api/issuing/cards/object) to be displayed in this Element.\n","validation":"string"},{"name":"ephemeralKeySecret","documentation":"The `secret` component of the ephemeral key created\nto display this Element.\n","validation":"string"},{"name":"nonce","documentation":"The ephemeral key nonce used to create the ephemeral\nkey provided to this Element.\n","validation":"string"},{"name":"style","documentation":"Customize the appearance of this Element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object","required":false}]}]}},"issuingCardPinDisplay":{"render_as_value":"'issuingCardPinDisplay'","request":{"title":"Create a issuingCardPinDisplay Element","snippets":{"js":"var element = elements.create('issuingCardPinDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n","es_next":"const element = elements.create('issuingCardPinDisplay', {\n  issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  nonce: 'ephkn_priv_v9QGxPyA1F1VHjB4dpLhHfw4',\n  ephemeralKeySecret: 'ek_live_YWNjdF8xSmtzQWtQbUd...',\n});\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created. One of: `issuingCardNumberDisplay`, `issuingCardCvcDisplay`,\n`issuingCardExpiryDisplay`, `issuingCardPinDisplay`, or `issuingCardCopyButton`.\n","validation":"string","required":true},{"name":"options","validation":"object","required":true,"documentation":"Options for creating an Issuing element.\n","subspec":[{"name":"issuingCard","documentation":"ID of the [Issuing card](/api/issuing/cards/object) to be displayed in this Element.\n","validation":"string"},{"name":"ephemeralKeySecret","documentation":"The `secret` component of the ephemeral key created\nto display this Element.\n","validation":"string"},{"name":"nonce","documentation":"The ephemeral key nonce used to create the ephemeral\nkey provided to this Element.\n","validation":"string"},{"name":"style","documentation":"Customize the appearance of this Element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object","required":false}]}]}},"issuingCardCopyButton":{"render_as_value":"'issuingCardCopyButton'","request":{"title":"Create a issuingCardCopyButton Element","snippets":{"js":"var element = elements.create('issuingCardCopyButton', {\n  toCopy: 'number',\n});\n","es_next":"const element = elements.create('issuingCardCopyButton', {\n  toCopy: 'number',\n});\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element being created. One of: `issuingCardNumberDisplay`, `issuingCardCvcDisplay`,\n`issuingCardExpiryDisplay`, `issuingCardPinDisplay`, or `issuingCardCopyButton`.\n","validation":"string","required":true},{"name":"options","validation":"object","required":true,"documentation":"Options for creating an Issuing element.\n","subspec":[{"name":"toCopy","documentation":"Reference to the type of Issuing card data to copy. One of `number`, `cvc`, `expiry`, or `pin`.\n","validation":"string"},{"name":"style","documentation":"Customize the appearance of this Element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object","required":false}]}]}}},"section_tag":"issuing_elements_create"},"display_on_load":true},"other_element":{"title":"Other Elements","group_title":"The Element","group_anchor":"element","anchor":"other_element","section_anchor":"other_element","subsection_anchors":["elements_create","elements_get_element","element_update","element_container"],"path":"/element/other_element","gate":false,"data":{"section_type":"generic","title":"Other Elements","description":"Stripe also offers a [set of Elements for individual payment methods](/payments/elements) that you can use in your payment flows.\n","section_tag":"other_element"},"display_on_load":true},"elements_create":{"title":"Create an Element","group_title":"The Element","group_anchor":"element","anchor":"elements_create","section_anchor":"other_element","subsection_anchors":null,"path":"/elements_object/create_element","gate":false,"data":{"section_type":"method","title":"Create an Element","description":"This method creates an instance of an individual `Element`.\n\nIt takes the `type` of `Element` to create as well as an `options` object.\n","signature":{"object_name":"elements","method_name":"create","args":[{"name":"type","documentation":"The type of `Element` being created.\n","validation":"string","required":true,"selectable":true},{"name":"options","documentation":"All elements accept a common set of options, and then some element-specific options.\n","validation":"object","required":false}]},"types_parent":"type","types_data":{"card":{"render_as_value":"'card'","request":{"title":"Create a card Element","snippets":{"js":"var cardElement = elements.create('card');\n","es_next":"const cardElement = elements.create('card');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating. In this case, `card`.\n","validation":"'card'","required":true},{"name":"options","documentation":"Options for creating a `card` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled set of values to include in the input (e.g., `{postalCode: '94110'}`).\nNote that sensitive card information (card number, CVC, and expiration date) cannot be pre-filled\n","validation":"string"},{"name":"hidePostalCode","documentation":"Hide the postal code field.\nDefault is `false`.\nIf you are already collecting a full billing address or postal code elsewhere, set this to `true`.\n","validation":"boolean"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"},{"name":"disableLink","documentation":"Disables and hides the Link button in the Element.\nDefault is `false`.\nYou can also disable Link across all instances of `card` and `cardNumber` elements in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n","validation":"boolean"},{"name":"preferredNetwork","documentation":"Specifies a network preference for [Card Brand Choice](/card-brand-choice). The first network in the array that matches a\nnetwork on the entered co-branded card will be selected by default in the Card Brand Choice dropdown. See the\n[supported networks](/api/payment_methods/create#create_payment_method-card-networks-preferred) for valid values.\n\nIf you specify a value for `preferredNetwork` at create time, [hideIcon](#elements_create-options-hideIcon) must not be true\n(so that the Card Brand Choice dropdown can appear) and you cannot specify\n[payment_method_options.card.network](/js/payment_intents/confirm_card_payment#stripe_confirm_card_payment-data-payment_method_options-card-network)\nat confirm time.\n","validation":"array"}]}]}},"cardNumber":{"render_as_value":"'cardNumber'","request":{"title":"Create a cardNumber Element","snippets":{"js":"var cardNumberElement = elements.create('cardNumber');\n","es_next":"const cardNumberElement = elements.create('cardNumber');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `cardNumber`.\n","validation":"'cardNumber'","required":true},{"name":"options","documentation":"Options for creating a `cardNumber` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"placeholder","documentation":"Customize the placeholder text.\n","validation":"string"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"},{"name":"showIcon","documentation":"Show a card brand icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"disableLink","documentation":"Disables and hides the Link button in the Element.\nDefault is `false`.\nYou can also disable Link across all instances of `card` and `cardNumber` elements in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n","validation":"boolean"},{"name":"preferredNetwork","documentation":"Specifies a network preference for [Card Brand Choice](/card-brand-choice). The first network in the array that matches a\nnetwork on the entered co-branded card will be selected by default in the Card Brand Choice dropdown. See the\n[supported networks](/api/payment_methods/create#create_payment_method-card-networks-preferred) for valid values.\n\nIf you specify a value for `preferredNetwork` at create time, [showIcon](#elements_create-options-showIcon) must be true\n(so that the Card Brand Choice dropdown can appear) and you cannot specify\n[payment_method_options.card.network](/js/payment_intents/confirm_card_payment#stripe_confirm_card_payment-data-payment_method_options-card-network)\nat confirm time.\n","validation":"array"}]}]}},"cardExpiry":{"render_as_value":"'cardExpiry'","request":{"title":"Create a cardExpiry Element","snippets":{"js":"var cardExpiryElement = elements.create('cardExpiry');\n","es_next":"const cardExpiryElement = elements.create('cardExpiry');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `cardExpiry`.\n","validation":"'cardExpiry'","required":true},{"name":"options","documentation":"Options for creating a `cardExpiry` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"placeholder","documentation":"Customize the placeholder text.\n","validation":"string"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"cardCvc":{"render_as_value":"'cardCvc'","request":{"title":"Create a cardCvc Element","snippets":{"js":"var cardCvcElement = elements.create('cardCvc');\n","es_next":"const cardCvcElement = elements.create('cardCvc');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `cardCvc`.\n","validation":"'cardCvc'","required":true},{"name":"options","documentation":"Options for creating a `cardCvc` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"placeholder","documentation":"Customize the placeholder text.\n","validation":"string"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"fpxBank":{"render_as_value":"'fpxBank'","request":{"title":"Create a fpx Element","snippets":{"js":"var fpxElement = elements.create(\n  'fpxBank',\n  {\n    accountHolderType: 'individual',\n  }\n);\n","es_next":"const fpxElement = elements.create(\n  'fpxBank',\n  {\n    accountHolderType: 'individual',\n  }\n);\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `fpxBank`.\n","validation":"'fpxBank'","required":true},{"name":"options","documentation":"Options for creating an `fpxBank` element.\n","validation":"object","required":true,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [FPX guide](/payments/fpx/accept-a-payment#bank-reference) (e.g., `affin_bank`).\n","validation":"string"},{"name":"accountHolderType","validation":"string","documentation":"Can be one of `individual` or `company`.\n","required":true},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"iban":{"render_as_value":"'iban'","request":{"title":"Create an iban Element","snippets":{"js":"var ibanElement = elements.create('iban');\n","es_next":"const ibanElement = elements.create('iban');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `iban`.\n","validation":"'iban'","required":true},{"name":"options","documentation":"Options for creating an `iban` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"supportedCountries","documentation":"Specify the list of countries or country-groups whose IBANs you want to allow.\nMust be `['SEPA']`.\n","validation":"array"},{"name":"placeholderCountry","documentation":"Customize the country and format of the placeholder IBAN.\nDefault is `DE`.\n","validation":"string"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"idealBank":{"render_as_value":"'idealBank'","request":{"title":"Create an ideal Element","snippets":{"js":"var idealElement = elements.create('idealBank');\n","es_next":"const idealElement = elements.create('idealBank');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `idealBank`.\n","validation":"'idealBank'","required":true},{"name":"options","documentation":"Options for creating an `idealBank` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [iDEAL guide](/payments/ideal/accept-a-payment#bank-reference) (e.g., `abn_amro`).\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"p24Bank":{"render_as_value":"'p24Bank'","request":{"title":"Create a Przelewy24 Element","snippets":{"js":"var p24Element = elements.create('p24Bank');\n","es_next":"const p24Element = elements.create('p24Bank');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `p24Bank`.\n","validation":"'p24Bank'","required":true},{"name":"options","documentation":"Options for creating an `p24Bank` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [Przelewy24 guide](/payments/p24/accept-a-payment#web-collect-payment-details) (e.g., `abn_amro`).\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"epsBank":{"render_as_value":"'epsBank'","request":{"title":"Create an EPS Element","snippets":{"js":"var epsElement = elements.create('epsBank');\n","es_next":"const epsElement = elements.create('epsBank');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `epsBank`.\n","validation":"'epsBank'","required":true},{"name":"options","documentation":"Options for creating an `epsBank` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [EPS guide](/payments/eps/accept-a-payment#web-collect-payment-details) (e.g., `alior_bank`).\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"paymentRequestButton":{"render_as_value":"'paymentRequestButton'","request":{"title":"Create a paymentRequestButton Element","snippets":{"js":"var paymentRequest = stripe.paymentRequest({\n  country: 'US',\n  currency: 'usd',\n  total: {label: 'Demo total', amount: 1099},\n  requestPayerName: true,\n  requestPayerEmail: true,\n});\n\nvar paymentRequestButtonElement = elements.create(\n  'paymentRequestButton',\n  {\n    paymentRequest: paymentRequest,\n    style: {\n      paymentRequestButton: {\n        theme: 'light',\n      },\n    },\n  },\n);\n","es_next":"const paymentRequest = stripe.paymentRequest({\n  country: 'US',\n  currency: 'usd',\n  total: {label: 'Demo total', amount: 1099},\n  requestPayerName: true,\n  requestPayerEmail: true,\n});\n\nconst paymentRequestButtonElement = elements.create(\n  'paymentRequestButton',\n  {\n    paymentRequest,\n    style: {\n      paymentRequestButton: {\n        theme: 'light',\n      },\n    },\n  },\n);\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating.\nIn this case, `paymentRequestButton`.\n","validation":"'paymentRequestButton'","required":true},{"name":"options","documentation":"Options for creating a `paymentRequestButton` element.\n","validation":"object","required":true,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"An object used to customize the appearance of the Payment Request Button.\nThe object must have a single `paymentRequestButton` field, containing any of the following sub-fields:\n","validation":"object","subspec":[{"name":"type","validation":"string","required":false,"documentation":"Preferred button type to display. Available types, by wallet:\n\n\nBrowser card: `default`, `book`, `buy`, or `donate`.\n\nGoogle Pay: `default`, `buy`, or `donate`.\n\nApple Pay: `default`, `book`, `buy`, `donate`, `check-out`, `subscribe`, `reload`, `add-money`, `top-up`, `order`, `rent`, `support`, `contribute`, `tip`\n\n\nWhen a wallet does not support the provided value, `default` is used as a fallback.\n"},{"name":"theme","validation":"string","required":false,"documentation":"One of `dark`, `light`, or `light-outline`.\nThe default is `dark`.\n"},{"name":"height","validation":"string","required":false,"documentation":"The height of the Payment Request Button. Accepts `px` unit values.\n"}]},{"name":"paymentRequest","documentation":"A [PaymentRequest](/js/payment_request) object used to configure the element.\n","validation":"PaymentRequest","required":true}]}]}},"auBankAccount":{"render_as_value":"'auBankAccount'","request":{"title":"Create an auBankAccount Element","snippets":{"js":"var auBankAccountElement = elements.create('auBankAccount');\n","es_next":"const auBankAccountElement = elements.create('auBankAccount');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating. In this case, `auBankAccount`.\n","validation":"'auBankAccount'","required":true},{"name":"options","documentation":"Options for creating an `auBankAccount` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"affirmMessage":{"render_as_value":"'affirmMessage'","request":{"title":"Create an affirmMessage Element","snippets":{"js":"var options = {\n  amount: 10000, // $100.00 USD\n  currency: 'USD'\n};\nvar affirmMessageElement =\n  elements.create('affirmMessage', options);\n","es_next":"const options = {\n  amount: 10000, // $100.00 USD\n  currency: 'USD'\n};\nconst affirmMessageElement =\n  elements.create('affirmMessage', options);\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating. In this case, `affirmMessage`.\n","validation":"'affirmMessage'","required":true},{"name":"options","documentation":"Options for displaying an `affirmMessage` element. [See visual examples in the docs.](/payments/affirm/site-messaging)\n","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true,"documentation":"The total amount in the [smallest currency unit](/currencies#zero-decimal).\n"},{"name":"currency","validation":"string","required":true,"documentation":"The currency. Only `USD` supported currently.\n"},{"name":"logoColor","validation":"string","documentation":"The logo color to display. One of `primary`, `black`,\nor `white`. [See logo examples](/payments/affirm/site-messaging#customize-the-message).\n\nDefaults to `primary`.\n"},{"name":"fontColor","validation":"string","documentation":"The font color. Any string value valid for the font-color css property.\nExamples include: `red` and `#112233`. \n\nDefaults to `black`.\n"},{"name":"fontSize","validation":"string","documentation":"The font size. Any string value valid for the font-size css property.\nExamples include: `1em` and `9px`. \n\nDefaults to `1em`.\n"},{"name":"textAlign","validation":"string","documentation":"The text alignment. One of `start`, `end`, `left`, `right`, `center`, or `justify`. \n\nDefaults to `start`.\n"}]}]}},"afterpayClearpayMessage":{"render_as_value":"'afterpayClearpayMessage'","request":{"title":"Create an afterpayClearpayMessage Element","snippets":{"js":"var options = {\n  amount: 1000, // $10.00 USD\n  currency: 'USD'\n};\n\nvar afterpayClearpayMessageElement =\n  elements.create('afterpayClearpayMessage', options);\n","es_next":"const options = {\n  amount: 1000, // $10.00 USD\n  currency: 'USD'\n};\n\nconst afterpayClearpayMessageElement =\n  elements.create('afterpayClearpayMessage', options);\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating. In this case, `afterpayClearpayMessage`.\n","validation":"'afterpayClearpayMessage'","required":true},{"name":"options","documentation":"Options for displaying an `afterpayClearpayMessage` element. [See visual examples in the docs.](/payments/afterpay-clearpay/site-messaging)\n","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true,"documentation":"The total amount, divided into 4 installments, in the\n[smallest currency unit](/currencies#zero-decimal).\n"},{"name":"currency","validation":"string","required":true,"documentation":"The currency. One of `USD`, `AUD`, `CAD`, `GBP`, or `NZD`.\n"},{"name":"logoType","validation":"string","documentation":"The logo style to display. One of `badge`\nor `lockup`. [See logo examples](/payments/afterpay-clearpay/site-messaging#customize-the-message).\n\nDefaults to `badge`.\n"},{"name":"badgeTheme","validation":"string","documentation":"The badge color theme, applied when `logoType` is set to `badge`.\nOne of `black-on-mint`, `black-on-white`, `mint-on-black`, or\n`white-on-black`.\n\nDefaults to `black-on-mint`.\n"},{"name":"lockupTheme","validation":"string","documentation":"The lockup color theme, applied when `logoType` is set to `lockup`.\nOne of `black`, `white`, or `mint`.\n\nDefaults to `black`.\n"},{"name":"modalTheme","validation":"string","documentation":"The background color for the info modal. One of `mint` or\n`white`.\n\nDefaults to `mint`.\n"},{"name":"introText","validation":"string","documentation":"The leading text for the mesage. One of `In`, `in`, `Or`,\n`or`, `Pay`, `pay`, `Pay in`, or `pay in`.\n\nDefaults to `or`.\n"},{"name":"modalLinkStyle","validation":"string","documentation":"The style of modal link to display. One of `circled-info-icon`, `more-info-text`,\nor `learn-more-text`.\n\nDefaults to `circled-info-icon`.\n"},{"name":"isEligible","documentation":"Indicates whether an item is eligible for purchase with Afterpay / Clearpay.\n\nDefaults to `true`.\n","validation":"boolean"},{"name":"isCartEligible","documentation":"Indicates whether an entire cart is eligible for purchase with Afterpay / Clearpay.\n\nDefaults to `true`.\n","validation":"boolean"},{"name":"showInterestFree","documentation":"Determines whether 'interest-free' is displayed in the message.\n\nDefaults to `true`.\n","validation":"boolean"},{"name":"showWith","documentation":"Determines whether 'with' is displayed before the logo.\n\nDefaults to `true`.\n","validation":"boolean"},{"name":"max","validation":"number","documentation":"The maximum `amount` allowed for a purchase. See [transaction limits](/payments/afterpay-clearpay#collection-schedule) for more details.\n\nDefaults to `200000`.\n"},{"name":"min","validation":"number","documentation":"The minimum `amount` allowed for a purchase. See [transaction limits](/payments/afterpay-clearpay#collection-schedule) for more details.\n\nDefaults to `1000`.\n"},{"name":"showLowerLimit","documentation":"Determines whether the lower limit is displayed when `amount` exceeds price limits.\n\nDefaults to `true`.\n","validation":"boolean"},{"name":"showUpperLimit","documentation":"Determines whether the upper limit is displayed when `amount` exceeds price limits.\n\nDefaults to `true`.\n","validation":"boolean"}]}]}},"paymentMethodMessaging":{"render_as_value":"'paymentMethodMessaging'","request":{"title":"Create a paymentMethodMessaging Element","snippets":{"js":"const options = {\n  amount: 9900, // $99.00 USD\n  currency: 'USD',\n  // the country that the end-buyer is in\n  countryCode: 'US'\n};\nconst paymentMethodMessagingElement =\n  elements.create('paymentMethodMessaging', options);\n","es_next":"const options = {\n  amount: 9900, // $99.00 USD\n  currency: 'USD',\n  // the country that the end-buyer is in\n  countryCode: 'US'\n};\nconst paymentMethodMessagingElement =\n  elements.create('paymentMethodMessaging', options);\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of element you are creating. In this case, `paymentMethodMessaging`.\n","validation":"'paymentMethodMessaging'","required":true},{"name":"options","documentation":"Options for displaying a `paymentMethodMessaging` element. [See visual examples in the docs.](/payments/payment-method-messaging)\n","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true,"documentation":"The total amount in the [smallest currency unit](/currencies#zero-decimal).\n"},{"name":"currency","validation":"string","required":true,"documentation":"The currency. One of `USD`, `GBP`, `EUR`, `DKK`, `NOK`, `SEK`, `CAD`, `AUD`.\n"},{"name":"countryCode","validation":"string","required":true,"documentation":"The end-buyer country. One of `US`, `CA`, `AU`, `NZ`, `GB`, `IE`, `FR`, `ES`, `DE`,\n`AT`, `BE`, `DK`, `FI`, `IT`, `NL`, `NO`, `SE`.\n"},{"name":"paymentMethodTypes","validation":"array","required":false,"documentation":"A list of payment method types to render. You can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). Any combination of `affirm`, `afterpay_clearpay`, `klarna`.\n"}]}]}}},"section_tag":"elements_create"},"display_on_load":true},"elements_get_element":{"title":"Get an Element","group_title":"The Element","group_anchor":"element","anchor":"elements_get_element","section_anchor":"other_element","subsection_anchors":null,"path":"/elements_object/get_element","gate":false,"data":{"section_type":"method","title":"Get an Element","description":"This method looks up a previously created [Element](/js/element) by its type.\n","signature":{"object_name":"elements","method_name":"getElement","args":[{"name":"type","documentation":"The type of [Element](/js/elements_object/create_element) to lookup.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"type","documentation":"The type of [Element](/js/elements_object/create_element) to lookup.\n","validation":"string","required":true}]},"request":{"title":"Get an Element","snippets":{"js":"var cardElement = elements.getElement('card');\n","es_next":"const cardElement = elements.getElement('card');\n"}},"returns":"`elements.getElement` returns one of the following:\n\n* An instance of an `Element` with a matching type.\n* `null`, when no `Element` with a matching type has been created.\n","section_tag":"elements_get_element"},"display_on_load":true},"element_update":{"title":"Update an Element","group_title":"The Element","group_anchor":"element","anchor":"element_update","section_anchor":"other_element","subsection_anchors":null,"path":"/element/other_methods/update","gate":false,"data":{"section_type":"method","title":"Update an Element","description":"Updates the options the [Element](/js/element)\nwas initialized with. Updates are merged into the existing configuration.\n\nIf you collect certain information in a different part of your interface\n(e.g., ZIP or postal code), use `element.update` with the appropriate information.\n\nThe styles of an `Element` can be dynamically changed using `element.update`.\nThis method can be used to simulate CSS media queries that automatically adjust\nthe size of elements when viewed on different devices.\n","signature":{"object_name":"element","method_name":"update","args":[{"name":"options","validation":"object","required":true,"documentation":"The [same options as `element.create`](#elements_create-options).\n"}]},"types_parent":"object","types_data":{"card":{"request":{"title":"Update a card element","snippets":{"js":"// Update an element with details collected elsewhere on your page\nvar myPostalCodeField = document.querySelector('input[name=\"my-postal-code\"]');\nmyPostalCodeField.addEventListener('change', function(event) {\n  cardElement.update({value: {postalCode: event.target.value}});\n});\n\n// Dynamically change the styles of an element\nwindow.addEventListener('resize', function(event) {\n  if (window.innerWidth \u003C= 320) {\n    cardElement.update({style: {base: {fontSize: '13px'}}});\n  } else {\n    cardElement.update({style: {base: {fontSize: '16px'}}});\n  }\n});\n","es_next":"// Update an element with details collected elsewhere on your page\nconst myPostalCodeField = document.querySelector(\n  'input[name=\"my-postal-code\"]',\n);\nmyPostalCodeField.addEventListener('change', ({target}) =\u003E {\n  cardElement.update({value: {postalCode: target.value}});\n});\n\n// Dynamically change the styles of an element\nwindow.addEventListener('resize', (event) =\u003E {\n  if (window.innerWidth \u003C= 320) {\n    cardElement.update({style: {base: {fontSize: '13px'}}});\n  } else {\n    cardElement.update({style: {base: {fontSize: '16px'}}});\n  }\n});\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating a `card` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled set of values to include in the input (e.g., `{postalCode: '94110'}`).\nNote that sensitive card information (card number, CVC, and expiration date) cannot be pre-filled\n","validation":"string"},{"name":"hidePostalCode","documentation":"Hide the postal code field.\nDefault is `false`.\nIf you are already collecting a full billing address or postal code elsewhere, set this to `true`.\n","validation":"boolean"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"cardNumber":{"request":{"title":"Update a cardNumber Element","snippets":{"js":"cardNumberElement.update(options);\n","es_next":"cardNumberElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating a `cardNumber` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"placeholder","documentation":"Customize the placeholder text.\n","validation":"string"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"},{"name":"showIcon","documentation":"Show a card brand icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"}]}]}},"cardExpiry":{"request":{"title":"Update a cardExpiry Element","snippets":{"js":"cardExpiryElement.update(options);\n","es_next":"cardExpiryElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating a `cardExpiry` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"placeholder","documentation":"Customize the placeholder text.\n","validation":"string"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"cardCvc":{"request":{"title":"Update a cardCvc Element","snippets":{"js":"cardCvcElement.update(options);\n","es_next":"cardCvcElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating a `cardCvc` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"placeholder","documentation":"Customize the placeholder text.\n","validation":"string"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"iban":{"request":{"title":"Update an iban Element","snippets":{"js":"ibanElement.update(options);\n","es_next":"ibanElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating an `iban` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"supportedCountries","documentation":"Specify the list of countries or country-groups whose IBANs you want to allow.\nMust be `['SEPA']`.\n","validation":"array"},{"name":"placeholderCountry","documentation":"Customize the country and format of the placeholder IBAN.\nDefault is `DE`.\n","validation":"string"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"idealBank":{"request":{"title":"Update an ideal Element","snippets":{"js":"idealElement.update(options);\n","es_next":"idealElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating an `idealBank` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [iDEAL guide](/payments/ideal/accept-a-payment#bank-reference) (e.g., `abn_amro`).\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"p24Bank":{"request":{"title":"Update a Przelewy24 Element","snippets":{"js":"p24Element.update(options);\n","es_next":"p24Element.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating an `p24Bank` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [Przelewy24 guide](/payments/p24/accept-a-payment#web-collect-payment-details) (e.g., `abn_amro`).\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"epsBank":{"request":{"title":"Update an EPS Element","snippets":{"js":"epsElement.update(options);\n","es_next":"epsElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating an `epsBank` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"value","documentation":"A pre-filled value for the Element.\nCan be one of the banks listed in the [EPS guide](/payments/eps/accept-a-payment#web-collect-payment-details) (e.g., `alior_bank`).\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"paymentRequestButton":{"request":{"title":"Update a paymentRequestButton Element","snippets":{"js":"paymentRequestButtonElement.update(options);\n","es_next":"paymentRequestButtonElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating a `paymentRequestButton` element.\n","validation":"object","required":true,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"An object used to customize the appearance of the Payment Request Button.\nThe object must have a single `paymentRequestButton` field, containing any of the following sub-fields:\n","validation":"object","subspec":[{"name":"type","validation":"string","required":false,"documentation":"Preferred button type to display. Available types, by wallet:\n\n\nBrowser card: `default`, `book`, `buy`, or `donate`.\n\nGoogle Pay: `default`, `buy`, or `donate`.\n\nApple Pay: `default`, `book`, `buy`, `donate`, `check-out`, `subscribe`, `reload`, `add-money`, `top-up`, `order`, `rent`, `support`, `contribute`, `tip`\n\n\nWhen a wallet does not support the provided value, `default` is used as a fallback.\n"},{"name":"theme","validation":"string","required":false,"documentation":"One of `dark`, `light`, or `light-outline`.\nThe default is `dark`.\n"},{"name":"height","validation":"string","required":false,"documentation":"The height of the Payment Request Button. Accepts `px` unit values.\n"}]},{"name":"paymentRequest","documentation":"A [PaymentRequest](/js/payment_request) object used to configure the element.\n","validation":"PaymentRequest","required":true}]}]}},"auBankAccount":{"request":{"title":"Update an auBankAccount Element","snippets":{"js":"auBankAccountElement.update({disabled: true});\n","es_next":"auBankAccountElement.update({disabled: true});\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating an `auBankAccount` element.\n","validation":"object","required":false,"subspec":[{"name":"classes","documentation":"Set custom class names on the container DOM element when the Stripe element is in a particular state.\n","validation":"object","subspec":[{"name":"base","documentation":"The base class applied to the container.\nDefaults to `StripeElement`.\n","validation":"string"},{"name":"complete","documentation":"The class name to apply when the `Element` is complete.\nDefaults to `StripeElement--complete`.\n","validation":"string"},{"name":"empty","documentation":"The class name to apply when the `Element` is empty.\nDefaults to `StripeElement--empty`.\n","validation":"string"},{"name":"focus","documentation":"The class name to apply when the `Element` is focused.\nDefaults to `StripeElement--focus`.\n","validation":"string"},{"name":"invalid","documentation":"The class name to apply when the `Element` is invalid.\nDefaults to `StripeElement--invalid`.\n","validation":"string"},{"name":"webkitAutofill","documentation":"The class name to apply when the `Element` has its value autofilled by the browser (only on Chrome and Safari).\nDefaults to `StripeElement--webkit-autofill`.\n","validation":"string"}]},{"name":"style","documentation":"Customize the appearance of this element using CSS properties passed in a [Style](/js/appendix/style) object.\n","validation":"object"},{"name":"iconStyle","documentation":"Appearance of the icon in the Element.\nEither `solid` or `default`.\n","validation":"string"},{"name":"hideIcon","documentation":"Hides the icon in the Element.\nDefault is `false`.\n","validation":"boolean"},{"name":"disabled","documentation":"Applies a disabled state to the Element such that user input is not accepted.\nDefault is `false`.\n","validation":"boolean"}]}]}},"affirmMessage":{"request":{"title":"Update an affirmMessage Element","snippets":{"js":"affirmMessageElement.update(options);\n","es_next":"affirmMessageElement.update(options);\n"}},"table_content":{"items":[{"name":"options","documentation":"Options for updating an `affirmMessage` element.\n","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true,"documentation":"The total amount in the [smallest currency unit](/currencies#zero-decimal).\n"},{"name":"currency","validation":"string","required":true,"documentation":"The currency. Only `USD` supported currently.\n"},{"name":"logoColor","validation":"string","documentation":"The logo color to display. One of `primary`, `black`,\nor `white`. [See logo examples](/payments/affirm/site-messaging#customize-the-message).\n\nDefaults to `primary`.\n"},{"name":"fontColor","validation":"string","documentation":"The font color. Any string value valid for the font-color css property.\nExamples include: `red` and `#112233`. \n\nDefaults to `black`.\n"},{"name":"fontSize","validation":"string","documentation":"The font size. Any string value valid for the font-size css property.\nExamples include: `1em` and `9px`. \n\nDefaults to `1em`.\n"},{"name":"textAlign","validation":"string","documentation":"The text alignment. One of `start`, `end`, `left`, `right`, `center`, or `justify`. \n\nDefaults to `start`.\n"}]}]}}},"section_tag":"element_update"},"display_on_load":true},"element_container":{"title":"Style the Element container","group_title":"The Element","group_anchor":"element","anchor":"element_container","section_anchor":"other_element","subsection_anchors":null,"path":"/element/the_element_container","gate":false,"data":{"section_type":"generic","title":"Style the Element container","description":"Style the container you mount an [Element](/js/element) to as if it were an `\u003Cinput\u003E` on your page.\nFor example, to control `padding` and `border` on an `Element`, set these properties on the container.\nThis is usually done by re-using the classes that you have applied to your DOM `\u003Cinput\u003E` elements.\nAfter the `Element` is mounted, the `.StripeElement` class is added to the container.\nAdditionally, the following classes are automatically added to the container when the `Element` is complete, empty, focused, invalid, or autofilled by the browser:\n\n* `.StripeElement--complete`\n* `.StripeElement--empty`\n* `.StripeElement--focus`\n* `.StripeElement--invalid`\n* `.StripeElement--webkit-autofill` (Chrome and Safari only)\n\nThese class names can be customized using the `classes` [option](/js/elements_object/create_element#elements_create-options-classes) when you [create an Element](#elements_create).\n","request":{"title":"The Element container","snippets":{"html":"\u003Cstyle\u003E\n  .my-input {\n    padding: 10px;\n    border: 1px solid #ccc;\n  }\n\u003C/style\u003E\n\n\u003Cform\u003E\n  \u003Cdiv\u003E\n    \u003Clabel\u003EName\u003C/label\u003E\n    \u003Cinput class=\"my-input\"\u003E\n  \u003C/div\u003E\n  \u003Cdiv\u003E\n    \u003Clabel\u003ECard\u003C/label\u003E\n    \u003C!-- Using the same \"my-input\" class on the --\u003E\n    \u003C!-- regular input above and on this container. --\u003E\n    \u003Cdiv class=\"my-input\" id=\"card-element\"\u003E\u003C/div\u003E\n  \u003C/div\u003E\n\u003C/form\u003E\n"}},"section_tag":"element_container"},"display_on_load":true},"element_mount":{"title":"Mount an Element","group_title":"The Element","group_anchor":"element","anchor":"element_mount","section_anchor":"element_mount","subsection_anchors":null,"path":"/element/mount","gate":false,"data":{"section_type":"method","title":"Mount an Element","description":"The `element.mount` method attaches your [Element](/js/element) to the DOM.\n`element.mount` accepts either a CSS Selector (e.g., `'#card-element'`) or a DOM element.\n\nYou need to create a container DOM element to mount an `Element`.\nIf the container DOM element has a label, the `Element` is automatically focused when its label is clicked.\nThere are two ways to do this:\n\n1. Mount the instance within a `\u003Clabel\u003E`.\n2. Create a `\u003Clabel\u003E` with a `for` attribute, referencing the ID of your container.\n","signature":{"object_name":"element","method_name":"mount","args":[{"name":"domElement","documentation":"The CSS selector or DOM element where your [Element](/js/element) will be mounted.\n","validation":"string | DOM element","required":true}]},"table_content":{"items":[{"name":"domElement","documentation":"The CSS selector or DOM element where your [Element](/js/element) will be mounted.\n","validation":"string | DOM element","required":true}]},"request":{"title":"Mount an Element","snippets":{"html":"\u003C!-- Mount the instance within a \u003Clabel\u003E --\u003E\n\u003Clabel\u003ECard\n  \u003Cdiv id=\"card-element\"\u003E\u003C/div\u003E\n\u003C/label\u003E\n\n\u003C!--\n  Or create a \u003Clabel\u003E with a 'for' attribute,\n  referencing the ID of your container.\n--\u003E\n\u003Clabel for=\"card-element\"\u003ECard\u003C/label\u003E\n\u003Cdiv id=\"card-element\"\u003E\u003C/div\u003E\n\n\u003Cscript\u003E\n  cardElement.mount('#card-element');\n\u003C/script\u003E\n"}},"section_tag":"element_mount"},"display_on_load":true},"element_other_methods":{"title":"Element methods","group_title":"The Element","group_anchor":"element","anchor":"element_other_methods","section_anchor":"element_other_methods","subsection_anchors":["element_blur","element_clear","element_destroy","element_focus","element_unmount"],"path":"/element/other_methods","gate":false,"data":{"section_type":"generic","title":"Element methods","description":"Below are a number of methods that are in common between all [Element](/js/element) UIs. Wait until the [ready event](/js/element/events/on_ready) is triggered before calling these methods.\n","section_tag":"element_other_methods"},"display_on_load":true},"element_blur":{"title":"Blur an Element","group_title":"The Element","group_anchor":"element","anchor":"element_blur","section_anchor":"element_other_methods","subsection_anchors":null,"path":"/element/other_methods/blur","gate":false,"data":{"section_type":"method","title":"Blur an Element","description":"Blurs the [Element](/js/element).\n","signature":{"object_name":"element","method_name":"blur"},"request":{"title":"Blur an Element","snippets":{"js":"cardElement.blur();\n","es_next":"cardElement.blur();\n"}},"section_tag":"element_blur"},"display_on_load":true},"element_clear":{"title":"Clear an Element's values","group_title":"The Element","group_anchor":"element","anchor":"element_clear","section_anchor":"element_other_methods","subsection_anchors":null,"path":"/element/other_methods/clear","gate":false,"data":{"section_type":"method","title":"Clear an Element's values","description":"Clears the value(s) of the [Element](/js/element).\n","signature":{"object_name":"element","method_name":"clear"},"request":{"title":"Clear an Element","snippets":{"js":"cardElement.clear();\n","es_next":"cardElement.clear();\n"}},"section_tag":"element_clear"},"display_on_load":true},"element_destroy":{"title":"Destroy an Element","group_title":"The Element","group_anchor":"element","anchor":"element_destroy","section_anchor":"element_other_methods","subsection_anchors":null,"path":"/element/other_methods/destroy","gate":false,"data":{"section_type":"method","title":"Destroy an Element","description":"Removes the [Element](/js/element) from the DOM and destroys it.\nA destroyed `Element` can not be re-activated or re-mounted to the DOM.\n","signature":{"object_name":"element","method_name":"destroy"},"request":{"title":"Destroy an Element","snippets":{"js":"cardElement.destroy();\n","es_next":"cardElement.destroy();\n"}},"section_tag":"element_destroy"},"display_on_load":true},"element_focus":{"title":"Focus an Element","group_title":"The Element","group_anchor":"element","anchor":"element_focus","section_anchor":"element_other_methods","subsection_anchors":null,"path":"/element/other_methods/focus","gate":false,"data":{"section_type":"method","title":"Focus an Element","description":"Focuses the [Element](/js/element).\n","callout":"This method will currently not work on iOS 13+ due to a system limitation.\n","signature":{"object_name":"element","method_name":"focus"},"request":{"title":"Focus an Element","snippets":{"js":"cardElement.focus();\n","es_next":"cardElement.focus();\n"}},"section_tag":"element_focus"},"display_on_load":true},"element_unmount":{"title":"Unmount an Element","group_title":"The Element","group_anchor":"element","anchor":"element_unmount","section_anchor":"element_other_methods","subsection_anchors":null,"path":"/element/other_methods/unmount","gate":false,"data":{"section_type":"method","title":"Unmount an Element","description":"Unmounts the [Element](/js/element) from the DOM.\nCall [`element.mount`](/js/element/mount) to re-attach it to the DOM.\n","signature":{"object_name":"element","method_name":"unmount"},"request":{"title":"Unmount an Element","snippets":{"js":"cardElement.unmount();\n","es_next":"cardElement.unmount();\n"}},"section_tag":"element_unmount"},"display_on_load":true},"element_events":{"title":"Listen to Element events","group_title":"The Element","group_anchor":"element","anchor":"element_events","section_anchor":"element_events","subsection_anchors":["element_on_change","element_on_ready","element_on_focus","element_on_blur","element_on_escape","element_on_click","element_on_loaderror","element_on_loaderstart","element_on_networkschange"],"path":"/element/events","gate":false,"data":{"section_type":"generic","title":"Element events","description":"The only way to communicate with your [Element](/js/element) is by listening to an event.\nAn Element might emit any of the events below.\nAll events have a payload object that has an `elementType` property with the type of the `Element` that emitted the event.\n","section_tag":"element_events"},"display_on_load":true},"element_on_change":{"title":"Change event","group_title":"The Element","group_anchor":"element","anchor":"element_on_change","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_change","gate":false,"data":{"section_type":"method","title":"Change event","description":"The change event is triggered when the `Element`'s value changes.\nThe event payload always contains certain keys, in addition to some `Element`-specific keys.\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true,"render_as_value":"'change'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true}]},"callout":"Consult with your legal counsel regarding your requirements and obligations about how you collect, use, and store customers' personal data","types_parent":"object","types_data":{"paymentElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if all required fields for the selected payment method in the Payment Element\nhave been filled with potentially valid input.\n","validation":"boolean"},{"name":"collapsed","documentation":"`true` if the Payment Element is currently collapsed\n","validation":"boolean"},{"name":"value","documentation":"An object containing the current selected PaymentMethod type.\nIf a payment method is selected, it will be included in the object.\n","validation":"object"}]}]},"request":{"title":"Handle a payment element change event","snippets":{"js":"paymentElement.on('change', function(event) {\n  if (event.complete) {\n    // enable payment button\n  }\n});\n","es_next":"cardElement.on('change', (event) =\u003E {\n  if (event.complete) {\n    // enable payment button\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  elementType: 'payment',\n  complete: false,\n  empty: false,\n  collapsed: false,\n  value: {\n    type: \"card\",\n    payment_method?: {\n      id: \"\",\n      type: \"\",\n      billing_details: {\n        address: {\n          line1: \"\",\n          line2: \"\",\n          city: \"\",\n          state: \"\",\n          postal_code: \"\",\n          country: \"\",\n        },\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n      },\n    },\n  },\n}\n"}}},"linkAuthenticationElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"value","documentation":"An object containing the current email.\n","validation":"object"}]}]},"request":{"title":"Handle a link authentication element change event","snippets":{"js":"linkAuthenticationElement.on('change', function(event) {\n  if (event.complete) {\n    // Handle change complete event\n  }\n});\n","es_next":"linkAuthenticationElement.on('change', (event) =\u003E {\n  if (event.complete) {\n    // Handle change complete event\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  elementType: 'linkAuthentication',\n  empty: false,\n  complete: false,\n  value: { email: \"\" },\n}\n"}}},"addressElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"isNewAddress","documentation":"`true` if the Address Element is currently displaying the form collection view.\n","validation":"boolean"},{"name":"value","documentation":"An object containing the current address information. The `firstName` and\n`lastName` properties only appear if the `display.name` option is set to `split`.\nThe `phone` property only appears if the `fields.phone` option is set to `always`.\n","validation":"object"}]}]},"request":{"title":"Handle an address element change event","snippets":{"js":"addressElement.on('change', function(event) {\n  if (event.complete) {\n    // extract potentially complete address\n  }\n});\n","es_next":"addressElement.on('change', (event) =\u003E {\n  if (event.complete) {\n    // extract potentially complete address\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  elementType: 'address',\n  elementMode: 'shipping',\n  empty: false,\n  complete: false,\n  isNewAddress: false,\n  value: {\n    name: \"\",\n    firstName?: \"\",\n    lastName?: \"\",\n    address: {\n      line1: \"\",\n      line2: null,\n      city: \"\",\n      state: \"\",\n      postal_code: \"\",\n      country: \"\",\n    },\n    phone?: \"\",\n  },\n}\n"}}},"cardElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"value","documentation":"An object similar to the one used for value when [creating an Element](#elements_create-elementOptions).\n\nOnly present for non-sensitive values, like `postalCode`.\n","validation":"string, object"},{"name":"brand","documentation":"The card brand of the card number being entered.\nCan be one of `visa`, `mastercard`, `amex`, `discover`, `diners`, `jcb`, `unionpay`, or `unknown`.\n","validation":"string"}]}]},"request":{"title":"Handle a card change event","snippets":{"js":"cardElement.on('change', function(event) {\n  if (event.complete) {\n    // enable payment button\n  } else if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"cardElement.on('change', (event) =\u003E {\n  if (event.complete) {\n    // enable payment button\n  } else if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: false,\n  brand: 'visa',\n  elementType: 'card',\n  empty: false,\n  error: undefined,\n  value: { postalCode: \"\" },\n}\n"}}},"cardNumberElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"brand","documentation":"The card brand of the card number being entered.\nCan be one of `visa`, `mastercard`, `amex`, `discover`, `diners`, `jcb`, `unionpay`, or `unknown`.\n","validation":"string"}]}]},"request":{"title":"Handle a cardNumber change event","snippets":{"js":"cardNumberElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"cardNumberElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  brand: 'visa',\n  elementType: 'cardNumber',\n  empty: false,\n  error: undefined,\n}\n"}}},"cardExpiryElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"}]}]},"request":{"title":"Handle a cardExpiry change event","snippets":{"js":"cardExpiryElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"cardExpiryElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  elementType: 'cardExpiry',\n  empty: false,\n  error: undefined,\n}\n"}}},"cardCvcElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"}]}]},"request":{"title":"Handle a cardCvc change event","snippets":{"js":"cardCvcElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"cardCvcElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  elementType: 'cardCvc',\n  empty: false,\n  error: undefined,\n}\n"}}},"auBankAccountElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the BSB number and account number are empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe value is potentially complete when the BSB number is a known\nBSB number and when the account number matches the length required\nby the bank (or is between 5-9 digits for banks without a specific\naccount number length).\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"bankName","documentation":"The financial institution corresponding to BSB number entered into the Element.\n","validation":"string"},{"name":"branchName","documentation":"The financial institution’s branch name corresponding to BSB number entered into the Element.\n","validation":"string"}]}]},"request":{"title":"Handle an auBankAccount change event","snippets":{"js":"auBankAccountElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  } else if (event.bankName \u0026\u0026 event.branchName) {\n    // show both bank and branch name\n  } else if (event.bankName) {\n    // show bank name\n  }\n});\n","es_next":"auBankAccountElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  } else if (event.bankName \u0026\u0026 event.branchName) {\n    // show both bank and branch name\n  } else if (event.bankName) {\n    // show bank name\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  bankName: 'Stripe Test Bank',\n  branchName: 'Stripe Test Branch'\n  complete: true,\n  elementType: 'auBankAccount',\n  empty: false,\n  error: undefined,\n}\n"}}},"ibanElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"country","documentation":"The country code of the entered IBAN.\n","validation":"string"},{"name":"bankName","documentation":"The financial institution that services the account whose IBAN was entered into the Element.\n","validation":"string"}]}]},"request":{"title":"Handle an iban change event","snippets":{"js":"ibanElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"ibanElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  elementType: 'iban',\n  empty: false,\n  country: 'IE',\n  bankName: 'BofA',\n  error: undefined,\n}\n"}}},"idealBankElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"value","documentation":"The selected bank.\nCan be one of the banks listed in the [iDEAL guide](/payments/ideal/accept-a-payment#bank-reference).\n","validation":"string, object"}]}]},"request":{"title":"Handle an idealBank change event","snippets":{"js":"idealBankElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"idealBankElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  value: 'Banks McBank'\n  elementType: 'idealBank',\n  empty: false,\n  error: undefined,\n}\n"}}},"p24BankElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"value","documentation":"The selected bank.\nCan be one of the banks listed in the [Przelewy24 guide](/payments/p24/accept-a-payment#web-collect-payment-details).\n","validation":"string, object"}]}]},"request":{"title":"Handle an p24Bank change event","snippets":{"js":"p24BankElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"p24BankElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  value: 'Banks McBank'\n  elementType: 'p24Bank',\n  empty: false,\n  error: undefined,\n}\n"}}},"epsBankElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"empty","documentation":"`true` if the value is empty.\n","validation":"boolean"},{"name":"complete","documentation":"`true` if the value is well-formed and potentially complete.\nThe `complete` value can be used to progressively disclose the next parts of your form or to enable form submission.\n\nIt is not an indicator of whether a customer is done with their input—it only indicates that the Element contains a potentially complete, well-formed value.\nIn many cases the customer could still add further input.\n\nThe `complete` value should not be used to perform an action such as advancing the cursor to a subsequent field or performing a tokenization request.\n","validation":"boolean"},{"name":"error","documentation":"The current validation error, if any.\nComprised of `message`, `code`, and `type`.\nThe `type` is always set to `validation_error`.\n","validation":"object"},{"name":"value","documentation":"The selected bank.\nCan be one of the banks listed in the [EPS guide](/payments/eps/accept-a-payment#web-collect-payment-details).\n","validation":"string, object"}]}]},"request":{"title":"Handle an epsBank change event","snippets":{"js":"epsBankElement.on('change', function(event) {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n","es_next":"epsBankElement.on('change', (event) =\u003E {\n  if (event.error) {\n    // show validation to customer\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  complete: true,\n  value: 'Banks McBank'\n  elementType: 'epsBank',\n  empty: false,\n  error: undefined,\n}\n"}}}},"section_tag":"element_on_change"},"display_on_load":true},"element_on_ready":{"title":"Ready event","group_title":"The Element","group_anchor":"element","anchor":"element_on_ready","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_ready","gate":false,"data":{"section_type":"method","title":"Ready event","description":"Triggered when the `Element` is fully rendered and methods on the instance, like `element.focus()` and `element.update()`, can be called.\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `ready`.\n","validation":"'ready'","required":true,"render_as_value":"'ready'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"string","required":true,"documentation":"The type of element the event is fired from.\n"},{"name":"availablePaymentMethods","validation":"object | undefined","documentation":"This field is **only** present on the `expressCheckout` Element. Describes which buttons render in the Element. Returns undefined if no buttons will render.\n","subspec":[{"name":"link","validation":"boolean"},{"name":"applePay","validation":"boolean"},{"name":"googlePay","validation":"boolean"},{"name":"paypal","validation":"boolean"}]}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `ready`.\n","validation":"'ready'","required":true,"render_as_value":"'ready'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","required":true,"subspec_title":"handler event object properties","expanded":true,"subspec":[{"name":"elementType","validation":"string","required":true,"documentation":"The type of element the event is fired from.\n"},{"name":"availablePaymentMethods","validation":"object | undefined","documentation":"This field is **only** present on the `expressCheckout` Element. Describes which buttons render in the Element. Returns undefined if no buttons will render.\n","subspec":[{"name":"link","validation":"boolean"},{"name":"applePay","validation":"boolean"},{"name":"googlePay","validation":"boolean"},{"name":"paypal","validation":"boolean"}]}]}]},"request":{"title":"Handle an Element ready event","snippets":{"js":"element.on('ready', function(event) {\n  // Handle ready event\n});\n","es_next":"element.on('ready', (event) =\u003E {\n  // Handle ready event\n});\n"}},"section_tag":"element_on_ready"},"display_on_load":true},"element_on_focus":{"title":"Focus event","group_title":"The Element","group_anchor":"element","anchor":"element_on_focus","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_focus","gate":false,"data":{"section_type":"method","title":"Focus event","description":"Triggered when the `Element` gains focus.\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `focus`.\n","validation":"'focus'","required":true,"render_as_value":"'focus'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `focus`.\n","validation":"'focus'","required":true,"render_as_value":"'focus'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n","validation":"function","required":true}]},"request":{"title":"Handle an Element focus event","snippets":{"js":"element.on('focus', function(event) {\n  // Handle focus event\n});\n","es_next":"element.on('focus', (event) =\u003E {\n  // Handle focus event\n});\n"}},"section_tag":"element_on_focus"},"display_on_load":true},"element_on_blur":{"title":"Blur event","group_title":"The Element","group_anchor":"element","anchor":"element_on_blur","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_blur","gate":false,"data":{"section_type":"method","title":"Blur event","description":"Triggered when the `Element` loses focus.\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `blur`.\n","validation":"'blur'","required":true,"render_as_value":"'blur'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `blur`.\n","validation":"'blur'","required":true,"render_as_value":"'blur'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n","validation":"function","required":true}]},"request":{"title":"Handle an Element blur event","snippets":{"js":"element.on('blur', function(event) {\n  // Handle blur event\n});\n","es_next":"element.on('blur', (event) =\u003E {\n  // Handle blur event\n});\n"}},"section_tag":"element_on_blur"},"display_on_load":true},"element_on_escape":{"title":"Escape event","group_title":"The Element","group_anchor":"element","anchor":"element_on_escape","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_escape","gate":false,"data":{"section_type":"method","title":"Escape event","description":"Triggered when the escape key is pressed within an Element.\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `escape`.\n","validation":"'escape'","required":true,"render_as_value":"'escape'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `escape`.\n","validation":"'escape'","required":true,"render_as_value":"'escape'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n","validation":"function","required":true}]},"request":{"title":"Handle an Element escape event","snippets":{"js":"element.on('escape', function(event) {\n  // Handle escape event\n});\n","es_next":"element.on('escape', (event) =\u003E {\n  // Handle escape event\n});\n"}},"section_tag":"element_on_escape"},"display_on_load":true},"element_on_click":{"title":"Click event","group_title":"The Element","group_anchor":"element","anchor":"element_on_click","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_click","gate":false,"data":{"section_type":"method","title":"Click event","types_parent":"object","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `click`.\n","validation":"'click'","required":true,"render_as_value":"'click'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** you provide that's called after the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"expressPaymentType","validation":"'apple_pay' | 'google_pay' | 'amazon_pay' | 'paypal' | 'link'","required":true,"documentation":"The payment method the customer checks out with.\n"},{"name":"resolve","validation":"function","documentation":"A function `resolve(payload) =\u003E void` that's called to show the payment interface. You must call this function within 1 second if you handle the `click` event.\n","required":true,"subspec_title":"resolve parameters","subspec":[{"name":"allowedShippingCountries","validation":"array","documentation":"By default, the Express Checkout Element allows all countries for shipping.\n\nYou can specify which countries are allowed for shipping in the Express Checkout Element with a list of two-letter country codes.\n"},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]},{"name":"billingAddressRequired","validation":"boolean","documentation":"By default, the Express Checkout Element collects the billing address. You can disable this by setting `billingAddressRequired` to `false`.\n\nWe highly recommend that you collect the billing address because it can be used to perform address verifications and block fraudulent payments.\n"},{"name":"business","documentation":"Provide information about your business that's displayed in the Express Checkout Element.\nThis information will be retrieved from your Stripe account if it's not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name is used to signal to the customer who they're paying.\n"}],"expanded":true},{"name":"emailRequired","validation":"boolean","documentation":"Collect the customer's email by setting this option to `true`.\n"},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"phoneNumberRequired","validation":"boolean","documentation":"Collect the customer's phone number by setting this option to `true`.\n\nPayPal doesn't provide a phone number, even when this option is set to `true`.\n"},{"name":"shippingAddressRequired","validation":"boolean","documentation":"Collect the customer's shipping address by setting this option to `true`.\n\nIf `true`, you must also supply a valid `shippingRates` option.\n"},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]}]},"types_data":{"expressCheckoutElement":{"description":"The `click` event is triggered from an Express Checkout Element when the customer\nclicks a payment button. Use this event to configure the payment interface.\n","table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `click`.\n","validation":"'click'","required":true,"render_as_value":"'click'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** you provide that's called after the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","validation":"'expressCheckout'","render_as_value":"'expressCheckout'","required":true,"documentation":"The type of element the event is fired from, which is `expressCheckout` in this case.\n"},{"name":"expressPaymentType","validation":"'apple_pay' | 'google_pay' | 'amazon_pay' | 'paypal' | 'link'","required":true,"documentation":"The payment method the customer checks out with.\n"},{"name":"resolve","validation":"function","documentation":"A function `resolve(payload) =\u003E void` that's called to show the payment interface. You must call this function within 1 second if you handle the `click` event.\n","required":true,"subspec_title":"resolve parameters","subspec":[{"name":"allowedShippingCountries","validation":"array","documentation":"By default, the Express Checkout Element allows all countries for shipping.\n\nYou can specify which countries are allowed for shipping in the Express Checkout Element with a list of two-letter country codes.\n"},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]},{"name":"billingAddressRequired","validation":"boolean","documentation":"By default, the Express Checkout Element collects the billing address. You can disable this by setting `billingAddressRequired` to `false`.\n\nWe highly recommend that you collect the billing address because it can be used to perform address verifications and block fraudulent payments.\n"},{"name":"business","documentation":"Provide information about your business that's displayed in the Express Checkout Element.\nThis information will be retrieved from your Stripe account if it's not provided.\n","validation":"object","subspec":[{"name":"name","validation":"string","documentation":"The name of your business. Your business name is used to signal to the customer who they're paying.\n"}],"expanded":true},{"name":"emailRequired","validation":"boolean","documentation":"Collect the customer's email by setting this option to `true`.\n"},{"name":"lineItems","validation":"array","documentation":"An array of LineItem objects. These LineItems are shown as line items in the payment interface, if line items are supported.\n","subspec":[{"name":"name","required":true,"validation":"string","documentation":"The name of the line item surfaced to the customer in the payment interface.\n"},{"name":"amount","required":true,"validation":"number","documentation":"The amount in the currency's subunit (for example, cents, yen, etc.).\n"}]},{"name":"phoneNumberRequired","validation":"boolean","documentation":"Collect the customer's phone number by setting this option to `true`.\n\nPayPal doesn't provide a phone number, even when this option is set to `true`.\n"},{"name":"shippingAddressRequired","validation":"boolean","documentation":"Collect the customer's shipping address by setting this option to `true`.\n\nIf `true`, you must also supply a valid `shippingRates` option.\n"},{"name":"shippingRates","validation":"array","documentation":"An array of ShippingRate objects. The first shipping rate listed appears in the payment interface as the default option.\n","subspec":[{"name":"id","validation":"string","required":true,"documentation":"Unique identifier for the object.\n"},{"name":"amount","validation":"number","required":true,"documentation":"The amount to charge for shipping.\n"},{"name":"displayName","validation":"string","required":true,"documentation":"The name of the shipping rate, displayed to the customer in the payment interface.\n"},{"name":"deliveryEstimate","validation":"object | string","documentation":"The estimated range for how long shipping takes, displayed to the customer in the payment interface.\nWe recommended using the object format, but you can use a string instead.\n","subspec":[{"name":"maximum","validation":"object","documentation":"The upper bound of the estimated range. If empty, it represents no upper bound (for example, infinite).\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]},{"name":"minimum","validation":"object","documentation":"The lower bound of the estimated range. If empty, it represents no lower bound.\n","subspec":[{"name":"unit","documentation":"A unit of time.\n","validation":"'hour' | 'day' | 'business_day' | 'week' | 'month'"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"number"}]}]}]}]}]}]},"request":{"title":"Handle an express checkout element click event","snippets":{"js":"expressCheckoutElement.on('click', function(event) {\n  // Handle click event\n});\n","es_next":"expressCheckoutElement.on('click', (event) =\u003E {\n  // Handle click event\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  elementType: 'expressCheckout',\n  expressPaymentType: 'apple_pay',\n  resolve: function(status) {\n    // Call this function to show the payment interface.\n    // Note that you must call this within 1 second.\n  },\n  ...,\n}\n"}}},"paymentRequestButton":{"description":"Triggered when the `Element` is clicked.\n","table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `click`.\n","validation":"'click'","required":true,"render_as_value":"'click'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nAfter it's called, it passes an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"preventDefault","validation":"function","documentation":"Calling this function synchronously prevents the browser's payment interface from being shown.\nIf you have your own form validation logic, you can call this when form validation fails.\n"}]}]},"request":{"title":"Handle a payment request button click event","snippets":{"js":"paymentRequestButtonElement.on('click', function(event) {\n  // If form validation fails\n  if (!formValidated) {\n    event.preventDefault();\n  }\n});\n","es_next":"paymentRequestButtonElement.on('click', (event) =\u003E {\n  // If form validation fails\n  if (!formValidated) {\n    event.preventDefault();\n  }\n});\n"}}},"issuingCardCopyButton":{"description":"Triggered when the `Element` is clicked.\n","table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `click`.\n","validation":"'click'","required":true,"render_as_value":"'click'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"preventDefault","validation":"function","documentation":"Calling this function synchronously prevents the browser's payment interface from being shown.\nThis can be used to validate the form before the payment interface is shown.\n"}]}]},"request":{"title":"Handle an issuing card copy button click event","snippets":{"js":"issuingCardCopyButtonElement.on('click', function(event) {\n  // Handle click event\n});\n","es_next":"issuingCardCopyButtonElement.on('click', (event) =\u003E {\n  // Handle click event\n});\n"}}}},"section_tag":"element_on_click"},"display_on_load":true},"element_on_loaderror":{"title":"LoadError event","group_title":"The Element","group_anchor":"element","anchor":"element_on_loaderror","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_loaderror","gate":false,"data":{"section_type":"method","title":"LoadError event","description":"Triggered when the `Element` fails to load.\n\n**This event is only emitted from the `payment`, `linkAuthentication`, `address`, `expressCheckout`, `card`, and `cardNumber` Elements.**\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `loaderror`.\n","validation":"'loaderror'","required":true,"render_as_value":"'loaderror'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"error","validation":"object","documentation":"An `error` object that describes the failure.\n"}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `loaderror`.\n","validation":"'loaderror'","required":true,"render_as_value":"'loaderror'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"},{"name":"error","validation":"object","documentation":"An `error` object that describes the failure.\n"}]}]},"request":{"title":"Handle an Element loaderror event","snippets":{"js":"paymentElement.on('loaderror', function(event) {\n  // Handle loaderror event\n});\n","es_next":"paymentElement.on('loaderror', (event) =\u003E {\n  // Handle loaderror event\n});\n"}},"section_tag":"element_on_loaderror"},"display_on_load":true},"element_on_loaderstart":{"title":"LoaderStart event","group_title":"The Element","group_anchor":"element","anchor":"element_on_loaderstart","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_loaderstart","gate":false,"data":{"section_type":"method","title":"LoadStart event","description":"Triggered when the [loader](/js/elements_object/create#stripe_elements-options-loader) UI is mounted to the DOM and ready to be displayed.\n\n**This event is only emitted from the `payment`, `linkAuthentication`, and `address` Elements.**\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `loaderstart`.\n","validation":"'loaderstart'","required":true,"render_as_value":"'loaderstart'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `loaderstart`.\n","validation":"'loaderstart'","required":true,"render_as_value":"'loaderstart'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"elementType","documentation":"The type of element that emitted this event.\n","validation":"string"}]}]},"request":{"title":"Handle an Element loaderstart event","snippets":{"js":"paymentElement.on('loaderstart', function(event) {\n  // Handle loaderstart event\n});\n","es_next":"paymentElement.on('loaderstart', (event) =\u003E {\n  // Handle loaderstart event\n});\n"}},"section_tag":"element_on_loaderstart"},"display_on_load":true},"element_on_networkschange":{"title":"NetworksChange event","group_title":"The Element","group_anchor":"element","anchor":"element_on_networkschange","section_anchor":"element_events","subsection_anchors":null,"path":"/element/events/on_networkschange","gate":false,"data":{"section_type":"method","title":"NetworksChange event","deprecated":true,"description":"Triggered when there is a change to the available networks the provided card can run on.\nIf the list of available networks is still loading, an event with `networks: null` and `loading: true` is triggered.\nWhen the list of available networks loads, Stripe triggers an additional event that contains the list of these networks and shows `loading: false`.\nRefer to our [card brand choice guide](/card-brand-choice#identifying-the-available-card-networks) for further details.\n","signature":{"object_name":"element","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `networkschange`.\n","validation":"'networkschange'","required":true,"render_as_value":"'networkschange'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true}]},"types_parent":"object","types_data":{"cardElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `networkschange`.\n","validation":"'networkschange'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"loading","documentation":"`true` if the networks are loading. `false` when Stripe returns all the available networks.\n","validation":"boolean"},{"name":"networks","documentation":"All available networks for the card number provided. `null` if the networks are still loading.\n\nIf eligible for the Card Element's [Card Brand Choice](/card-brand-choice) dropdown, this\narray will be truncated to a single network so that the user is not presented with multiple\nnetwork selections.\n","validation":"stringArray | null"}]}]},"request":{"title":"Handle a card networkschange event","snippets":{"js":"cardElement.on('networkschange', function(event) {\n  if (event.networks \u0026\u0026 event.networks.length \u003E= 1) {\n    // collect card brand preference\n  }\n});\n","es_next":"cardElement.on('networkschange', (event) =\u003E {\n  if (event.networks \u0026\u0026 event.networks.length \u003E= 1) {\n    // collect card brand preference\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  loading: false,\n  networks: ['visa', 'cartes_bancaires'],\n}\n"}}},"cardNumberElement":{"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `networkschange`.\n","validation":"'networkschange'","required":true},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed an event object with the following properties:\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true,"subspec":[{"name":"loading","documentation":"`true` if the networks are loading. `false` when Stripe returns all the available networks.\n","validation":"boolean"},{"name":"networks","documentation":"All available networks for the card number provided. `null` if the networks are still loading.\n\nIf eligible for the Card Element's [Card Brand Choice](/card-brand-choice) dropdown, this\narray will be truncated to a single network so that the user is not presented with multiple\nnetwork selections.\n","validation":"stringArray | null"}]}]},"request":{"title":"Handle a cardNumber networkschange event","snippets":{"js":"cardNumberElement.on('networkschange', function(event) {\n  if (event.networks \u0026\u0026 event.networks.length \u003E= 1) {\n    // collect card brand preference\n  }\n});\n","es_next":"cardNumberElement.on('networkschange', (event) =\u003E {\n  if (event.networks \u0026\u0026 event.networks.length \u003E= 1) {\n    // collect card brand preference\n  }\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  loading: false,\n  networks: ['visa', 'cartes_bancaires'],\n}\n"}}}},"section_tag":"element_on_networkschange"},"display_on_load":true},"element_input_validation":{"title":"Input validation","group_title":"The Element","group_anchor":"element","anchor":"element_input_validation","section_anchor":"element_input_validation","subsection_anchors":null,"path":"/element/input_validation","gate":false,"data":{"section_type":"generic","title":"Input validation","description":"Stripe elements validate customer input as it is typed.\nTo help your customers catch mistakes, listen to `change` events on an `Element` and display any errors.\n","request":{"title":"Display validation errors from an Element","snippets":{"js":"cardElement.on('change', function(event) {\n  var displayError = document.getElementById('card-errors');\n  if (event.error) {\n    displayError.textContent = event.error.message;\n  } else {\n    displayError.textContent = '';\n  }\n});\n","es_next":"cardElement.on('change', ({error}) =\u003E {\n  const displayError = document.getElementById('payment-errors');\n  if (error) {\n    displayError.textContent = error.message;\n  }\n});\n"}},"section_tag":"element_input_validation"},"display_on_load":true},"element_postal_code_formatting":{"title":"Postal code formatting","group_title":"The Element","group_anchor":"element","anchor":"element_postal_code_formatting","section_anchor":"element_postal_code_formatting","subsection_anchors":null,"path":"/element/postal_code_formatting","gate":false,"data":{"section_type":"generic","title":"Postal code formatting","description":"The `card` element automatically determines your customer’s billing address country based on their card number.\nUsing this information, the postal code field validation reflects whether that country uses numeric or alphanumeric-formatted postal codes, or if the country uses postal codes at all.\nFor instance, if a U.S. card is entered, the postal code field only accepts a five-digit numeric value.\nIf it’s a UK card, an alphanumeric value can be provided instead.\n\nMany of our test cards have a U.S. billing address country.\nWhen using these to test your payment form, you must also use a five-digit U.S. ZIP code (e.g., 12345).\nTo test elements with other postal code formats, use our [international test card numbers](/testing#international-cards).\n","section_tag":"element_postal_code_formatting"},"display_on_load":true},"embedded_checkout_intro":{"title":"Checkout","group_title":"Checkout","group_anchor":"embedded_checkout","anchor":"embedded_checkout_intro","section_anchor":"embedded_checkout_intro","subsection_anchors":null,"path":"/embedded_checkout","gate":false,"data":{"section_type":"generic","title":"Checkout","description":"[Checkout](/payments/checkout) is a low-code payment integration\nthat creates a customizable payment form so you can quickly collect\npayments on desktop and mobile devices.\n","section_tag":"embedded_checkout_intro"},"display_on_load":true},"embedded_checkout_init":{"title":"Initialize embedded Checkout","group_title":"Checkout","group_anchor":"embedded_checkout","anchor":"embedded_checkout_init","section_anchor":"embedded_checkout_init","subsection_anchors":null,"path":"/embedded_checkout/init","gate":false,"data":{"section_type":"method","title":"Initialize embedded Checkout","description":"This method initializes embedded Checkout.\n","signature":{"object_name":"stripe","method_name":"initEmbeddedCheckout","args":[{"name":"options","required":true,"expanded":true,"validation":"object","documentation":"Embedded Checkout initialization options.\n","subspec":[{"name":"fetchClientSecret","documentation":"A callback function `fetchClientSecret() =\u003E Promise\u003Cstring\u003E` that resolves with the [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) for the [Checkout Session](docs/api/checkout/sessions/object).\n","validation":"function","required":true,"requirement_text":"Required"},{"name":"clientSecret (deprecated)","documentation":"_This param has been deprecated in favor of the `fetchClientSecret` param, which offers a faster loading experience._\n\nThe [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) for the [Checkout Session](docs/api/checkout/sessions/object).\n","validation":"string","required":true,"requirement_text":"Required"},{"name":"onComplete","documentation":"An optional callback function `onComplete() =\u003E void` that is called on completion for Checkout Sessions with `redirect_on_completion: if_required`.\n","validation":"function","required":false}]}]},"table_content":{"items":[{"name":"options","required":true,"expanded":true,"validation":"object","documentation":"Embedded Checkout initialization options.\n","subspec":[{"name":"fetchClientSecret","documentation":"A callback function `fetchClientSecret() =\u003E Promise\u003Cstring\u003E` that resolves with the [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) for the [Checkout Session](docs/api/checkout/sessions/object).\n","validation":"function","required":true,"requirement_text":"Required"},{"name":"clientSecret (deprecated)","documentation":"_This param has been deprecated in favor of the `fetchClientSecret` param, which offers a faster loading experience._\n\nThe [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) for the [Checkout Session](docs/api/checkout/sessions/object).\n","validation":"string","required":true,"requirement_text":"Required"},{"name":"onComplete","documentation":"An optional callback function `onComplete() =\u003E void` that is called on completion for Checkout Sessions with `redirect_on_completion: if_required`.\n","validation":"function","required":false}]}]},"request":{"title":"Initialize embedded Checkout","snippets":{"es_next":"const fetchClientSecret = async () =\u003E {\n  const clientSecret = await createCheckoutSession();\n  return clientSecret;\n};\n\nconst checkout = await stripe.initEmbeddedCheckout({\n  fetchClientSecret,\n});\n"}},"returns":"This method returns a `Promise` which resolves with an embedded Checkout instance.\n","section_tag":"embedded_checkout_init"},"display_on_load":true},"embedded_checkout_mount":{"title":"Mount embedded Checkout","group_title":"Checkout","group_anchor":"embedded_checkout","anchor":"embedded_checkout_mount","section_anchor":"embedded_checkout_mount","subsection_anchors":null,"path":"/embedded_checkout/mount","gate":false,"data":{"section_type":"method","title":"Mount embedded Checkout","description":"The `checkout.mount` method attaches Checkout to the DOM.\n`checkout.mount` accepts either a CSS Selector (e.g., `'#checkout'`) or a DOM element.\n\nYou need to create a container DOM element to mount Checkout.\n","signature":{"object_name":"checkout","method_name":"mount","args":[{"name":"domElement","documentation":"The CSS selector or DOM element where Checkout will be mounted.\n","validation":"string | DOM element","required":true}]},"table_content":{"items":[{"name":"domElement","documentation":"The CSS selector or DOM element where Checkout will be mounted.\n","validation":"string | DOM element","required":true}]},"request":{"title":"Mount embedded Checkout","snippets":{"html":"\u003Cdiv id=\"checkout\"\u003E\n  \u003C!-- Checkout will be inserted here. --\u003E\n\u003C/div\u003E\n\n\u003Cscript\u003E\n  checkout.mount('#checkout');\n\u003C/script\u003E\n"}},"section_tag":"embedded_checkout_mount"},"display_on_load":true},"embedded_checkout_unmount":{"title":"Unmount embedded Checkout","group_title":"Checkout","group_anchor":"embedded_checkout","anchor":"embedded_checkout_unmount","section_anchor":"embedded_checkout_unmount","subsection_anchors":null,"path":"/embedded_checkout/unmount","gate":false,"data":{"section_type":"method","title":"Unmount embedded Checkout","description":"Unmounts Checkout from the DOM. Call `checkout.mount` to reattach it to the DOM.\n","signature":{"object_name":"checkout","method_name":"unmount"},"request":{"title":"Unmount embedded Checkout","snippets":{"es_next":"checkout.unmount();\n"}},"section_tag":"embedded_checkout_unmount"},"display_on_load":true},"embedded_checkout_destroy":{"title":"Destroy embedded Checkout","group_title":"Checkout","group_anchor":"embedded_checkout","anchor":"embedded_checkout_destroy","section_anchor":"embedded_checkout_destroy","subsection_anchors":null,"path":"/embedded_checkout/destroy","gate":false,"data":{"section_type":"method","title":"Destroy embedded Checkout","description":"Removes Checkout from the DOM and destroys it. Once destroyed, an embedded\nCheckout instance cannot be reattached to the DOM.\n\nCall `checkout.initEmbeddedCheckout` to create a new embedded Checkout instance\nafter unmounting the previous instance from the DOM.\n","signature":{"object_name":"checkout","method_name":"destroy"},"request":{"title":"Destroy embedded Checkout","snippets":{"es_next":"checkout.destroy();\n"}},"section_tag":"embedded_checkout_destroy"},"display_on_load":true},"custom_checkout_intro":{"title":"Introduction","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_intro","section_anchor":"custom_checkout_intro","subsection_anchors":null,"path":"/custom_checkout","gate":false,"data":{"section_type":"generic","title":"Custom Checkout","description":"Build a checkout page online using React, Stripe Elements and Custom Checkout.\n\nFor step-by-step instructions on using Elements with Custom Checkout, see the [build a checkout page guide](/checkout/custom-checkout).\n\nThe following Stripe.js methods are available to use as part of your integration.\n","section_tag":"custom_checkout_intro"},"display_on_load":true},"custom_checkout_init":{"title":"Initialize Custom Checkout","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_init","section_anchor":"custom_checkout_init","subsection_anchors":null,"path":"/custom_checkout/init","gate":false,"data":{"section_type":"method","title":"Initialize Custom Checkout","description":"This method initializes Custom Checkout.\n","signature":{"object_name":"stripe","method_name":"initCustomCheckout","args":[{"name":"options","documentation":"Custom Checkout initialization options.\n","required":false,"validation":"object","expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) for the [Checkout Session](/api/checkout/sessions/object).\n","validation":"string","required":true,"requirement_text":"Required"},{"name":"elementsOptions","documentation":"A set of options to configure Elements created with Custom Checkout.\n","validation":"object","required":false,"subspec":[{"name":"appearance","documentation":"Match the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Display skeleton loader UI while waiting for Elements to fully load after they're mounted.\nDefault is `'auto'` (Stripe determines whether or not to show a loader UI).\n","validation":"'auto' | 'always' | 'never'","required":false},{"name":"fonts","documentation":"An array of custom fonts that elements created from the `Elements` object can use. You can specify fonts as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false}]}]}]},"table_content":{"items":[{"name":"options","documentation":"Custom Checkout initialization options.\n","required":false,"validation":"object","expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) for the [Checkout Session](/api/checkout/sessions/object).\n","validation":"string","required":true,"requirement_text":"Required"},{"name":"elementsOptions","documentation":"A set of options to configure Elements created with Custom Checkout.\n","validation":"object","required":false,"subspec":[{"name":"appearance","documentation":"Match the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Display skeleton loader UI while waiting for Elements to fully load after they're mounted.\nDefault is `'auto'` (Stripe determines whether or not to show a loader UI).\n","validation":"'auto' | 'always' | 'never'","required":false},{"name":"fonts","documentation":"An array of custom fonts that elements created from the `Elements` object can use. You can specify fonts as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false}]}]}]},"request":{"title":"Initialize Custom Checkout","snippets":{"js":"stripe.initCustomCheckout({\n  clientSecret: 'CLIENT_SECRET',\n}).then(function (checkout) {\n  // Use `checkout` to build your checkout page\n});\n","es_next":"stripe.initCustomCheckout({\n  clientSecret: 'CLIENT_SECRET',\n}).then((checkout) =\u003E {\n  // Use `checkout` to build your checkout page\n});\n"}},"returns":"This method returns a `Promise` that resolves with a [Custom Checkout](/js/custom_checkout/checkout_object) instance.\n","section_tag":"custom_checkout_init"},"display_on_load":true},"custom_checkout_checkout_object":{"title":"The Checkout object","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_checkout_object","section_anchor":"custom_checkout_checkout_object","subsection_anchors":["custom_checkout_session","custom_checkout_session_apply_promotion_code","custom_checkout_session_remove_promotion_code","custom_checkout_session_update_shipping_address","custom_checkout_session_update_billing_address","custom_checkout_session_update_email","custom_checkout_session_update_phone_number","custom_checkout_session_update_line_item_quantity","custom_checkout_session_update_shipping_option","custom_checkout_session_confirm"],"path":"/custom_checkout/checkout_object","gate":false,"data":{"section_type":"generic","title":"The Checkout object","description":"Use a `Checkout` instance to read and manipulate [Checkout\nSessions](/api/checkout/sessions) from your front end.\n","section_tag":"custom_checkout_checkout_object"},"display_on_load":true},"custom_checkout_session":{"title":"Read session data","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/session","gate":false,"data":{"section_type":"method","title":"Read session data","description":"This method returns an object that contains data about the Checkout Session.\n","signature":{"object_name":"checkout","method_name":"session","args":[]},"request":{"title":"Read session data","snippets":{"js":"stripe.initCustomCheckout({\n  clientSecret: 'CLIENT_SECRET',\n}).then(function (checkout) {\n  var session = checkout.session();\n});\n","es_next":"stripe.initCustomCheckout({\n  clientSecret: 'CLIENT_SECRET',\n}).then((checkout) =\u003E {\n  const session = checkout.session();\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout [session](/js/custom_checkout/session_object) instance.\n","section_tag":"custom_checkout_session"},"display_on_load":true},"custom_checkout_session_apply_promotion_code":{"title":"Apply a promotion code","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_apply_promotion_code","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/apply_promotion_code","gate":false,"data":{"section_type":"method","title":"Apply a promotion code","description":"Use this method to apply a promotion code that your customer enters.","signature":{"object_name":"checkout","method_name":"applyPromotionCode","args":[{"name":"promotionCode","documentation":"The promotion code to apply to the Checkout Session.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"promotionCode","documentation":"The promotion code to apply to the Checkout Session.\n","validation":"string","required":true}]},"request":{"title":"Apply a promotion code","snippets":{"jsx":"const {applyPromotionCode} = useCustomCheckout();\napplyPromotionCode('PROMOTION_CODE');\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_apply_promotion_code"},"display_on_load":true},"custom_checkout_session_remove_promotion_code":{"title":"Remove a promotion code","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_remove_promotion_code","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/remove_promotion_code","gate":false,"data":{"section_type":"method","title":"Remove a promotion code","description":"Use this method to remove the currently applied promotion code, if applicable.","signature":{"object_name":"checkout","method_name":"removePromotionCode","args":[]},"table_content":{"items":[]},"request":{"title":"Remove a promotion code","snippets":{"jsx":"const {removePromotionCode} = useCustomCheckout();\nremovePromotionCode();\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_remove_promotion_code"},"display_on_load":true},"custom_checkout_session_update_shipping_address":{"title":"Update the customer's shipping address","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_update_shipping_address","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/update_shipping_address","gate":false,"data":{"section_type":"method","title":"Update the customer's shipping address","description":"Use this method to update the customer's shipping address.","signature":{"object_name":"checkout","method_name":"updateShippingAddress","args":[{"name":"shippingAddress","documentation":"New shipping address for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"table_content":{"items":[{"name":"shippingAddress","documentation":"New shipping address for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"request":{"title":"Update the customer's shipping address","snippets":{"jsx":"const {updateShippingAddress} = useCustomCheckout();\nupdateShippingAddress({\n  address: {\n    line1: '27 Fredrick Ave',\n    city: 'Brothers',\n    state: 'OR',\n    postal_code: '97712',\n    country: 'US',\n  }\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_update_shipping_address"},"display_on_load":true},"custom_checkout_session_update_billing_address":{"title":"Update the customer's billing address","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_update_billing_address","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/update_billing_address","gate":false,"data":{"section_type":"method","title":"Update the customer's billing address","description":"Use this method to update the customer's billing address.","signature":{"object_name":"checkout","method_name":"updateBillingAddress","args":[{"name":"billingAddress","documentation":"New billing information for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"table_content":{"items":[{"name":"billingAddress","documentation":"New billing information for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"request":{"title":"Update the customer's billing address","snippets":{"jsx":"const {updateBillingAddress} = useCustomCheckout();\nupdateBillingAddress({\n  address: {\n    line1: '27 Fredrick Ave',\n    city: 'Brothers',\n    state: 'OR',\n    postal_code: '97712',\n    country: 'US',\n  }\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_update_billing_address"},"display_on_load":true},"custom_checkout_session_update_email":{"title":"Update the customer's email address","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_update_email","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/update_email","gate":false,"data":{"section_type":"method","title":"Update the customer's email address","description":"Use this method to update the customer's email address.","signature":{"object_name":"checkout","method_name":"updateEmail","args":[{"name":"email","documentation":"The customer's email address.\n","required":true,"validation":"nullable string"}]},"table_content":{"items":[{"name":"email","documentation":"The customer's email address.\n","required":true,"validation":"nullable string"}]},"request":{"title":"Update the customer's email address","snippets":{"jsx":"const {updateEmail} = useCustomCheckout();\nupdateEmail('jenny.rosen@example.com');\n"}},"returns":null,"section_tag":"custom_checkout_session_update_email"},"display_on_load":true},"custom_checkout_session_update_phone_number":{"title":"Update the customer's phone number","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_update_phone_number","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/update_phone_number","gate":false,"data":{"section_type":"method","title":"Update the customer's phone number","description":"Use this method to update the customer's phone number.","signature":{"object_name":"checkout","method_name":"updatePhoneNumber","args":[{"name":"phoneNumber","documentation":"The customer's phone number.\n","required":true,"validation":"nullable string"}]},"table_content":{"items":[{"name":"phoneNumber","documentation":"The customer's phone number.\n","required":true,"validation":"nullable string"}]},"request":{"title":"Update the customer's phone number","snippets":{"jsx":"const {updatePhoneNumber} = useCustomCheckout();\nupdatePhoneNumber('5554242424');\n"}},"returns":null,"section_tag":"custom_checkout_session_update_phone_number"},"display_on_load":true},"custom_checkout_session_update_line_item_quantity":{"title":"Update line item quantities","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_update_line_item_quantity","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/update_line_item_quantity","gate":false,"data":{"section_type":"method","title":"Update line item quantities","description":"Use this method to change the quantity of a line item.","signature":{"object_name":"checkout","method_name":"updateLineItemQuantity","args":[{"name":"options","documentation":"Options for `updateLineItemQuantity`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"lineItem","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-lineItems-id) of the line item to update.\n","required":true,"validation":"string"},{"name":"quantity","documentation":"The new quantity of the line item.\n","required":true,"validation":"integer"}]}]},"table_content":{"items":[{"name":"options","documentation":"Options for `updateLineItemQuantity`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"lineItem","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-lineItems-id) of the line item to update.\n","required":true,"validation":"string"},{"name":"quantity","documentation":"The new quantity of the line item.\n","required":true,"validation":"integer"}]}]},"request":{"title":"Update line item quantities","snippets":{"jsx":"const {updateLineItemQuantity} = useCustomCheckout();\nupdateLineItemQuantity({\n  lineItem: 'LINE_ITEM_ID',\n  quantity: 2,\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_update_line_item_quantity"},"display_on_load":true},"custom_checkout_session_update_shipping_option":{"title":"Update shipping option","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_update_shipping_option","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/update_shipping_option","gate":false,"data":{"section_type":"method","title":"Update the selected shipping option","description":"Use this method to update the selected shipping option. See [shippingOptions](/js/custom_checkout/session_object#custom_checkout_session_object-shippingOptions) for a list of the available shipping options.","signature":{"object_name":"checkout","method_name":"updateShippingOption","args":[{"name":"shippingOption","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-shippingOptions-id) of the shipping option to select.\n","validation":"string"}]},"table_content":{"items":[{"name":"shippingOption","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-shippingOptions-id) of the shipping option to select.\n","validation":"string"}]},"request":{"title":"Update the selected shipping option","snippets":{"jsx":"const {updateShippingOption} = useCustomCheckout();\nupdateShippingOption('SHIPPING_OPTION_ID');\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_update_shipping_option"},"display_on_load":true},"custom_checkout_session_confirm":{"title":"Confirm the session","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_confirm","section_anchor":"custom_checkout_checkout_object","subsection_anchors":null,"path":"/custom_checkout/confirm","gate":false,"data":{"section_type":"method","title":"Confirm the Checkout Session","description":"Use this method to confirm the Checkout Session.","signature":{"object_name":"checkout","method_name":"confirm","args":[{"name":"options","documentation":"Options for `confirm`.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":" The URL to redirect your customer to after they\n authenticate or cancel their payment on the payment method’s app\n or site. This parameter is only required if you didn't specify the  `return_url`\nwhen creating the Checkout Session.\n","validation":"string"},{"name":"paymentMethod","documentation":"If collected previously, the ID of the PaymentMethod to confirm the CheckoutSession.\nWhen this option is provided, Custom Checkout will ignore the payment method collected by the PaymentElement\nand attempt confirmation using the provided PaymentMethod.\n","validation":"string"},{"name":"redirect","validation":"'always' | 'if_required'","documentation":"By default, `confirm` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `confirm` will only redirect if your user chooses a redirect-based payment method.\n"}]}]},"table_content":{"items":[{"name":"options","documentation":"Options for `confirm`.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":" The URL to redirect your customer to after they\n authenticate or cancel their payment on the payment method’s app\n or site. This parameter is only required if you didn't specify the  `return_url`\nwhen creating the Checkout Session.\n","validation":"string"},{"name":"paymentMethod","documentation":"If collected previously, the ID of the PaymentMethod to confirm the CheckoutSession.\nWhen this option is provided, Custom Checkout will ignore the payment method collected by the PaymentElement\nand attempt confirmation using the provided PaymentMethod.\n","validation":"string"},{"name":"redirect","validation":"'always' | 'if_required'","documentation":"By default, `confirm` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `confirm` will only redirect if your user chooses a redirect-based payment method.\n"}]}]},"request":{"title":"Confirm the Checkout Session","snippets":{"jsx":"const {confirm} = useCustomCheckout();\ncheckout.confirm({\n  return_url: 'RETURN_URL',\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_confirm"},"display_on_load":true},"custom_checkout_session_object":{"title":"The Session object","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_session_object","section_anchor":"custom_checkout_session_object","subsection_anchors":null,"path":"/custom_checkout/session_object","gate":false,"data":{"section_type":"object","title":"The Session object","description":"The Session object is a view of the [Checkout Session](/api/checkout/sessions/object)\nAPI object and represents your customer's session on your checkout page.\n\nBecause data can change over the lifecycle of a session, avoid storing\na reference to the Session object. Instead, call `session()` to\nretrieve the current value and listen to the [change event](/js/custom_checkout/change_event)\nto subscribe to updates.\n","table_content":{"items":[{"name":"currency","documentation":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in\nlowercase. Must be a [supported currency](/currencies).\n","validation":"enum"},{"name":"lineItems","expanded":true,"documentation":"A list of items the customer is purchasing.\n","validation":"object","subspec":[{"name":"id","documentation":"Unique identifier for the object.\n","validation":"string"},{"name":"amountSubtotal","documentation":"Total before any discounts or exclusive taxes are applied.\n","validation":"integer"},{"name":"amountDiscount","documentation":"Total discounted amount. A positive number reduces the amount to be paid.\n","validation":"integer"},{"name":"amountTaxInclusive","documentation":"Total amount of inclusive tax (tax that is already included in the subtotal).\n","validation":"integer"},{"name":"amountTaxExclusive","documentation":"Total amount of exclusive tax (tax that is collected in addition to the subtotal).\n","validation":"integer"},{"name":"unitAmount","documentation":"The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible.\n","validation":"number"},{"name":"description","documentation":"An arbitrary string attached to the object. Often useful for displaying to users.\n","validation":"optional string"},{"name":"quantity","documentation":"The quantity of products being purchased.\n","validation":"integer"},{"name":"discountAmounts","documentation":"The amount of discount calculated per discount for this line item.\n","validation":"array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the discount.\n","validation":"integer"},{"name":"displayName","documentation":"A user-facing description of the discount.\n","validation":"string"},{"name":"promotionCode","documentation":"The customer-facing promotion code that was used to apply this discount, if any.\n","validation":"nullable string"},{"name":"recurring","documentation":"Details of how the discount applies to recurring payments.\n","validation":"nullable object","subspec":[{"name":"type","documentation":"One of `forever` or `repeating`.\n* `forever`: Applies to all charges from a subscription with this coupon applied.\n* `repeating`: Applies to charges in the first `durationInMonths` months from a subscription with this coupon applied.\n","validation":"enum"},{"name":"durationInMonths","documentation":"If `duration` is `repeating`, the number of months the coupon applies. Null otherwise.\n","validation":"nullable integer"}]}]},{"name":"taxAmounts","documentation":"The amount of tax calculated per tax rate for this line item.\n","validation":"nullable array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the tax.\n","validation":"integer"},{"name":"inclusive","documentation":"Whether this tax amount is [inclusive or exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax).\n","validation":"boolean"},{"name":"displayName","documentation":"A user-facing description of the tax.\n","validation":"string"}]},{"name":"recurring","documentation":"The recurring components of a price such as `interval` and `intervalCount`.\n","validation":"nullable object","subspec":[{"name":"interval","documentation":"Specifies billing frequency. Either `day`, `week`, `month`, or `year`.\n","validation":"enum"},{"name":"intervalCount","documentation":"The number of intervals between subscription billings. For\nexample, `interval=month` and `intervalCount=3` bills\nevery 3 months.\n","validation":"integer"},{"name":"usageType","documentation":"One of `licensed` or `metered`. `licensed` automatically\nbills the quantity set when adding it to a subscription.\n`metered` aggregates the total usage based on usage records.\n","validation":"enum"},{"name":"isProrated","documentation":"When true, the amount to be collected today is a prorated\namount for a partial billing period, such as when using\n[billing_cycle_anchor](/api/checkout/sessions/create#create_checkout_session-subscription_data-billing_cycle_anchor).\n","validation":"boolean"}]},{"name":"adjustableQuantity","documentation":"Configuration for this item's quantity to be adjusted by the\ncustomer during checkout.\n","validation":"nullable object","subspec":[{"name":"maximum","documentation":"The maximum quantity the customer can purchase for the checkout session.\n","validation":"integer"},{"name":"minimum","documentation":"The minimum quantity the customer can purchase for the checkout session.\n","validation":"integer"}]}]},{"name":"discountAmounts","documentation":"The aggregate amounts calculated per discount for all line items.\n","validation":"array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the discount.\n","validation":"integer"},{"name":"displayName","documentation":"A user-facing description of the discount.\n","validation":"string"},{"name":"promotionCode","documentation":"The customer-facing promotion code that was used to apply this discount, if any.\n","validation":"nullable string"},{"name":"recurring","documentation":"Details of how the discount applies to recurring payments.\n","validation":"nullable object","subspec":[{"name":"type","documentation":"One of `forever` or `repeating`.\n* `forever`: Applies to all charges from a subscription with this coupon applied.\n* `repeating`: Applies to charges in the first `durationInMonths` months from a subscription with this coupon applied.\n","validation":"enum"},{"name":"durationInMonths","documentation":"If `duration` is `repeating`, the number of months the coupon applies. Null otherwise.\n","validation":"nullable integer"}]}]},{"name":"status","documentation":"Status of the Checkout Session.\n","validation":"object","subspec":[{"name":"type","documentation":"One of `open`, `expired`, or `complete`.\n* `open`: The checkout session is still in progress.\n* `expired`: The checkout session has expired. No further processing will occur.\n* `complete`: The checkout session is complete. Payment processing may still be in progress.\n","validation":"enum"},{"name":"paymentStatus","documentation":"One of `paid`, `unpaid`, or `no_payment_required`. Only present when `type=complete`.\n* `paid`: The payment funds are available in your account.\n* `unpaid`: The payment funds are not yet available in your account.\n* `no_payment_requried`: The payment is delayed to a future date, or the Checkout Session is in setup mode and doesn't require a payment at this time.\n","validation":"nullable enum"}]},{"name":"recurring","documentation":"Details about recurring payments set up by the checkout session.\n","validation":"object","subspec":[{"name":"interval","documentation":"Specifies billing frequency. Either `day`, `week`, `month`, or `year`.\n","validation":"enum"},{"name":"intervalCount","documentation":"The number of intervals between subscription billings. For\nexample, `interval=month` and `intervalCount=3` bills every 3\nmonths.\n","validation":"integer"},{"name":"dueNext","documentation":"Details about the next scheduled recurring payment.\n","validation":"object","subspec":[{"name":"amountSubtotal","documentation":"Total before any discounts or exclusive taxes are applied.\n","validation":"integer"},{"name":"amountDiscount","documentation":"Total discounted amount. A positive number reduces the amount to be paid.\n","validation":"integer"},{"name":"amountTaxInclusive","documentation":"Total amount of inclusive tax (the tax is already included in the subtotal).\n","validation":"integer"},{"name":"amountTaxExclusive","documentation":"Total amount of exclusive tax (the tax is collected in addition to the subtotal).\n","validation":"integer"},{"name":"billingCycleAnchor","documentation":"A future Unix timestamp to anchor the subscription's billing\ncycle. The anchor is the reference point that aligns future\nbilling cycle dates. If not present, the subscription starts immediately.\n","validation":"nullable integer"}]},{"name":"trial","documentation":"Details about a free trial, if there is one.\n","validation":"nullable object","subspec":[{"name":"trialEnd","documentation":"Unix timestamp representing the end of the trial period the\ncustomer will get before being charged for the first time.\n","validation":"integer"},{"name":"trialPeriodDays","documentation":"Integer representing the number of trial period days before the customer is charged for the first time.\n","validation":"integer"}]}]},{"name":"tax","documentation":"Details about the tax computation status.\n","validation":"object","subspec":[{"name":"status","documentation":"One of `ready`, `requires_shipping_address`, or `requires_billing_address`.\n* `ready`: The final tax amount is computed, and the session is ready for confirmation.\n* `requires_shipping_address`: A shipping address must be provided to calculate tax.\n* `requires_billing_address`: A billing address must be provided to calculate tax.\n","validation":"enum"}]},{"name":"taxAmounts","documentation":"The aggregate amounts calculated per tax rate for all line\nitems. This value is `null` if tax has not yet been computed,\ni.e. the customer's address has not been collected yet.\n","validation":"nullable array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the tax.\n","validation":"integer"},{"name":"inclusive","documentation":"Whether this tax amount is [inclusive or exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax).\n","validation":"boolean"},{"name":"displayName","documentation":"A user-facing description of the tax.\n","validation":"string"}]},{"name":"total","documentation":"Tax and discount details for the computed total amount. Use this\nfield to render an amount breakdown to your customer, such as in an\norder summary.\n","validation":"object","subspec":[{"name":"subtotal","documentation":"The total amount of line items, excluding tax, discounts, and shipping.\n","validation":"integer"},{"name":"taxExclusive","documentation":"The sum of all [exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax) tax amounts.\n","validation":"integer"},{"name":"taxInclusive","documentation":"The sum of all [inclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax) tax amounts.\n","validation":"integer"},{"name":"shippingRate","documentation":"The sum of all shipping amounts.\n","validation":"integer"},{"name":"discount","documentation":"The sum of all the discounts.\n","validation":"integer"},{"name":"total","documentation":"The total amount to be collected, including tax, discounts, and shipping.\n","validation":"integer"},{"name":"appliedBalance","documentation":"Total amount of [customer credit balance](/billing/customer/balance)\nto be applied to the payment.  A positive number reduces the\namount to be paid, and a negative number increases the amount to be paid.\n","validation":"integer"},{"name":"balanceAppliedToNextInvoice","documentation":"When true, no payment will be collected immediately. Instead, the\namount due will be added to the customer's next invoice. This can\nhappen when the amount due today is less than the\n[minimum chargeable amount](/currencies#minimum-and-maximum-charge-amounts).\n","validation":"boolean"}]},{"name":"billingAddress","documentation":"Billing details of the customer.\n","validation":"nullable object","subspec":[{"name":"name","documentation":"Full name.\n","validation":"nullable string"},{"name":"address","documentation":"Address.\n","validation":"nullable object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string"},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"nullable string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"nullable string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"nullable string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"nullable string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"nullable string"}]}]},{"name":"shippingAddress","documentation":"Shipping address of the customer.\n","validation":"nullable object","subspec":[{"name":"name","documentation":"Full name.\n","validation":"nullable string"},{"name":"address","documentation":"Address.\n","validation":"nullable object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string"},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"nullable string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"nullable string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"nullable string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"nullable string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"nullable string"}]}]},{"name":"email","documentation":"The customer's email address.\n","validation":"nullable string"},{"name":"phoneNumber","documentation":"The customer's phone number.\n","validation":"nullable string"},{"name":"savedPaymentMethods","documentation":"An array of payment methods attached to the customer.\n","validation":"array of objects","subspec":[{"name":"id","documentation":"ID of the PaymentMethod object\n","validation":"string"},{"name":"type","documentation":"The [type](/api/payment_methods/object#payment_method_object-type) of the PaymentMethod\n","validation":"enum"},{"name":"billingDetails","documentation":"Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n","validation":"object","subspec":[{"name":"email","documentation":"Email address.\n","validation":"nullable string"},{"name":"phone","documentation":"Billing phone number (including extension).\n","validation":"nullable string"},{"name":"name","documentation":"Full name.\n","validation":"nullable string"},{"name":"address","documentation":"Address.\n","validation":"nullable object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string"},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"nullable string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"nullable string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"nullable string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"nullable string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"nullable string"}]}]},{"name":"card","documentation":"If this is a `card` PaymentMethod, this hash contains the user's card details.\n","validation":"object","subspec":[{"name":"brand","documentation":"The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards.\nCan be american_express, cartes_bancaires, diners_club, discover, eftpos_australia, interac, jcb, mastercard, union_pay, visa,\nor other and may contain more values in the future.\n","validation":"string"},{"name":"expMonth","documentation":"Two-digit number representing the card's expiration month.\n","validation":"integer"},{"name":"expYear","documentation":"Four-digit number representing the card's expiration year.\n","validation":"integer"},{"name":"last4","documentation":"The last four digits of the card.\n","validation":"string"}]}]},{"name":"shipping","documentation":"The selected shipping option, if any.\n","validation":"nullable object","subspec":[{"name":"shippingOption","documentation":"Details of the selected shipping option.\n","validation":"object","subspec":[{"name":"id","documentation":"Unique identifier for the object.\n","validation":"string"},{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the shipping option.\n","validation":"integer"},{"name":"currency","documentation":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n","validation":"string"},{"name":"displayName","documentation":"A user-facing description of the shipping option.\n","validation":"nullable string"},{"name":"deliveryEstimate","documentation":"The estimated range for how long shipping will take.\n","validation":"nullable object","subspec":[{"name":"maximum","documentation":"The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]},{"name":"minimum","documentation":"The lower bound of the estimated range. If empty, represents no lower bound.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]}]}]},{"name":"taxAmounts","documentation":"The amount of tax calculated per tax rate for shipping costs.\n","validation":"array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the tax.\n","validation":"integer"},{"name":"inclusive","documentation":"Whether this tax amount is [inclusive or exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax).\n","validation":"boolean"},{"name":"displayName","documentation":"A user-facing description of the tax.\n","validation":"string"}]}]},{"name":"shippingOptions","documentation":"The list of shipping options that can be selected.\n","validation":"array of objects","subspec":[{"name":"id","documentation":"Unique identifier for the object.\n","validation":"string"},{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the shipping option.\n","validation":"integer"},{"name":"currency","documentation":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n","validation":"string"},{"name":"displayName","documentation":"A user-facing description of the shipping option.\n","validation":"nullable string"},{"name":"deliveryEstimate","documentation":"The estimated range for how long shipping will take.\n","validation":"nullable object","subspec":[{"name":"maximum","documentation":"The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]},{"name":"minimum","documentation":"The lower bound of the estimated range. If empty, represents no lower bound.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]}]}]},{"name":"canConfirm","documentation":"Whether the Checkout Session has collected enough data to confirm.\nUse this field to indicate to your customer if they can proceed,\nsuch as disabling the pay button. When `canConfirm` is true, read\n`confirmationRequirements` to see which pieces of data are missing.\n","validation":"boolean"},{"name":"confirmationRequirements","documentation":"A list of pieces of data that must be collected before the Checkout\nSession can be confirmed. Possible values are `phoneNumber`,\n`shippingAddress`, `billingAddress`, `paymentDetails`, and `email`.\n","validation":"array of strings"},{"name":"lastPaymentError","documentation":"The error encountered the last time the Checkout Session was confirmed.\n","validation":"nullable object","subspec":[{"name":"message","documentation":"An error message to be displayed to the customer.\n","validation":"string"}]},{"name":"livemode","documentation":"Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n","validation":"boolean"},{"name":"businessName","documentation":"The business name as configured in the Business Public Details settings of your Stripe account.\n","validation":"nullable string"},{"name":"id","documentation":"The ID of the CheckoutSession.\n","validation":"string"}]},"section_tag":"custom_checkout_session_object"},"display_on_load":true},"custom_checkout_events":{"title":"Listen to Custom Checkout events","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_events","section_anchor":"custom_checkout_events","subsection_anchors":["custom_checkout_on_change"],"path":"/custom_checkout/events","gate":false,"data":{"section_type":"generic","title":"Custom Checkout events","description":"Listen to events emitted by Custom Checkout to respond to changes caused by customer actions on your checkout page.\n","section_tag":"custom_checkout_events"},"display_on_load":true},"custom_checkout_on_change":{"title":"Change event","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_on_change","section_anchor":"custom_checkout_events","subsection_anchors":null,"path":"/custom_checkout/change_event","gate":false,"data":{"section_type":"method","title":"Change event","description":"The change event is triggered when [Checkout Session](/js/custom_checkout/session_object)\ndata changes, such as when the customer changes their shipping\naddress.  The event payload is always a [Checkout Session](/js/custom_checkout/session_object)\nobject.\n","signature":{"object_name":"checkout","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true,"render_as_value":"'change'"},{"name":"handler","documentation":"`handler(session) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed a [Checkout Session](/js/custom_checkout/session_object) object.\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `change`.\n","validation":"'change'","required":true},{"name":"handler","documentation":"`handler(session) =\u003E void` is a **callback function** that\nyou provide that will be called when the event is fired. When called\nit will be passed a [Checkout Session](/js/custom_checkout/session_object) object.\n","validation":"function","subspec_title":"handler event object properties","required":true,"expanded":true}]},"request":{"title":"Listen to change events","snippets":{"js":"checkout.on('change', function(session) {\n  // Read new data\n});\n","es_next":"checkout.on('change', (session) =\u003E {\n  // Read new data\n});\n"}},"section_tag":"custom_checkout_on_change"},"display_on_load":true},"custom_checkout_elements":{"title":"Elements methods","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_elements","section_anchor":"custom_checkout_elements","subsection_anchors":["custom_checkout_change_appearance","custom_checkout_get_element","custom_checkout_create_element"],"path":"/custom_checkout/custom_checkout_elements","gate":false,"data":{"section_type":"generic","title":"Use Elements with Custom Checkout","description":"[Stripe Elements](/payments/elements) are customizable UI\ncomponents you can use to build your checkout page.\n\nUse the [Custom Checkout](/js/custom_checkout/checkout_object)\ninstance to create and manage Elements.\n","section_tag":"custom_checkout_elements"},"display_on_load":true},"custom_checkout_change_appearance":{"title":"Update Elements appearance","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_change_appearance","section_anchor":"custom_checkout_elements","subsection_anchors":null,"path":"/custom_checkout/change_appearance","gate":false,"data":{"section_type":"method","title":"Change the visual customization of Elements using the Appearance API","description":"Change the visual customization of Elements created with Custom\nCheckout using the [Appearance API](/elements/appearance-api)\n","signature":{"object_name":"checkout","method_name":"changeAppearance","args":[{"name":"appearance","documentation":"Match the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":true}]},"table_content":{"items":[{"name":"appearance","documentation":"Match the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":true}]},"request":{"title":"Change the visual customization of Elements","snippets":{"js":"checkout.changeAppearance({\n  theme: 'night',\n  labels: 'floating',\n});\n","es_next":"checkout.changeAppearance({\n  theme: 'night',\n  labels: 'floating',\n});\n"}},"section_tag":"custom_checkout_change_appearance"},"display_on_load":true},"custom_checkout_get_element":{"title":"Get an Element","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_get_element","section_anchor":"custom_checkout_elements","subsection_anchors":null,"path":"/custom_checkout/get_element","gate":false,"data":{"section_type":"method","title":"Get an Element","description":"This method looks up a previously created Element by its type.\n","signature":{"object_name":"checkout","method_name":"getElement","args":[{"name":"type","documentation":"The type of Element to retrieve. Either `payment` or `address`.\n","validation":"object","required":true,"selectable":true},{"name":"args","render_as_value":"...args","documentation":"The type of Element to look up.\n"}]},"types_parent":"type","types_data":{"payment":{"render_as_value":"'payment'","request":{"title":"Get an Element","snippets":{"js":"var element = checkout.getElement('payment');\n","es_next":"const element = checkout.getElement('payment');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element to look up, which is `payment` in this case.\n","validation":"'payment'","required":true}]}},"address":{"render_as_value":"'address'","request":{"title":"Get an Element","snippets":{"js":"var element = checkout.getElement('address', 'shipping');\n","es_next":"const element = checkout.getElement('address', 'shipping');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element to look up, which is `address` in this case.\n","validation":"'address'","required":true},{"name":"mode","documentation":"The mode of the Address Element to look up. Either `shipping` or `billing`.\n","validation":"'shipping' | 'billing'","required":true}]}},"expressCheckout":{"render_as_value":"'expressCheckout'","request":{"title":"Get an Element","snippets":{"js":"var element = checkout.getElement('expressCheckout');\n","es_next":"const element = checkout.getElement('expressCheckoutpayment');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element to look up, which is `expressCheckout` in this case.\n","validation":"'expressCheckout'","required":true}]}}},"returns":"`checkout.getElement` returns one of the following:\n\n* An instance of an `Element` with a matching type.\n* `null`, when no `Element` with a matching type has been created.\n","section_tag":"custom_checkout_get_element"},"display_on_load":true},"custom_checkout_create_element":{"title":"Create an Element","group_title":"Custom Checkout","group_anchor":"custom_checkout","anchor":"custom_checkout_create_element","section_anchor":"custom_checkout_elements","subsection_anchors":null,"path":"/custom_checkout/create_element","gate":false,"data":{"section_type":"method","title":"Create an Element","description":"This method creates an instance of an Element.\n","signature":{"object_name":"checkout","method_name":"createElement","args":[{"name":"type","documentation":"The type of Element to retrieve. Either `payment` or `address`.\n","validation":"object","required":true,"selectable":true},{"name":"options","documentation":"Element creation options\n"}]},"types_parent":"type","types_data":{"payment":{"render_as_value":"'payment'","request":{"title":"Create an Element","snippets":{"js":"var element = checkout.createElement('payment');\n","es_next":"const element = checkout.createElement('payment');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element to look up, which is `payment` in this case.\n","validation":"'payment'","required":true},{"name":"options","documentation":"Options for creating the Payment Element.\n","validation":"object","required":true,"subspec":[{"name":"layout","validation":"'accordion' | 'tabs' | object","documentation":"Specify the layout for the Payment Element. If you only pass a layout type (`'accordion'` or `‘tabs’`) without any additional parameters, the Payment Element renders using that layout and the default values associated with it.\n\nAn object can also be passed to specify the layout with additional configuration.\n","expanded":false,"subspec":[{"name":"type","validation":"'accordion' | 'tabs'","required":true,"documentation":"Defines the layout to render the Payment Element.\n"},{"name":"defaultCollapsed","validation":"boolean","documentation":"Controls if the Payment Element renders in a collapsed state (where no payment method is selected by default). When you leave this `undefined`, Stripe renders the experience that it determines will have the best conversion.\n"},{"name":"radios","validation":"boolean","documentation":"Renders each Payment Method with a radio input next to its logo. The radios visually indicate the current selection of the Payment Element.\n\n_This property is only applicable to the `accordion` layout._\n"},{"name":"spacedAccordionItems","validation":"boolean","documentation":"When `true`, the Payment Methods render as standalone buttons with space in between them.\n\n_This property is only applicable to the `accordion` layout._\n"},{"name":"visibleAccordionItemsCount","validation":"number","documentation":"Sets the max number of Payment Methods visible before using the \"More\" button to hide additional Payment Methods. Set this value to `0` to disable the \"More\" button and render all available Payment Methods. Default is `5`.\n\n_This property is only applicable to the `accordion` layout._\n"}]},{"name":"paymentMethodOrder","documentation":"By default, the Payment Element will use a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods are displayed in the Payment Element with a list of payment method types.\n\nIf the associated PaymentIntent has payment method types not specified in `paymentMethodOrder`, they will be displayed\nafter the payment methods you specify. If you specify payment method types not on the associated PaymentIntent, they will be ignored.\n","validation":"array"},{"name":"readOnly","documentation":"Applies a read-only state to the Payment Element so that payment details can’t be changed. Default is false.\n\nEnabling the `readOnly` option doesn't change the Payment Element's visual appearance. If you want to adjust the way the Payment Element looks, use the [Appearance API](/elements/appearance-api).\n","validation":"boolean"},{"name":"terms","documentation":"Control how mandates or other legal agreements are displayed in the Payment Element.\nUse `never` to never display legal agreements. The default setting is `auto`, which causes\nlegal agreements to only be shown when necessary.\n","validation":"object","subspec":[{"name":"applePay","validation":"'auto' | 'always' | 'never'"},{"name":"auBecsDebit","validation":"'auto' | 'always' | 'never'"},{"name":"bancontact","validation":"'auto' | 'always' | 'never'"},{"name":"card","validation":"'auto' | 'always' | 'never'"},{"name":"cashapp","validation":"'auto' | 'always' | 'never'"},{"name":"googlePay","validation":"'auto' | 'always' | 'never'"},{"name":"ideal","validation":"'auto' | 'always' | 'never'"},{"name":"paypal","validation":"'auto' | 'always' | 'never'"},{"name":"sepaDebit","validation":"'auto' | 'always' | 'never'"},{"name":"sofort","validation":"'auto' | 'always' | 'never'"},{"name":"usBankAccount","validation":"'auto' | 'always' | 'never'"}]}]}]}},"address":{"render_as_value":"'address'","request":{"title":"Create an Element","snippets":{"js":"// Create the Address Element in shipping mode\nvar element = checkout.createElement('address', {mode: 'shipping'});\n\n// Create the Address Element in billing mode\nvar element = checkout.createElement('address', {mode: 'billing'});\n","es_next":"// Create the Address Element in shipping mode\nconst element = checkout.createElement('address', {mode: 'shipping'});\n\n// Create the Address Element in billing mode\nconst element = checkout.createElement('address', {mode: 'billing'});\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element to look up, which is `address` in this case.\n","validation":"'address'","required":true},{"name":"options","documentation":"Options for creating the Address Element.\n","validation":"object","required":true,"subspec":[{"name":"mode","documentation":"Specify which mode you want to use Address Element for.\n\nUse `shipping` mode to collect shipping addresses and `billing` mode to collect billing addresses.\n","validation":"'shipping' | 'billing'","required":true},{"name":"contacts","validation":"array","documentation":"An array of [Contact](/js/appendix/contact_object) that can be displayed as saved addresses in the Address Element. The first contact is automatically selected.\n"},{"name":"display","validation":"object","documentation":"You can customize how certain fields are displayed.\n","expanded":true,"subspec":[{"name":"name","validation":"'full' | 'split' | 'organization'","documentation":"By default, the Address Element displays a full name field.\nSpecify 'split' to display a first name field and a last name field.\nSpecify 'organization' to display an organization field.\n"}]}]}]}},"expressCheckout":{"render_as_value":"'expressCheckout'","request":{"title":"Create an Element","snippets":{"js":"var element = checkout.createElement('expressCheckout');\n","es_next":"const element = checkout.createElement('expressCheckout');\n"}},"table_content":{"items":[{"name":"type","documentation":"The type of Element to look up, which is `expressCheckout` in this case.\n","validation":"'expressCheckout'","required":true},{"name":"options","documentation":"Options for creating the Express Checkout Element.\n","validation":"object","required":true,"subspec":[{"name":"buttonHeight","documentation":"By default, the height of the buttons are 44px.\n\nYou can override this to specify a custom button height in the range of 40px-55px.\n","validation":"number"},{"name":"buttonTheme","validation":"object","documentation":"Specify the preferred button theme to use. By default, Elements determines the themes based on the specified [appearance option](/js/elements_object/create#stripe_elements-options-appearance).\n","subspec":[{"name":"applePay","validation":"'black' | 'white' | 'white-outline'"},{"name":"googlePay","validation":"'black' | 'white'"},{"name":"paypal","validation":"'gold' | 'blue' | 'silver' | 'white' | 'black'"}]},{"name":"buttonType","validation":"object","documentation":"Specify the preferred button type to display.\n","subspec":[{"name":"applePay","validation":"'add-money' | 'book' | 'buy' | 'check-out' | 'contribute' | 'donate' | 'order' | 'plain' | 'reload' | 'rent' | 'subscribe' | 'support' | 'tip' | 'top-up'","documentation":"Default is `plain`.\n"},{"name":"googlePay","validation":"'book' | 'buy' | 'checkout' | 'donate' | 'order' | 'pay' | 'plain' | 'subscribe'","documentation":"Default is `buy`.\n"},{"name":"paypal","validation":"'paypal' | 'checkout' | 'buynow' | 'pay'","documentation":"Default is `paypal`.\n"}]},{"name":"layout","validation":"object","documentation":"Specify how the buttons are arranged in a grid-like layout in the Express Checkout Element.\nElements determines the layout by using certain factors, such as available space, number of buttons, and the defined `layout` object.\n","expanded":false,"subspec":[{"name":"maxColumns","validation":"number","documentation":"Defines the maximum number of columns the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"maxRows","validation":"number","documentation":"Defines the maximum number of rows the Express Checkout Element can use to render. Default is `0`, meaning unlimited.\n"},{"name":"overflow","validation":"'auto' | 'never'","documentation":"Specify whether or not to always hide the overflow menu or allow Elements to determine when to show the overflow menu. Default is `auto`.\nYou can't specify both `overflow: 'never'` and set `maxRows` to a number greater than 0.\n"}]},{"name":"paymentMethodOrder","documentation":"By default, the Express Checkout Element uses a dynamic ordering that optimizes payment method display for each user.\n\nYou can override the default order in which payment methods display in the Express Checkout Element with a list of payment method types.\n\nIf there are payment methods that will show that are not specified in `paymentMethodOrder`, they display after the payment methods you specify. If you specify payment methods that will not show, they are ignored.\n","validation":"array"}]}]}}},"returns":"`checkout.createElement` returns one of the following:\n\n* An instance of an `Element` with a matching type.\n* `null`, when no `Element` with a matching type has been created.\n","section_tag":"custom_checkout_create_element"},"display_on_load":true},"custom_checkout_react_intro":{"title":"Introduction","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_intro","section_anchor":"custom_checkout_react_intro","subsection_anchors":null,"path":"/custom_checkout/react","gate":false,"data":{"section_type":"generic","title":"Custom Checkout (React)","description":"Build a checkout page online using Stripe Elements and Custom Checkout.\n\nFor step-by-step instructions on using Elements with Custom Checkout, see the [build a checkout page guide](/checkout/custom-checkout?client=react).\n\nThe following components and functions are available in [react-stripe-js](https://github.com/stripe/react-stripe-js) to use as part of your integration.\n","section_tag":"custom_checkout_react_intro"},"display_on_load":true},"custom_checkout_react_custom_checkout_provider":{"title":"CustomCheckoutProvider","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_custom_checkout_provider","section_anchor":"custom_checkout_react_custom_checkout_provider","subsection_anchors":null,"path":"/custom_checkout/react/custom_checkout_provider","gate":false,"data":{"section_type":"object","title":"CustomCheckoutProvider","description":"The `CustomCheckoutProvider` component allows you to use Element components and access data from your [Checkout Session](/api/checkout/sessions/object) in any nested component. Render a `CustomCheckoutProvider` at the root of your React app so that it is available everywhere you need it.\n\nTo use `CustomCheckoutProvider`, call `loadStripe` from `@stripe/stripe-js` with your publishable key. The `loadStripe` function asynchronously loads the Stripe.js script and initializes a Stripe object. Pass the returned `Promise` to `CustomCheckoutProvider` along with the [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) of your Checkout Session.\n","table_content":{"title":"Props","items":[{"name":"stripe","documentation":"A [Stripe object](/js/initializing) or a `Promise` resolving to a Stripe object. The easiest way to initialize a Stripe object is with the [Stripe.js wrapper module](https://github.com/stripe/stripe-js/blob/master/README.md#readme). After this prop has been set, it can not be changed.\n","validation":"`Stripe` or `Promise\u003CStripe\u003E`","required":true},{"name":"options","expanded":true,"documentation":"Options for `CustomCheckoutProvider`.\n","validation":"object","required":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/checkout/sessions/object#checkout_session_object-client_secret) of the Checkout Session to use.\n","validation":"string","required":true},{"name":"elementsOptions","documentation":"A set of options to configure Elements created with Custom Checkout.\n","validation":"object","required":false,"subspec":[{"name":"appearance","documentation":"Match the design of your site with the [appearance option](/elements/appearance-api).\nThe layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n","validation":"object","required":false},{"name":"loader","documentation":"Display skeleton loader UI while waiting for Elements to fully load after they're mounted.\nDefault is `'auto'` (Stripe determines whether or not to show a loader UI).\n","validation":"'auto' | 'always' | 'never'","required":false},{"name":"fonts","documentation":"An array of custom fonts that elements created from the `Elements` object can use. You can specify fonts as [CssFontSource](#css_font_source_object) or [CustomFontSource](#custom_font_source_object) objects.\n","validation":"array","required":false}]}]}]},"request":{"title":"Mount CustomCheckoutProvider","snippets":{"JSX":"import React from 'react';\nimport {CustomCheckoutProvider} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst App = () =\u003E {\n  return (\n    \u003CCustomCheckoutProvider\n      stripe={loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx')}\n      options={{clientSecret: '...'}}\n    \u003E\n      {/* your components here */}\n    \u003C/CustomCheckoutProvider\u003E\n  )\n}\n"}},"section_tag":"custom_checkout_react_custom_checkout_provider"},"display_on_load":true},"custom_checkout_react_use_custom_checkout":{"title":"useCustomCheckout hook","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_use_custom_checkout","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":["custom_checkout_session_react_apply_promotion_code","custom_checkout_session_react_remove_promotion_code","custom_checkout_session_react_update_shipping_address","custom_checkout_session_react_update_billing_address","custom_checkout_react_update_email","custom_checkout_react_session_update_phone_number","custom_checkout_react_session_update_line_item_quantity","custom_checkout_react_session_update_shipping_option","custom_checkout_react_session_confirm"],"path":"/custom_checkout/react/use_custom_checkout","gate":false,"data":{"section_type":"object","title":"useCustomCheckout hook","description":"The `useCustomCheckout` [hook](https://react.dev/reference/react) returns an object containing Checkout Session data as well as functions to update the Checkout Session.\n","table_content":{"title":"Object properties","items":[{"name":"currency","documentation":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in\nlowercase. Must be a [supported currency](/currencies).\n","validation":"enum"},{"name":"lineItems","expanded":true,"documentation":"A list of items the customer is purchasing.\n","validation":"object","subspec":[{"name":"id","documentation":"Unique identifier for the object.\n","validation":"string"},{"name":"amountSubtotal","documentation":"Total before any discounts or exclusive taxes are applied.\n","validation":"integer"},{"name":"amountDiscount","documentation":"Total discounted amount. A positive number reduces the amount to be paid.\n","validation":"integer"},{"name":"amountTaxInclusive","documentation":"Total amount of inclusive tax (tax that is already included in the subtotal).\n","validation":"integer"},{"name":"amountTaxExclusive","documentation":"Total amount of exclusive tax (tax that is collected in addition to the subtotal).\n","validation":"integer"},{"name":"unitAmount","documentation":"The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible.\n","validation":"number"},{"name":"description","documentation":"An arbitrary string attached to the object. Often useful for displaying to users.\n","validation":"optional string"},{"name":"quantity","documentation":"The quantity of products being purchased.\n","validation":"integer"},{"name":"discountAmounts","documentation":"The amount of discount calculated per discount for this line item.\n","validation":"array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the discount.\n","validation":"integer"},{"name":"displayName","documentation":"A user-facing description of the discount.\n","validation":"string"},{"name":"promotionCode","documentation":"The customer-facing promotion code that was used to apply this discount, if any.\n","validation":"nullable string"},{"name":"recurring","documentation":"Details of how the discount applies to recurring payments.\n","validation":"nullable object","subspec":[{"name":"type","documentation":"One of `forever` or `repeating`.\n* `forever`: Applies to all charges from a subscription with this coupon applied.\n* `repeating`: Applies to charges in the first `durationInMonths` months from a subscription with this coupon applied.\n","validation":"enum"},{"name":"durationInMonths","documentation":"If `duration` is `repeating`, the number of months the coupon applies. Null otherwise.\n","validation":"nullable integer"}]}]},{"name":"taxAmounts","documentation":"The amount of tax calculated per tax rate for this line item.\n","validation":"nullable array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the tax.\n","validation":"integer"},{"name":"inclusive","documentation":"Whether this tax amount is [inclusive or exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax).\n","validation":"boolean"},{"name":"displayName","documentation":"A user-facing description of the tax.\n","validation":"string"}]},{"name":"recurring","documentation":"The recurring components of a price such as `interval` and `intervalCount`.\n","validation":"nullable object","subspec":[{"name":"interval","documentation":"Specifies billing frequency. Either `day`, `week`, `month`, or `year`.\n","validation":"enum"},{"name":"intervalCount","documentation":"The number of intervals between subscription billings. For\nexample, `interval=month` and `intervalCount=3` bills\nevery 3 months.\n","validation":"integer"},{"name":"usageType","documentation":"One of `licensed` or `metered`. `licensed` automatically\nbills the quantity set when adding it to a subscription.\n`metered` aggregates the total usage based on usage records.\n","validation":"enum"},{"name":"isProrated","documentation":"When true, the amount to be collected today is a prorated\namount for a partial billing period, such as when using\n[billing_cycle_anchor](/api/checkout/sessions/create#create_checkout_session-subscription_data-billing_cycle_anchor).\n","validation":"boolean"}]},{"name":"adjustableQuantity","documentation":"Configuration for this item's quantity to be adjusted by the\ncustomer during checkout.\n","validation":"nullable object","subspec":[{"name":"maximum","documentation":"The maximum quantity the customer can purchase for the checkout session.\n","validation":"integer"},{"name":"minimum","documentation":"The minimum quantity the customer can purchase for the checkout session.\n","validation":"integer"}]}]},{"name":"discountAmounts","documentation":"The aggregate amounts calculated per discount for all line items.\n","validation":"array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the discount.\n","validation":"integer"},{"name":"displayName","documentation":"A user-facing description of the discount.\n","validation":"string"},{"name":"promotionCode","documentation":"The customer-facing promotion code that was used to apply this discount, if any.\n","validation":"nullable string"},{"name":"recurring","documentation":"Details of how the discount applies to recurring payments.\n","validation":"nullable object","subspec":[{"name":"type","documentation":"One of `forever` or `repeating`.\n* `forever`: Applies to all charges from a subscription with this coupon applied.\n* `repeating`: Applies to charges in the first `durationInMonths` months from a subscription with this coupon applied.\n","validation":"enum"},{"name":"durationInMonths","documentation":"If `duration` is `repeating`, the number of months the coupon applies. Null otherwise.\n","validation":"nullable integer"}]}]},{"name":"status","documentation":"Status of the Checkout Session.\n","validation":"object","subspec":[{"name":"type","documentation":"One of `open`, `expired`, or `complete`.\n* `open`: The checkout session is still in progress.\n* `expired`: The checkout session has expired. No further processing will occur.\n* `complete`: The checkout session is complete. Payment processing may still be in progress.\n","validation":"enum"},{"name":"paymentStatus","documentation":"One of `paid`, `unpaid`, or `no_payment_required`. Only present when `type=complete`.\n* `paid`: The payment funds are available in your account.\n* `unpaid`: The payment funds are not yet available in your account.\n* `no_payment_requried`: The payment is delayed to a future date, or the Checkout Session is in setup mode and doesn't require a payment at this time.\n","validation":"nullable enum"}]},{"name":"recurring","documentation":"Details about recurring payments set up by the checkout session.\n","validation":"object","subspec":[{"name":"interval","documentation":"Specifies billing frequency. Either `day`, `week`, `month`, or `year`.\n","validation":"enum"},{"name":"intervalCount","documentation":"The number of intervals between subscription billings. For\nexample, `interval=month` and `intervalCount=3` bills every 3\nmonths.\n","validation":"integer"},{"name":"dueNext","documentation":"Details about the next scheduled recurring payment.\n","validation":"object","subspec":[{"name":"amountSubtotal","documentation":"Total before any discounts or exclusive taxes are applied.\n","validation":"integer"},{"name":"amountDiscount","documentation":"Total discounted amount. A positive number reduces the amount to be paid.\n","validation":"integer"},{"name":"amountTaxInclusive","documentation":"Total amount of inclusive tax (the tax is already included in the subtotal).\n","validation":"integer"},{"name":"amountTaxExclusive","documentation":"Total amount of exclusive tax (the tax is collected in addition to the subtotal).\n","validation":"integer"},{"name":"billingCycleAnchor","documentation":"A future Unix timestamp to anchor the subscription's billing\ncycle. The anchor is the reference point that aligns future\nbilling cycle dates. If not present, the subscription starts immediately.\n","validation":"nullable integer"}]},{"name":"trial","documentation":"Details about a free trial, if there is one.\n","validation":"nullable object","subspec":[{"name":"trialEnd","documentation":"Unix timestamp representing the end of the trial period the\ncustomer will get before being charged for the first time.\n","validation":"integer"},{"name":"trialPeriodDays","documentation":"Integer representing the number of trial period days before the customer is charged for the first time.\n","validation":"integer"}]}]},{"name":"tax","documentation":"Details about the tax computation status.\n","validation":"object","subspec":[{"name":"status","documentation":"One of `ready`, `requires_shipping_address`, or `requires_billing_address`.\n* `ready`: The final tax amount is computed, and the session is ready for confirmation.\n* `requires_shipping_address`: A shipping address must be provided to calculate tax.\n* `requires_billing_address`: A billing address must be provided to calculate tax.\n","validation":"enum"}]},{"name":"taxAmounts","documentation":"The aggregate amounts calculated per tax rate for all line\nitems. This value is `null` if tax has not yet been computed,\ni.e. the customer's address has not been collected yet.\n","validation":"nullable array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the tax.\n","validation":"integer"},{"name":"inclusive","documentation":"Whether this tax amount is [inclusive or exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax).\n","validation":"boolean"},{"name":"displayName","documentation":"A user-facing description of the tax.\n","validation":"string"}]},{"name":"total","documentation":"Tax and discount details for the computed total amount. Use this\nfield to render an amount breakdown to your customer, such as in an\norder summary.\n","validation":"object","subspec":[{"name":"subtotal","documentation":"The total amount of line items, excluding tax, discounts, and shipping.\n","validation":"integer"},{"name":"taxExclusive","documentation":"The sum of all [exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax) tax amounts.\n","validation":"integer"},{"name":"taxInclusive","documentation":"The sum of all [inclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax) tax amounts.\n","validation":"integer"},{"name":"shippingRate","documentation":"The sum of all shipping amounts.\n","validation":"integer"},{"name":"discount","documentation":"The sum of all the discounts.\n","validation":"integer"},{"name":"total","documentation":"The total amount to be collected, including tax, discounts, and shipping.\n","validation":"integer"},{"name":"appliedBalance","documentation":"Total amount of [customer credit balance](/billing/customer/balance)\nto be applied to the payment.  A positive number reduces the\namount to be paid, and a negative number increases the amount to be paid.\n","validation":"integer"},{"name":"balanceAppliedToNextInvoice","documentation":"When true, no payment will be collected immediately. Instead, the\namount due will be added to the customer's next invoice. This can\nhappen when the amount due today is less than the\n[minimum chargeable amount](/currencies#minimum-and-maximum-charge-amounts).\n","validation":"boolean"}]},{"name":"billingAddress","documentation":"Billing details of the customer.\n","validation":"nullable object","subspec":[{"name":"name","documentation":"Full name.\n","validation":"nullable string"},{"name":"address","documentation":"Address.\n","validation":"nullable object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string"},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"nullable string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"nullable string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"nullable string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"nullable string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"nullable string"}]}]},{"name":"shippingAddress","documentation":"Shipping address of the customer.\n","validation":"nullable object","subspec":[{"name":"name","documentation":"Full name.\n","validation":"nullable string"},{"name":"address","documentation":"Address.\n","validation":"nullable object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string"},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"nullable string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"nullable string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"nullable string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"nullable string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"nullable string"}]}]},{"name":"email","documentation":"The customer's email address.\n","validation":"nullable string"},{"name":"phoneNumber","documentation":"The customer's phone number.\n","validation":"nullable string"},{"name":"savedPaymentMethods","documentation":"An array of payment methods attached to the customer.\n","validation":"array of objects","subspec":[{"name":"id","documentation":"ID of the PaymentMethod object\n","validation":"string"},{"name":"type","documentation":"The [type](/api/payment_methods/object#payment_method_object-type) of the PaymentMethod\n","validation":"enum"},{"name":"billingDetails","documentation":"Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n","validation":"object","subspec":[{"name":"email","documentation":"Email address.\n","validation":"nullable string"},{"name":"phone","documentation":"Billing phone number (including extension).\n","validation":"nullable string"},{"name":"name","documentation":"Full name.\n","validation":"nullable string"},{"name":"address","documentation":"Address.\n","validation":"nullable object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string"},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"nullable string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"nullable string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"nullable string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"nullable string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"nullable string"}]}]},{"name":"card","documentation":"If this is a `card` PaymentMethod, this hash contains the user's card details.\n","validation":"object","subspec":[{"name":"brand","documentation":"The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards.\nCan be american_express, cartes_bancaires, diners_club, discover, eftpos_australia, interac, jcb, mastercard, union_pay, visa,\nor other and may contain more values in the future.\n","validation":"string"},{"name":"expMonth","documentation":"Two-digit number representing the card's expiration month.\n","validation":"integer"},{"name":"expYear","documentation":"Four-digit number representing the card's expiration year.\n","validation":"integer"},{"name":"last4","documentation":"The last four digits of the card.\n","validation":"string"}]}]},{"name":"shipping","documentation":"The selected shipping option, if any.\n","validation":"nullable object","subspec":[{"name":"shippingOption","documentation":"Details of the selected shipping option.\n","validation":"object","subspec":[{"name":"id","documentation":"Unique identifier for the object.\n","validation":"string"},{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the shipping option.\n","validation":"integer"},{"name":"currency","documentation":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n","validation":"string"},{"name":"displayName","documentation":"A user-facing description of the shipping option.\n","validation":"nullable string"},{"name":"deliveryEstimate","documentation":"The estimated range for how long shipping will take.\n","validation":"nullable object","subspec":[{"name":"maximum","documentation":"The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]},{"name":"minimum","documentation":"The lower bound of the estimated range. If empty, represents no lower bound.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]}]}]},{"name":"taxAmounts","documentation":"The amount of tax calculated per tax rate for shipping costs.\n","validation":"array of objects","subspec":[{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the tax.\n","validation":"integer"},{"name":"inclusive","documentation":"Whether this tax amount is [inclusive or exclusive](/tax/faq#what-is-the-difference-between-inclusive-and-exclusive-tax).\n","validation":"boolean"},{"name":"displayName","documentation":"A user-facing description of the tax.\n","validation":"string"}]}]},{"name":"shippingOptions","documentation":"The list of shipping options that can be selected.\n","validation":"array of objects","subspec":[{"name":"id","documentation":"Unique identifier for the object.\n","validation":"string"},{"name":"amount","documentation":"The amount, in cents (or local equivalent) of the shipping option.\n","validation":"integer"},{"name":"currency","documentation":"Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n","validation":"string"},{"name":"displayName","documentation":"A user-facing description of the shipping option.\n","validation":"nullable string"},{"name":"deliveryEstimate","documentation":"The estimated range for how long shipping will take.\n","validation":"nullable object","subspec":[{"name":"maximum","documentation":"The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]},{"name":"minimum","documentation":"The lower bound of the estimated range. If empty, represents no lower bound.\n","validation":"nullable object","subspec":[{"name":"unit","documentation":"A unit of time. Either `business_day`, `day`, `hour`, `week`, or `month`.\n","validation":"string"},{"name":"value","documentation":"Must be greater than 0.\n","validation":"integer"}]}]}]},{"name":"canConfirm","documentation":"Whether the Checkout Session has collected enough data to confirm.\nUse this field to indicate to your customer if they can proceed,\nsuch as disabling the pay button. When `canConfirm` is true, read\n`confirmationRequirements` to see which pieces of data are missing.\n","validation":"boolean"},{"name":"confirmationRequirements","documentation":"A list of pieces of data that must be collected before the Checkout\nSession can be confirmed. Possible values are `phoneNumber`,\n`shippingAddress`, `billingAddress`, `paymentDetails`, and `email`.\n","validation":"array of strings"},{"name":"lastPaymentError","documentation":"The error encountered the last time the Checkout Session was confirmed.\n","validation":"nullable object","subspec":[{"name":"message","documentation":"An error message to be displayed to the customer.\n","validation":"string"}]},{"name":"livemode","documentation":"Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n","validation":"boolean"},{"name":"businessName","documentation":"The business name as configured in the Business Public Details settings of your Stripe account.\n","validation":"nullable string"},{"name":"id","documentation":"The ID of the CheckoutSession.\n","validation":"string"}]},"request":{"title":"Call useCustomCheckout hook","snippets":{"JSX":"import React from 'react';\nimport {useCustomCheckout} from '@stripe/react-stripe-js';\n\nconst OrderSummary = () =\u003E {\n  const {\n    lineItems,\n    taxAmounts,\n    discountAmounts,\n    shipping,\n    total,\n  } = useCustomCheckout();\n\n  // ... your component here\n}\n\nexport default OrderSummary;\n"}},"section_tag":"custom_checkout_react_use_custom_checkout"},"display_on_load":true},"custom_checkout_session_react_apply_promotion_code":{"title":"Apply a promotion code","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_session_react_apply_promotion_code","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/apply_promotion_code","gate":false,"data":{"section_type":"method","title":"Apply a promotion code","description":"Use this method to apply a promotion code that your customer enters.","signature":{"object_name":"applyPromotionCode","args":[{"name":"promotionCode","documentation":"The promotion code to apply to the Checkout Session.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"promotionCode","documentation":"The promotion code to apply to the Checkout Session.\n","validation":"string","required":true}]},"request":{"title":"Apply a promotion code","snippets":{"jsx":"const {applyPromotionCode} = useCustomCheckout();\napplyPromotionCode('PROMOTION_CODE');\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_react_apply_promotion_code"},"display_on_load":true},"custom_checkout_session_react_remove_promotion_code":{"title":"Remove a promotion code","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_session_react_remove_promotion_code","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/remove_promotion_code","gate":false,"data":{"section_type":"method","title":"Remove a promotion code","description":"Use this method to remove the currently applied promotion code, if applicable.","signature":{"object_name":"removePromotionCode","args":[]},"table_content":{"items":[]},"request":{"title":"Remove a promotion code","snippets":{"jsx":"const {removePromotionCode} = useCustomCheckout();\nremovePromotionCode();\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_react_remove_promotion_code"},"display_on_load":true},"custom_checkout_session_react_update_shipping_address":{"title":"Update the customer's shipping address","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_session_react_update_shipping_address","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/update_shipping_address","gate":false,"data":{"section_type":"method","title":"Update the customer's shipping address","description":"Use this method to update the customer's shipping address.","signature":{"object_name":"updateShippingAddress","args":[{"name":"shippingAddress","documentation":"New shipping address for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"table_content":{"items":[{"name":"shippingAddress","documentation":"New shipping address for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"request":{"title":"Update the customer's shipping address","snippets":{"jsx":"const {updateShippingAddress} = useCustomCheckout();\nupdateShippingAddress({\n  address: {\n    line1: '27 Fredrick Ave',\n    city: 'Brothers',\n    state: 'OR',\n    postal_code: '97712',\n    country: 'US',\n  }\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_react_update_shipping_address"},"display_on_load":true},"custom_checkout_session_react_update_billing_address":{"title":"Update the customer's billing address","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_session_react_update_billing_address","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/update_billing_address","gate":false,"data":{"section_type":"method","title":"Update the customer's billing address","description":"Use this method to update the customer's billing address.","signature":{"object_name":"updateBillingAddress","args":[{"name":"billingAddress","documentation":"New billing information for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"table_content":{"items":[{"name":"billingAddress","documentation":"New billing information for the customer.\n","validation":"nullable object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"Full name.\n","validation":"optional string"},{"name":"address","documentation":"Address.\n","validation":"optional object","subspec":[{"name":"country","documentation":"Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n","validation":"string","required":true},{"name":"line1","documentation":"Address line 1 (e.g., street, PO Box, or company name).\n","validation":"optional string"},{"name":"line2","documentation":"Address line 2 (e.g., apartment, suite, unit, or building).\n","validation":"optional string"},{"name":"city","documentation":"City, district, suburb, town, or village.\n","validation":"optional string"},{"name":"postal_code","documentation":"ZIP or postal code.\n","validation":"optional string"},{"name":"state","documentation":"State, county, province, or region.\n","validation":"optional string"}]}]}]},"request":{"title":"Update the customer's billing address","snippets":{"jsx":"const {updateBillingAddress} = useCustomCheckout();\nupdateBillingAddress({\n  address: {\n    line1: '27 Fredrick Ave',\n    city: 'Brothers',\n    state: 'OR',\n    postal_code: '97712',\n    country: 'US',\n  }\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_session_react_update_billing_address"},"display_on_load":true},"custom_checkout_react_update_email":{"title":"Update the customer's email address","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_update_email","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/update_email","gate":false,"data":{"section_type":"method","title":"Update the customer's email address","description":"Use this method to update the customer's email address.","signature":{"object_name":"updateEmail","args":[{"name":"email","documentation":"The customer's email address.\n","required":true,"validation":"nullable string"}]},"table_content":{"items":[{"name":"email","documentation":"The customer's email address.\n","required":true,"validation":"nullable string"}]},"request":{"title":"Update the customer's email address","snippets":{"jsx":"const {updateEmail} = useCustomCheckout();\nupdateEmail('jenny.rosen@example.com');\n"}},"returns":null,"section_tag":"custom_checkout_react_update_email"},"display_on_load":true},"custom_checkout_react_session_update_phone_number":{"title":"Update the customer's phone number","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_session_update_phone_number","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/update_phone_number","gate":false,"data":{"section_type":"method","title":"Update the customer's phone number","description":"Use this method to update the customer's phone number.","signature":{"object_name":"updatePhoneNumber","args":[{"name":"phoneNumber","documentation":"The customer's phone number.\n","required":true,"validation":"nullable string"}]},"table_content":{"items":[{"name":"phoneNumber","documentation":"The customer's phone number.\n","required":true,"validation":"nullable string"}]},"request":{"title":"Update the customer's phone number","snippets":{"jsx":"const {updatePhoneNumber} = useCustomCheckout();\nupdatePhoneNumber('5554242424');\n"}},"returns":null,"section_tag":"custom_checkout_react_session_update_phone_number"},"display_on_load":true},"custom_checkout_react_session_update_line_item_quantity":{"title":"Update line item quantities","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_session_update_line_item_quantity","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/update_line_item_quantity","gate":false,"data":{"section_type":"method","title":"Update line item quantities","description":"Use this method to change the quantity of a line item.","signature":{"object_name":"updateLineItemQuantity","args":[{"name":"options","documentation":"Options for `updateLineItemQuantity`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"lineItem","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-lineItems-id) of the line item to update.\n","required":true,"validation":"string"},{"name":"quantity","documentation":"The new quantity of the line item.\n","required":true,"validation":"integer"}]}]},"table_content":{"items":[{"name":"options","documentation":"Options for `updateLineItemQuantity`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"lineItem","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-lineItems-id) of the line item to update.\n","required":true,"validation":"string"},{"name":"quantity","documentation":"The new quantity of the line item.\n","required":true,"validation":"integer"}]}]},"request":{"title":"Update line item quantities","snippets":{"jsx":"const {updateLineItemQuantity} = useCustomCheckout();\nupdateLineItemQuantity({\n  lineItem: 'LINE_ITEM_ID',\n  quantity: 2,\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_react_session_update_line_item_quantity"},"display_on_load":true},"custom_checkout_react_session_update_shipping_option":{"title":"Update shipping option","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_session_update_shipping_option","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/update_shipping_option","gate":false,"data":{"section_type":"method","title":"Update the selected shipping option","description":"Use this method to update the selected shipping option. See [shippingOptions](/js/custom_checkout/session_object#custom_checkout_session_object-shippingOptions) for a list of the available shipping options.","signature":{"object_name":"updateShippingOption","args":[{"name":"shippingOption","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-shippingOptions-id) of the shipping option to select.\n","validation":"string"}]},"table_content":{"items":[{"name":"shippingOption","documentation":"The [ID](/js/custom_checkout/session_object#custom_checkout_session_object-shippingOptions-id) of the shipping option to select.\n","validation":"string"}]},"request":{"title":"Update the selected shipping option","snippets":{"jsx":"const {updateShippingOption} = useCustomCheckout();\nupdateShippingOption('SHIPPING_OPTION_ID');\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_react_session_update_shipping_option"},"display_on_load":true},"custom_checkout_react_session_confirm":{"title":"Confirm the session","group_title":"Custom Checkout (React)","group_anchor":"custom_checkout_react","anchor":"custom_checkout_react_session_confirm","section_anchor":"custom_checkout_react_use_custom_checkout","subsection_anchors":null,"path":"/custom_checkout/react/confirm","gate":false,"data":{"section_type":"method","title":"Confirm the Checkout Session","description":"Use this method to confirm the Checkout Session.","signature":{"object_name":"confirm","args":[{"name":"options","documentation":"Options for `confirm`.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":" The URL to redirect your customer to after they\n authenticate or cancel their payment on the payment method’s app\n or site. This parameter is only required if you didn't specify the  `return_url`\nwhen creating the Checkout Session.\n","validation":"string"},{"name":"paymentMethod","documentation":"If collected previously, the ID of the PaymentMethod to confirm the CheckoutSession.\nWhen this option is provided, Custom Checkout will ignore the payment method collected by the PaymentElement\nand attempt confirmation using the provided PaymentMethod.\n","validation":"string"},{"name":"redirect","validation":"'always' | 'if_required'","documentation":"By default, `confirm` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `confirm` will only redirect if your user chooses a redirect-based payment method.\n"}]}]},"table_content":{"items":[{"name":"options","documentation":"Options for `confirm`.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":" The URL to redirect your customer to after they\n authenticate or cancel their payment on the payment method’s app\n or site. This parameter is only required if you didn't specify the  `return_url`\nwhen creating the Checkout Session.\n","validation":"string"},{"name":"paymentMethod","documentation":"If collected previously, the ID of the PaymentMethod to confirm the CheckoutSession.\nWhen this option is provided, Custom Checkout will ignore the payment method collected by the PaymentElement\nand attempt confirmation using the provided PaymentMethod.\n","validation":"string"},{"name":"redirect","validation":"'always' | 'if_required'","documentation":"By default, `confirm` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `confirm` will only redirect if your user chooses a redirect-based payment method.\n"}]}]},"request":{"title":"Confirm the Checkout Session","snippets":{"jsx":"const {confirm} = useCustomCheckout();\ncheckout.confirm({\n  return_url: 'RETURN_URL',\n});\n"}},"returns":"This method returns a `Promise` that resolves with a Custom Checkout\n[session](/js/custom_checkout/session_object) instance\nrepresenting the updated state.\n","section_tag":"custom_checkout_react_session_confirm"},"display_on_load":true},"payment_intents_intro":{"title":"Introduction","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"payment_intents_intro","section_anchor":"payment_intents_intro","subsection_anchors":null,"path":"/payment_intents","gate":false,"data":{"section_type":"generic","title":"Payment Intents","description":"Accept global payments online with the [Payment Intents APIs](/payments/payment-intents).\nFor step-by-step instructions on using the Payment Intents APIs, see the [accept a payment guide](/payments/accept-a-payment).\n\nThe following Stripe.js methods are available to use as part of your integration.\n","section_tag":"payment_intents_intro"},"display_on_load":true},"confirm_payment_intent":{"title":"Confirm a PaymentIntent","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"confirm_payment_intent","section_anchor":"confirm_payment_intent","subsection_anchors":null,"path":"/payment_intents/confirm_payment","gate":false,"data":{"section_type":"method","title":"Confirm a payment","description":"Use `stripe.confirmPayment` to confirm a [PaymentIntent](/api/payment_intents) using data collected\nby the [Payment Element](/js/element/payment_element), or with manually provided data via `confirmParams`.\nWhen called, `stripe.confirmPayment` will attempt to complete any [required actions](/payments/intents),\nsuch as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\nYour user will be redirected to the `return_url` you pass once the confirmation is complete.\n","signature":{"object_name":"stripe","method_name":"confirmPayment","args":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance used to create the Payment Element.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=payment). It's always required if you don't provide a `clientSecret`.\n","validation":"object","required":true,"requirement_text":"Conditionally required"},{"name":"clientSecret","documentation":"The PaymentIntent's client secret.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=payment). It's always required if you don't provide an `elements` instance containing a [client secret](/api/payment_intents/object#payment_intent_object-client_secret).\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"confirmParams","documentation":"Parameters that will be passed on to the Stripe API. Refer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"The url your customer is redirected to after they complete the payment.\n\nYou can use the following query parameters, `payment_intent` (the PaymentIntent's ID) or `payment_intent_client_secret` (the PaymentIntent's client secret), to retrieve the PaymentIntent's [status](/api/payment_intents/object#payment_intent_object-status). You can also append your own query parameters to the `return_url`, which persist through the redirect process.\n","validation":"string","required":true},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n\n**Note**: When the [Address Element](/js/element/address_element) in shipping mode is being used, shipping address details are collected from the Address Element and passed\nto the PaymentIntents [confirm endpoint](/api/payment_intents/confirm) as the [shipping](/api/payment_intents/confirm#confirm_payment_intent-shipping)\nparameter.\nYou can also include additional `shipping` fields, which will be merged with the data collected from the Element.\nValues passed here will override details collected by Elements.\n","validation":"object","badge_text":"recommended"},{"name":"confirmation_token","documentation":"If collected previously, the ID of the ConfirmationToken to use to confirm this PaymentIntent. This is mutually exclusive with the `elements` parameter.\n","validation":"string"},{"name":"payment_method","documentation":"If collected previously, the ID of the payment method to attach to this PaymentIntent. This is mutually exclusive with the `elements` parameter.\n","validation":"string"},{"name":"payment_method_data","documentation":"When you call `stripe.confirmPayment`, payment details are collected from the Element and passed to the PaymentIntents\n[confirm endpoint](/api/payment_intents/confirm) as the [payment_method_data](/api/payment_intents/confirm#confirm_payment_intent-payment_method_data)\nparameter. You can also include additional `payment_method_data` fields, which will be merged with the data collected from the Element.\n","validation":"object","subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nDetails collected by Elements will override values passed here.\nBilling fields that are omitted in the Payment Element via the `fields` option required.\n\n**Note**: When the [Address Element](/js/element/address_element) in billing mode is being used, billing address details are collected from the Address Element and passed\nto the PaymentIntents [confirm endpoint](/api/payment_intents/confirm) as the [billing_details](/api/payment_methods/create#create_payment_method-billing_details)\nparameter. The values collected from the Address Element will take precedence.\n","validation":"object"},{"name":"allow_redisplay","documentation":"Indicates whether the payment method can be displayed to the customer in subsequent checkout flows. The value passed here will override the [allow_redisplay](docs/api/payment_methods/object#payment_method_object-allow_redisplay) determined by the provided `elements` parameter.\n","validation":"'unspecified' | 'always' | 'limited'"}]},{"name":"expand","documentation":"An array of pass through [PaymentIntent](/api/payment_intents/object) expansion parameters ([learn more](/api/expanding_objects)).\n","validation":"array","required":false}]},{"name":"redirect","documentation":"By default, `stripe.confirmPayment` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `stripe.confirmPayment` will only redirect if your user chooses a redirect-based payment method.\n\n**Note**: Setting `if_required` requires that you handle successful confirmations for redirect-based and non-redirect based payment methods separately.\nWhen a non-redirect based payment method is successfully confirmed, `stripe.confirmPayment` will resolve with a `{paymentIntent}` object.\n","validation":"'always' | 'if_required'"}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance used to create the Payment Element.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=payment). It's always required if you don't provide a `clientSecret`.\n","validation":"object","required":true,"requirement_text":"Conditionally required"},{"name":"clientSecret","documentation":"The PaymentIntent's client secret.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=payment). It's always required if you don't provide an `elements` instance containing a [client secret](/api/payment_intents/object#payment_intent_object-client_secret).\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"confirmParams","documentation":"Parameters that will be passed on to the Stripe API. Refer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"The url your customer is redirected to after they complete the payment.\n\nYou can use the following query parameters, `payment_intent` (the PaymentIntent's ID) or `payment_intent_client_secret` (the PaymentIntent's client secret), to retrieve the PaymentIntent's [status](/api/payment_intents/object#payment_intent_object-status). You can also append your own query parameters to the `return_url`, which persist through the redirect process.\n","validation":"string","required":true},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n\n**Note**: When the [Address Element](/js/element/address_element) in shipping mode is being used, shipping address details are collected from the Address Element and passed\nto the PaymentIntents [confirm endpoint](/api/payment_intents/confirm) as the [shipping](/api/payment_intents/confirm#confirm_payment_intent-shipping)\nparameter.\nYou can also include additional `shipping` fields, which will be merged with the data collected from the Element.\nValues passed here will override details collected by Elements.\n","validation":"object","badge_text":"recommended"},{"name":"confirmation_token","documentation":"If collected previously, the ID of the ConfirmationToken to use to confirm this PaymentIntent. This is mutually exclusive with the `elements` parameter.\n","validation":"string"},{"name":"payment_method","documentation":"If collected previously, the ID of the payment method to attach to this PaymentIntent. This is mutually exclusive with the `elements` parameter.\n","validation":"string"},{"name":"payment_method_data","documentation":"When you call `stripe.confirmPayment`, payment details are collected from the Element and passed to the PaymentIntents\n[confirm endpoint](/api/payment_intents/confirm) as the [payment_method_data](/api/payment_intents/confirm#confirm_payment_intent-payment_method_data)\nparameter. You can also include additional `payment_method_data` fields, which will be merged with the data collected from the Element.\n","validation":"object","subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nDetails collected by Elements will override values passed here.\nBilling fields that are omitted in the Payment Element via the `fields` option required.\n\n**Note**: When the [Address Element](/js/element/address_element) in billing mode is being used, billing address details are collected from the Address Element and passed\nto the PaymentIntents [confirm endpoint](/api/payment_intents/confirm) as the [billing_details](/api/payment_methods/create#create_payment_method-billing_details)\nparameter. The values collected from the Address Element will take precedence.\n","validation":"object"},{"name":"allow_redisplay","documentation":"Indicates whether the payment method can be displayed to the customer in subsequent checkout flows. The value passed here will override the [allow_redisplay](docs/api/payment_methods/object#payment_method_object-allow_redisplay) determined by the provided `elements` parameter.\n","validation":"'unspecified' | 'always' | 'limited'"}]},{"name":"expand","documentation":"An array of pass through [PaymentIntent](/api/payment_intents/object) expansion parameters ([learn more](/api/expanding_objects)).\n","validation":"array","required":false}]},{"name":"redirect","documentation":"By default, `stripe.confirmPayment` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `stripe.confirmPayment` will only redirect if your user chooses a redirect-based payment method.\n\n**Note**: Setting `if_required` requires that you handle successful confirmations for redirect-based and non-redirect based payment methods separately.\nWhen a non-redirect based payment method is successfully confirmed, `stripe.confirmPayment` will resolve with a `{paymentIntent}` object.\n","validation":"'always' | 'if_required'"}]}]},"request":{"title":"Confirm a payment intent","snippets":{"js":"stripe.confirmPayment({\n  elements,\n  confirmParams: {\n    // Return URL where the customer should be redirected after the PaymentIntent is confirmed.\n    return_url: 'https://example.com',\n  },\n})\n.then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmPayment(\n  {\n    elements,\n    confirmParams: {\n      // Return URL where the customer should be redirected after the PaymentIntent is confirmed.\n      return_url: 'https://example.com',\n    },\n  }\n);\nif (error) {\n  // Inform the customer that there was an error.\n}\n"}},"returns":"`stripe.confirmPayment` will return a `Promise`.\nUpon a successful confirmation, your user will be redirected to the `return_url` you provide\nbefore the Promise ever resolves.\n\nIf the confirmation fails, the `Promise` will resolve with an `{error}` object that describes the failure.\nWhen the [error type](/api/errors#errors-type) is `card_error` or `validation_error`, you can display the error\nmessage in `error.message` directly to your user. An error type of `invalid_request_error` could be due to an invalid\nrequest or 3DS authentication failures.\n\nNote that for some payment methods such as iDEAL or Afterpay Clearpay, your user will first be redirected to an intermediate page to authorize the payment.\nIf they fail to authorize the payment, they will be redirected back to your `return_url` and the PaymentIntent will have a `status` of `requires_payment_method`.\nIn this case you should attempt to recollect payment from the user.\n","callout":"Note that `stripe.confirmPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","section_tag":"confirm_payment_intent"},"display_on_load":true},"confirm_payment_intent_payment_method":{"title":"Confirm a PaymentIntent by payment method","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"confirm_payment_intent_payment_method","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":["stripe_confirm_card_payment","stripe_confirm_us_bank_account_payment","stripe_confirm_acss_debit_payment","stripe_confirm_affirm_payment","stripe_confirm_afterpay_clearpay_payment","stripe_confirm_alipay_payment","stripe_confirm_au_becs_debit_payment","stripe_confirm_bancontact_payment","stripe_confirm_blik_payment","stripe_confirm_boleto_payment","stripe_confirm_customer_balance_payment","stripe_confirm_cashapp_payment","stripe_confirm_eps_payment","stripe_confirm_fpx_payment","stripe_confirm_giropay_payment","stripe_confirm_grabpay_payment","stripe_confirm_ideal_payment","stripe_confirm_klarna_payment","stripe_confirm_konbini_payment","stripe_confirm_mobilepay_payment","stripe_confirm_multibanco_payment","stripe_confirm_oxxo_payment","stripe_confirm_p24_payment","stripe_confirm_paynow_payment","stripe_confirm_paypal_payment","stripe_confirm_payto_payment","stripe_confirm_pix_payment","stripe_confirm_promptpay_payment","stripe_confirm_sepa_debit_payment","stripe_confirm_sofort_payment","stripe_confirm_twint_payment","stripe_confirm_wechat_pay_payment","stripe_confirm_zip_payment"],"path":"/payment_intents/payment_method","gate":false,"data":{"section_type":"generic","title":"Confirm a PaymentIntent by payment method","description":"Below are a number of methods used to confirm a PaymentIntent for a specific payment method type.\n","section_tag":"confirm_payment_intent_payment_method"},"display_on_load":true},"stripe_confirm_card_payment":{"title":"Confirm a card payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_card_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_card_payment","gate":false,"data":{"section_type":"method","title":"Confirm a card payment","description":"Use `stripe.confirmCardPayment` when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide and carry out 3DS or other next actions if they are required.\n\nIf you are using [Dynamic 3D Secure](/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmCardPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details during payment](/payments/save-during-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by [SCA](/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"},{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"object","expanded":false,"subspec":[{"name":"card","documentation":"Configuration for this card payment.\n","validation":"object","expanded":true,"subspec":[{"name":"cvc","documentation":"Use the provided `cardCvc` [Element](/js/element) when confirming the PaymentIntent with an existing PaymentMethod.\n","validation":"Element"},{"name":"network","documentation":"Selected network to process this PaymentIntent on. Depends on the [available networks](/card-brand-choice#identifying-the-available-card-networks) of the card attached to the PaymentIntent. Can only be set at confirm-time.\n","validation":"string"}]}]}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [handle next actions yourself](/payments/payment-intents/verifying-status#next-actions), or if you want to defer next action handling until later (e.g. for use in the [PaymentRequest API](/stripe-js/elements/payment-request-button#complete-payment-intents)).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details during payment](/payments/save-during-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by [SCA](/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"},{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"object","expanded":false,"subspec":[{"name":"card","documentation":"Configuration for this card payment.\n","validation":"object","expanded":true,"subspec":[{"name":"cvc","documentation":"Use the provided `cardCvc` [Element](/js/element) when confirming the PaymentIntent with an existing PaymentMethod.\n","validation":"Element"},{"name":"network","documentation":"Selected network to process this PaymentIntent on. Depends on the [available networks](/card-brand-choice#identifying-the-available-card-networks) of the card attached to the PaymentIntent. Can only be set at confirm-time.\n","validation":"string"}]}]}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [handle next actions yourself](/payments/payment-intents/verifying-status#next-actions), or if you want to defer next action handling until later (e.g. for use in the [PaymentRequest API](/stripe-js/elements/payment-request-button#complete-payment-intents)).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a card payment","snippets":{"js":"stripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmCardPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  },\n);\n"}},"callout":"Note that `stripe.confirmCardPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.confirmCardPayment` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThis will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers.\nYou should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n","returns":"`stripe.confirmCardPayment` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error. When the [error type](/api/errors#errors-type) is `card_error` or `validation_error`, you can display the error\nmessage in `error.message` directly to your user. Refer to the [API reference](/api#errors) for other possible errors.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Use `stripe.confirmCardPayment` with payment data from an [Element](/js/element)\nby passing a `card` or `cardNumber` Element as `payment_method[card]` in the\ndata argument.\n\nThe new `PaymentMethod` will be created with data collected by the `Element`\nand will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by a `card` or `cardNumber` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"card","documentation":"Uses the provided `card` or `cardNumber` [Element](/js/element) for confirmation.\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmCardPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmCardPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmCardPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"token","title":"with an existing token","description":"For backwards compatibility, you can convert an existing `Token` into a `PaymentMethod` with `stripe.confirmCardPayment` by passing the `Token` to `payment_method[card][token]`.\nThe newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using an existing token.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"card","documentation":"An object of card data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"token","documentation":"Converts the provided token into a `PaymentMethod` to use for confirmation.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm with existing token","snippets":{"js":"stripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: {\n        token: 'tok_visa',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmCardSetup(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      card: {\n        token: 'tok_visa',\n      },\n    },\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmCardPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmCardPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_card_payment"},"display_on_load":true},"stripe_confirm_us_bank_account_payment":{"title":"Confirm an ACH Direct Debit payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_us_bank_account_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_us_bank_account_payment","gate":false,"data":{"section_type":"method","title":"Confirm an ACH Direct Debit payment","description":"Use `stripe.confirmUsBankAccountPayment` in the [Accept a payment flow](/payments/ach-debit/accept-a-payment) for the [ACH Direct Debit](/payments/ach-debit) payment method to record the customer’s authorization for payment.\n\nWhen you confirm a [PaymentIntent](/api/payment_intents), it needs to have an attached [PaymentMethod](/api/payment_methods).\nWe suggest using `stripe.collectBankAccountForPayment`, which automatically collects bank account details and attaches a `PaymentMethod`. You may also choose to reuse an existing `PaymentMethod` or manually collect bank account details  using the `data` parameter. These use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmUsBankAccountPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]}]},"request":{"title":"Confirm an ACH Direct Debit payment","snippets":{"js":"stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}},"returns":"`stripe.confirmUsBankAccountPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successfully confirmed [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/ach-debit/accept-a-payment) for all possible errors.\n","use_cases":[{"name":"existing_payment_method","title":"with an existing PaymentMethod","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmUsBankAccountPayment`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with an existing PaymentMethod","snippets":{"js":"stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}},{"name":"attached_payment_method","title":"with an attached PaymentMethod","description":"If you have successfully called `stripe.collectBankAccountForPayment` or attached a `PaymentMethod` to this `PaymentIntent` already, then you can confirm the `PaymentIntent` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}},{"name":"self_collected_bank_account","title":"with self collected bank account information","description":"If you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` is required. Providing `email` allows your customer to receive [ACH Direct Debit mandate and microdeposit emails](/payments/ach-debit#mandate-and-microdeposit-emails).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]},{"name":"us_bank_account","documentation":"The customer's [bank account information](/api/payment_methods/create#create_payment_method-us_bank_account).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"account_number","documentation":"The customer’s bank account number.\n","validation":"string","required":true},{"name":"routing_number","documentation":"The routing number of the customer’s bank.\n","validation":"string","required":true},{"name":"account_holder_type","documentation":"Account holder type: individual or company.\n","validation":"string","required":true},{"name":"account_type","documentation":"Account type: checkings or savings. Defaults to checking if omitted.\n","validation":"string","required":false}]}]}]},"request":{"title":"Confirm with bank account information","snippets":{"js":"stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmUsBankAccountPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}}],"section_tag":"stripe_confirm_us_bank_account_payment"},"display_on_load":true},"stripe_confirm_acss_debit_payment":{"title":"Confirm an ACSS Debit payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_acss_debit_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_acss_debit_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Canadian pre-authorized debit payment","description":"Use `stripe.confirmAcssDebitPayment` in the [Accept a payment](/payments/accept-a-payment) flow for the [Canadian pre-authorized debit](/payments/acss-debit) payment method when the customer submits your payment form.\nWhen called, it will automatically load an on-page modal UI to collect bank account details and verification, accept a hosted mandate agreement, and confirm the [PaymentIntent](/api/payment_intents) when the user submits the form.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/acss-debit/accept-a-payment) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\n`stripe.confirmAcssDebitPayment` automatically creates a new `PaymentMethod` for you when your customer completes the modal UI.\nIt can also be called with an existing `PaymentMethod`, which will load the modal UI to collect a new mandate agreement.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAcssDebitPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"skipMandate","documentation":"Set this to `true` if you want to skip displaying the mandate confirmation.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"skipMandate","documentation":"Set this to `true` if you want to skip displaying the mandate confirmation.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm Canadian pre-authorized debit payment","snippets":{"js":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}},"returns":"`stripe.confirmAcssDebitPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successfully confirmed [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/acss-debit/accept-a-payment) for all possible errors.\n","callout":"Note that `stripe.confirmAcssDebitPayment` may take several seconds to complete.\nDuring that time, disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, show it to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new_payment_method","title":"with a new PaymentMethod","description":"You can pass in the customer’s billing details to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nYou are required to collect and include the customer’s name and email address. This method loads an on-page modal UI\nthat handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization for you.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with a new PaymentMethod","snippets":{"js":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}},{"name":"existing_payment_method","title":"with an existing PaymentMethod","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmAcssDebitPayment`.\nThis method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with an existing PaymentMethod","snippets":{"js":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}},{"name":"attached_payment_method","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` without passing in any additional data.\nThis method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}},{"name":"self_collected_bank_account","title":"with self collected bank account information","description":"If you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nIn this case, this method does not load the on-page modal UI, so you will need to [build your own mandate agreement page](/payments/acss-debit/custom-pad-agreement).\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]},{"name":"acss_debit","documentation":"The customer's [bank account information](/api/payment_methods/create#create_payment_method-acss_debit).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"account_number","documentation":"The customer’s bank account number.\n","validation":"string","required":true},{"name":"institution_number","documentation":"The institution number of the customer’s bank.\n","validation":"string","required":true},{"name":"transit_number","documentation":"The transit number of the customer’s bank.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with bank account information","snippets":{"js":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      acss_debit: {\n        institution_number: '000',\n        transit_number: '11000',\n        account_number: '000123456789',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      acss_debit: {\n        institution_number: '000',\n        transit_number: '11000',\n        account_number: '000123456789',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}},{"name":"existing_payment_method_skip_mandate","title":"with an existing PaymentMethod but skip mandate display","description":"If you have already created a `PaymentMethod` and built your own mandate agreement page,\nyou can reuse it by passing its `id` to `payment_method` when calling `stripe.confirmAcssDebitPayment` and skip the on-page modal UI at the same time.\n","table_content":{"title":"Data and options argument paramters","items":[{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"skipMandate","documentation":"Set to `true` to skip the on-page modal UI.\n","validation":"boolean","required":true}]}]},"request":{"title":"Confirm with an existing PaymentMethod but skip mandate display","snippets":{"js":"stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    skipMandate: true,\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on PaymentIntent's status.\n    console.log(\"PaymentIntent ID: \" + result.paymentIntent.id);\n    console.log(\"PaymentIntent status: \" + result.paymentIntent.status);\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    skipMandate: true,\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on PaymentIntent's status.\n  console.log(\"PaymentIntent ID: \" + paymentIntent.id);\n  console.log(\"PaymentIntent status: \" + paymentIntent.status);\n}\n"}}}],"section_tag":"stripe_confirm_acss_debit_payment"},"display_on_load":true},"stripe_confirm_affirm_payment":{"title":"Confirm an Affirm payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_affirm_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_affirm_payment","gate":false,"data":{"section_type":"method","title":"Confirm an Affirm payment","description":"Use `stripe.confirmAffirmPayment` in the Affirm payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAffirmPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}],"required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/affirm/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}],"required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/affirm/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an Affirm payment","snippets":{"js":"stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}},"returns":"By default, `stripe.confirmAffirmPayment` will trigger a redirect when successful.\nIf there is an error, or when handling `next_action`s manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmAffirmPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment.\n","validation":"object","badge_text":"recommended","expanded":false,"subspec":[{"name":"email","validation":"string","required":true},{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}],"required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}],"required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAffirmPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_affirm_payment"},"display_on_load":true},"stripe_confirm_afterpay_clearpay_payment":{"title":"Confirm an Afterpay Clearpay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_afterpay_clearpay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_afterpay_clearpay_payment","gate":false,"data":{"section_type":"method","title":"Confirm an Afterpay Clearpay payment","description":"Use `stripe.confirmAfterpayClearpayPayment` in the Afterpay Clearpay payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAfterpayClearpayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/afterpay-clearpay/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/afterpay-clearpay/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an Afterpay Clearpay payment","snippets":{"js":"stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}},"returns":"By default, `stripe.confirmAfterpayClearpayPayment` will trigger a redirect when successful.\nIf there is an error, or when handling `next_action`s manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmAfterpayClearpayPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"email","validation":"string","required":true},{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","badge_text":"recommended","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAfterpayClearpayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_afterpay_clearpay_payment"},"display_on_load":true},"stripe_confirm_alipay_payment":{"title":"Confirm an Alipay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_alipay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_alipay_payment","gate":false,"data":{"section_type":"method","title":"Confirm an Alipay payment","description":"Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAlipayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an Alipay payment","snippets":{"js":"stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}},"returns":"By default, `stripe.confirmAlipayPayment` will trigger a redirect when successful.\nIf there is an error, or when handling `next_action`s manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmAlipayPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"With an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"attached","title":"With an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmAlipayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_alipay_payment"},"display_on_load":true},"stripe_confirm_au_becs_debit_payment":{"title":"Confirm a BECS debit payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_au_becs_debit_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_au_becs_debit_payment","gate":false,"data":{"section_type":"method","title":"Confirm a BECS Debit payment","description":"Use `stripe.confirmAuBecsDebitPayment` in the [BECS Direct Debit Payments](/payments/au-becs-debit) with Payment Methods flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/au-becs-debit) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAuBecsDebitPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up the BECS Direct Debit account for reuse, set this\nparameter to `off_session`. BECS Direct Debit only accepts an\n`off_session` value for this parameter. If a `customer` is\nprovided on this [PaymentIntent](/api/payment_intents),\nthe [PaymentMethod](/api/payment_methods) will be attached\nto the customer when the PaymentIntent transitions to\n`processing`.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up the BECS Direct Debit account for reuse, set this\nparameter to `off_session`. BECS Direct Debit only accepts an\n`off_session` value for this parameter. If a `customer` is\nprovided on this [PaymentIntent](/api/payment_intents),\nthe [PaymentMethod](/api/payment_methods) will be attached\nto the customer when the PaymentIntent transitions to\n`processing`.\n","validation":"string"}]}]},"request":{"title":"Confirm a BECS Debit payment","snippets":{"js":"stripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmAuBecsDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  },\n);\n"}},"returns":"`stripe.confirmAuBecsDebitPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successful PaymentIntent.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"Note that `stripe.confirmAuBecsDebitPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new PaymentMethod with `stripe.confirmAuBecsDebitPayment` by passing an `auBankAccount` [Element](/js/element) to `payment_method[au_becs_debit]`.\nThe new `PaymentMethod` will be created with the data collected by the `Element` and will be used to confirm the `PaymentIntent`.\nAdditionally, to create a BECS Direct Debit `PaymentMethod`, you are required to collect and include the account holder's name and the customer's email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an `object` to confirm the payment using data collected by an `auBankAccount` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"au_becs_debit","documentation":"An `auBankAccount` Element.\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The account holder's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmAuBecsDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s BSB number and bank account number or want to collect it yourself, then you do not need to use the `auBankAccount` Element with `stripe.confirmAuBecsDebitPayment`.\nYou can pass in the customer’s bank account information directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nTo create a BECS Direct Debit `PaymentMethod`, you are required to collect and include the account holder's name and the customer's email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected without an `Element`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"au_becs_debit","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"bsb_number","documentation":"A Bank State Branch (BSB) number.\n","validation":"string","required":true},{"name":"account_number","documentation":"A bank account number.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The account holder's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: {\n        bsb_number: '000000',\n        account_number: '000123456'\n      },\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmAuBecsDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      au_becs_debit: {\n        bsb_number: '000000',\n        account_number: '000123456'\n      },\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmAuBecsDebitPayment`.\nIt will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmAuBecsDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmAuBecsDebitPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmAuBecsDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmAuBecsDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_au_becs_debit_payment"},"display_on_load":true},"stripe_confirm_bancontact_payment":{"title":"Confirm a Bancontact payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_bancontact_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_bancontact_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Bancontact payment","description":"Use `stripe.confirmBancontactPayment` in the [Bancontact Payments with Payment Methods](/payments/bancontact/accept-a-payment) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmBancontactPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/bancontact/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/bancontact/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a Bancontact payment","snippets":{"js":"stripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmBancontactPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"`stripe.confirmBancontactPayment` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmBancontactPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmBancontactPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmBancontactPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"self_collected","title":"with collected data","description":"Your customer's name is required for the Bancontact authorization to succeed.\nYou can pass in the customer’s name directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's name.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"An object detailing billing information.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email. Required when `setup_future_usage` is set to `off_session`.\n","validation":"string","required":false}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this Bancontact payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmBancontactPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmBancontactPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmBancontactPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmBancontactPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_bancontact_payment"},"display_on_load":true},"stripe_confirm_blik_payment":{"title":"Confirm a BLIK payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_blik_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_blik_payment","gate":false,"data":{"section_type":"method","title":"Confirm a BLIK payment","description":"Use `stripe.confirmBlikPayment` in the [BLIK Payments with Payment Methods](/payments/blik) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically prompt the customer to authorize the transaction.\n","signature":{"object_name":"stripe","method_name":"confirmBlikPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"required":true,"subspec":[{"name":"payment_method_options","documentation":"An object that contains transaction specific data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"code","documentation":"Your customer's 6-digit BLIK code.\n","validation":"string","expanded":true,"required":true}]},{"name":"payment_method","documentation":"Use this parameter to supply additional data relevant to the transaction, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the transaction.","validation":"object"}]}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to manually determine if the confirmation has succeeded or failed.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"required":true,"subspec":[{"name":"payment_method_options","documentation":"An object that contains transaction specific data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"code","documentation":"Your customer's 6-digit BLIK code.\n","validation":"string","expanded":true,"required":true}]},{"name":"payment_method","documentation":"Use this parameter to supply additional data relevant to the transaction, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the transaction.","validation":"object"}]}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to manually determine if the confirmation has succeeded or failed.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a BLIK payment","snippets":{"js":"stripe\n  .confirmBlikPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      blik: {},\n      billing_details: {}\n    },\n    payment_method_options: {\n      blik: {\n        code: '{CODE}'\n      }\n    }\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmBlikPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      blik: {},\n      billing_details: {}\n    },\n    payment_method_options: {\n      blik: {\n        code: '{CODE}'\n      }\n    }\n  }\n);\n"}},"returns":"By default, `stripe.confirmBlikPayment` will only return when the payment has succeeded or failed.\nIf there is an error, or when handling next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmBlikPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[],"section_tag":"stripe_confirm_blik_payment"},"display_on_load":true},"stripe_confirm_boleto_payment":{"title":"Confirm a Boleto payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_boleto_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_boleto_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Boleto payment","description":"Use `stripe.confirmBoletoPayment` in the [Boleto Payment](/payments/boleto) with Payment Methods flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/boleto) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmBoletoPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set to `false`.\nThe Boleto private beta does not handle the next actions for you automatically (e.g. display Boleto details). Please refer to our [Stripe Boleto integration guide](/payments/boleto) for more info.\n","validation":"boolean","required":true}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set to `false`.\nThe Boleto private beta does not handle the next actions for you automatically (e.g. display Boleto details). Please refer to our [Stripe Boleto integration guide](/payments/boleto) for more info.\n","validation":"boolean","required":true}]}]},"request":{"title":"Confirm a Boleto payment","snippets":{"js":"stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      boleto: {\n        tax_id: '000.000.000-00'\n      },\n      billing_details: {\n        name: 'Fulaninho de Silva',\n        email: 'fulaninho@example.com',\n        address: {\n          line1: '1234 Avenida Paulista',\n          city: 'Sao Paulo',\n          state: 'SP',\n          postal_code: '01310100',\n          country: 'BR',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      boleto: {\n        tax_id: '000.000.000-00'\n      },\n      billing_details: {\n        name: 'Fulaninho de Silva',\n        email: 'fulaninho@example.com',\n        address: {\n          line1: '1234 Avenida Paulista',\n          city: 'Sao Paulo',\n          state: 'SP',\n          postal_code: '01310100',\n          country: 'BR',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n);\n"}},"returns":"`stripe.confirmBoletoPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successful PaymentIntent.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"Note that `stripe.confirmBoletoPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"collected","title":"with collected data","description":"You can pass in the customer’s billing details to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nTo create a Boleto `PaymentMethod`, you are required to collect and include the customer’s name, email, Brazilian tax id (CPF/CNPJ) and address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"boleto","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"tax_id","documentation":"The customer's Brazilian tax id (CPF/CNPJ).\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name`, `email` and `address`.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true},{"name":"address","documentation":"The customer's address: street name, city, state and postal code\n","validation":"string","required":true,"expanded":true,"subspec":[{"name":"line1","documentation":"The customer's address line 1 (e.g. street or company name).\n","validation":"string","required":true},{"name":"line2","documentation":"The customer's address line 2 (e.g. apartment, suite, unit, or building).\n","validation":"string","required":false},{"name":"city","documentation":"The customer's address city (e.g. Sao Paulo).\n","validation":"string","required":true},{"name":"state","documentation":"The customer's address state (e.g. SP).\n","validation":"string","required":true},{"name":"postal_code","documentation":"The customer's CEP (i.e. Brazilian postal code). Must be 8 digits long.\n","validation":"string","required":true},{"name":"country","documentation":"Must be BR.\n","validation":"string","required":true}]}]}]}]},"request":{"title":"Confirm with collected data","snippets":{"js":"stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      boleto: {\n        tax_id: '000.000.000-00'\n      },\n      billing_details: {\n        name: 'Fulaninho de Silva',\n        email: 'fulaninho@example.com',\n        address: {\n          line1: '1234 Avenida Paulista',\n          city: 'Sao Paulo',\n          state: 'SP',\n          postal_code: '01310100',\n          country: 'BR',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      boleto: {\n        tax_id: '000.000.000-00'\n      },\n      billing_details: {\n        name: 'Fulaninho de Silva',\n        email: 'fulaninho@example.com',\n        address: {\n          line1: '1234 Avenida Paulista',\n          city: 'Sao Paulo',\n          state: 'SP',\n          postal_code: '01310100',\n          country: 'BR',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmBoletoPayment`.\nIt will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    handleActions: false,\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmBoletoPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {},\n  {\n    handleActions: false,\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmBoletoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {},\n  {\n    handleActions: false,\n  }\n);\n"}}}],"section_tag":"stripe_confirm_boleto_payment"},"display_on_load":true},"stripe_confirm_customer_balance_payment":{"title":"Confirm a Customer Balance payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_customer_balance_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_customer_balance_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Customer Balance payment","description":"Use `stripe.confirmCustomerBalancePayment` in the [Customer Balance](/payments/customer-balance) payment flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nRefer to our [integration guide](/payments/bank-transfers/accept-a-payment) for more details.\n\nSince the [Customer Balance](/payments/customer-balance) payment method draws from a balance, the attempt will succeed or fail depending on the current balance amount.\nTo collect more funds from the customer when the cash balance is insufficient, use the customer balance with [bank transfer funding](/payments/bank-transfers/accept-a-payment) parameters.\n\nThe confirmation attempt will finish in one of the following result states:\n1. If the customer balance is greater than or equal to the amount, the PaymentIntent response will have a `status` of `succeeded`. The `funding_type` will be ignored.\n2. If the customer balance is less than the amount, and you do not set the `funding_type`, the PaymentIntent response will have a `status` of `requires_payment_method`.\n3. If the customer balance is less than the amount, and you set the `funding_type`, the PaymentIntent response will have a `status` of `requires_action`. The `paymentIntent.next_action.display_bank_transfer_instructions` hash will contain bank transfer details for funding the [Customer Balance](/payments/customer-balance).\n","signature":{"object_name":"stripe","method_name":"confirmCustomerBalancePayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"An object specifying the `customer_balance` type.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"customer_balance","documentation":"Set to `{}`.\n","validation":"object","required":true}]},{"name":"payment_method_options","documentation":"Additional payment specific configuration options. See the [with collected data](#stripe_confirm_customer_balance_payment-collected) use case below.\n","validation":"object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set to `false`.\nThe [Customer Balance](/payments/customer-balance) does not handle the next actions for you automatically (e.g. displaying bank transfer details). To make future upgrades easier, this option is required to always be sent. Please refer to our [Stripe Customer Balance integration guide](/payments/bank-transfers) for more info.\n","validation":"boolean","required":true}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"An object specifying the `customer_balance` type.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"customer_balance","documentation":"Set to `{}`.\n","validation":"object","required":true}]},{"name":"payment_method_options","documentation":"Additional payment specific configuration options. See the [with collected data](#stripe_confirm_customer_balance_payment-collected) use case below.\n","validation":"object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set to `false`.\nThe [Customer Balance](/payments/customer-balance) does not handle the next actions for you automatically (e.g. displaying bank transfer details). To make future upgrades easier, this option is required to always be sent. Please refer to our [Stripe Customer Balance integration guide](/payments/bank-transfers) for more info.\n","validation":"boolean","required":true}]}]},"request":{"title":"Confirm a Customer Balance payment","snippets":{"js":"stripe.confirmCustomerBalancePayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      customer_balance: {},\n    }\n  },\n  {\n    handleActions: false,\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'requires_payment_method') {\n    // If `payment_method_options.funding_type` wasn't set this\n    // is where you would need to handle the insufficient customer\n    // balance state.\n  } else if (paymentIntent.status === 'requires_action') {\n    // If the current customer balance is insufficient to cover\n    // the amount, and you've passed\n    // `payment_method_options.funding_type` for funding the\n    // customer balance, you can display the bank transfer\n    // instructions to your user.\n    if (paymentIntent.next_action.type === 'display_bank_transfer_instructions') {\n      // Bank transfer details can be found under:\n      // paymentIntent.next_action.display_bank_transfer_instructions\n    }\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmCustomerBalancePayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      customer_balance: {},\n    }\n  },\n  {\n    handleActions: false,\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'requires_payment_method') {\n  // If `payment_method_options.funding_type` wasn't set this\n  // is where you would need to handle the insufficient customer\n  // balance state.\n} else if (paymentIntent.status === 'requires_action') {\n  // If the current customer balance is insufficient to cover\n  // the amount, and you've passed\n  // `payment_method_options.funding_type` for funding the\n  // customer balance, you can display the bank transfer\n  // instructions to your user.\n  if (paymentIntent.next_action.type === 'display_bank_transfer_instructions') {\n    // Bank transfer details can be found under:\n    // paymentIntent.next_action.display_bank_transfer_instructions\n  }\n}\n"}},"returns":"`stripe.confirmCustomerBalancePayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: when the [Customer Balance](/payments/customer-balance) is sufficient to pay the amount, a [PaymentIntent](/api/payment_intents) with `status` of `succeeded`.\n* `result.paymentIntent`: when the [Customer Balance](/payments/customer-balance) is insufficient to pay the amount, and `funding_type` data was provided, a [PaymentIntent](/api/payment_intents) with `status` of `requires_action`.\n* `result.paymentIntent`: when the [Customer Balance](/payments/customer-balance) is insufficient to pay the amount, and no `funding_type` data was provided, a [PaymentIntent](/api/payment_intents) with `status` of `requires_payment_method`.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"Note that `stripe.confirmCustomerBalancePayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"collected","title":"with collected data","description":"You can pass in the customer’s [bank transfer funding](/payments/bank-transfers/accept-a-payment) details to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n\nIf the [Customer Balance](/payments/customer-balance) was not enough to pay the amount, the `status` is `requires_action`. The `paymentIntent.next_action.display_bank_transfer_instructions` hash contains bank transfer details for funding the [Customer Balance](/payments/customer-balance).\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"customer_balance","documentation":"Set to `{}`.\n","validation":"object","required":true}]},{"name":"payment_method_options","documentation":"Additional payment-specific configuration options.\n","validation":"object","required":false,"expanded":true,"subspec":[{"name":"funding_type","documentation":"The funding method type to be used when there are not enough funds in the [Customer Balance](/payments/customer-balance). Permitted values include: `bank_transfer`.\n","validation":"string","required":false},{"name":"bank_transfer","documentation":"The customer's chosen bank transfer method.\n","validation":"object","required":false,"subspec":[{"name":"type","documentation":"The list of bank transfer types allowed to use for funding. Permitted values include: `us_bank_account`, `eu_bank_account`, `id_bank_account`, `gb_bank_account`, `jp_bank_account`, or `mx_bank_account`.\n","validation":"string","required":true},{"name":"eu_bank_account","documentation":"Details for the customer's EU bank account transfer.\nRequired if the type is `eu_bank_account`.\n","validation":"object","required":false,"subspec":[{"name":"country","documentation":"The desired country code of the bank account information. Permitted values include: `DE`, `ES`, `FR`, `IE`, `NL`.\n","validation":"string","required":true}]},{"name":"id_bank_account","documentation":"Details for the customer's Indonesian bank account transfer.\nRequired if the type is `id_bank_account`.\n","validation":"object","required":false,"subspec":[{"name":"bank","documentation":"Bank where the account is held. One of `bca`, `bni`.\n","validation":"string","required":true}]},{"name":"requested_address_types","documentation":"List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned. Permitted values include: `aba`, `swift`, `sort_code`, `zengin`, `iban`, `spei`, `id_bban`, or `sepa`.\n","validation":"array","required":false}]}]}]},"request":{"title":"Confirm with collected data","snippets":{"js":"stripe.confirmCustomerBalancePayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      customer_balance: {\n      },\n    },\n    payment_method_options: {\n      customer_balance: {\n        funding_type: 'bank_transfer',\n        bank_transfer: {\n          type: 'us_bank_account',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'requires_payment_method') {\n    // If `payment_method_options.funding_type` wasn't set this\n    // is where you would need to handle the insufficient customer\n    // balance state.\n  } else if (paymentIntent.status === 'requires_action') {\n    // If the current customer balance is insufficient to cover\n    // the amount, and you've passed\n    // `payment_method_options.funding_type` for funding the\n    // customer balance, you can display the bank transfer\n    // instructions to your user.\n    if (paymentIntent.next_action.type === 'display_bank_transfer_instructions') {\n      // Bank transfer details can be found under:\n      // paymentIntent.next_action.display_bank_transfer_instructions\n    }\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmCustomerBalancePayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      customer_balance: {\n      },\n    },\n    payment_method_options: {\n      customer_balance: {\n        funding_type: 'bank_transfer',\n        bank_transfer: {\n          type: 'us_bank_account',\n        },\n      },\n    },\n  },\n  {\n    handleActions: false,\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'requires_payment_method') {\n  // If `payment_method_options.funding_type` wasn't set this\n  // is where you would need to handle the insufficient customer\n  // balance state.\n} else if (paymentIntent.status === 'requires_action') {\n  // If the current customer balance is insufficient to cover\n  // the amount, and you've passed\n  // `payment_method_options.funding_type` for funding the\n  // customer balance, you can display the bank transfer\n  // instructions to your user.\n  if (paymentIntent.next_action.type === 'display_bank_transfer_instructions') {\n    // Bank transfer details can be found under:\n    // paymentIntent.next_action.display_bank_transfer_instructions\n  }\n}\n"}}}],"section_tag":"stripe_confirm_customer_balance_payment"},"display_on_load":true},"stripe_confirm_cashapp_payment":{"title":"Confirm a Cash App Pay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_cashapp_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_cashapp_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Cash App Pay payment","description":"Use `stripe.confirmCashappPayment` in the Cash App Pay payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide and handle the [NextAction](/api/payment_intents/object#payment_intent_object-next_action) for the customer to authorize the payment.\n\nWhen you confirm a [PaymentIntent](/api/payment_intents), it needs to have an attached [PaymentMethod](/api/payment_methods).\n\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmCashappPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you would like to [handle displaying the Cash App Pay QR code or handle the authorization redirect](/payments/cash-app-pay/accept-a-payment?platform=web\u0026ui=API#handle-redirect) yourself.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you would like to [handle displaying the Cash App Pay QR code or handle the authorization redirect](/payments/cash-app-pay/accept-a-payment?platform=web\u0026ui=API#handle-redirect) yourself.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a Cash App Pay payment","snippets":{"js":"stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}},"returns":"By default, `stripe.confirmCashappPayment` will display Cash App Pay QR code in desktop web app, or trigger a redirect in mobile web app. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nobject. This object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmCashappPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      type: 'cashapp',\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error, paymentIntent} = await stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      type: 'cashapp',\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"existing","title":"With an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"attached","title":"With an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmCashappPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}}],"section_tag":"stripe_confirm_cashapp_payment"},"display_on_load":true},"stripe_confirm_eps_payment":{"title":"Confirm an EPS payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_eps_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_eps_payment","gate":false,"data":{"section_type":"method","title":"Confirm an EPS payment","description":"Use `stripe.confirmEpsPayment` in the [EPS Payments with Payment Methods](/payments/eps/accept-a-payment) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmEpsPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/eps/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/eps/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an EPS payment","snippets":{"js":"stripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmEpsPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"`stripe.confirmEpsPayment` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmEpsPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmEpsPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmEpsPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"self_collected","title":"with collected data","description":"Your customer's name is required for the EPS authorization to succeed.\nYou can pass in the customer’s name directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's name.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"An object detailing billing information.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmEpsPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmEpsPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmEpsPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmEpsPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_eps_payment"},"display_on_load":true},"stripe_confirm_fpx_payment":{"title":"Confirm an FPX payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_fpx_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_fpx_payment","gate":false,"data":{"section_type":"method","title":"Confirm an FPX payment","description":"Use `stripe.confirmFpxPayment` in the [FPX payment method creation](/stripe-js/elements/fpx-bank) flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmFpxPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/fpx/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/fpx/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an FPX payment","snippets":{"js":"stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: fpxBankElement\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: fpxBankElement\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}},"returns":"By default, `stripe.confirmFpxPayment` will trigger a redirect when successful.\nIf there is an error, or when handling `next_action`s manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmFpxPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new PaymentMethod by passing an `fpxBank` [Element](/js/element) to `payment_method[fpx]`.\nThe new `PaymentMethod` will be created with the [bank code](/payments/fpx/accept-a-payment#bank-reference) collected by the `Element` and will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an `object` to confirm using data collected by an `fpxBank` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"fpx","documentation":"An `fpxBank` [Element](/js/element).\n","validation":"Element","badge_text":"recommended"}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: fpxBankElement\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: fpxBankElement\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s bank or want to collect it yourself, then you do not need to use the `fpxBank` [Element](/js/element).\nYou can pass in the customer’s [bank code](/payments/fpx/accept-a-payment#bank-reference) directly.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by an `fpxBank` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"fpx","documentation":"An object detailing the customer's FPX bank.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"bank","documentation":"The customer's [bank](/payments/fpx/accept-a-payment#bank-reference).\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmFpxPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      fpx: {\n        bank: 'ambank',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      fpx: {\n        bank: 'ambank',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmFpxPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_fpx_payment"},"display_on_load":true},"stripe_confirm_giropay_payment":{"title":"Confirm a giropay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_giropay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_giropay_payment","gate":false,"data":{"section_type":"method","title":"Confirm a giropay payment","description":"Use `stripe.confirmGiropayPayment` in the [giropay Payments with Payment Methods](/payments/giropay/accept-a-payment) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmGiropayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/fpx/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/fpx/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a giropay payment","snippets":{"js":"stripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmGiropayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"`stripe.confirmGiropayPayment` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmGiropayPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmGiropayPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmGiropayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"self_collected","title":"with collected data","description":"Your customer's name is required for the giropay authorization to succeed.\nYou can pass in the customer’s name directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's name.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"An object detailing billing information.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmGiropayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmGiropayPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmGiropayPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmGiropayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_giropay_payment"},"display_on_load":true},"stripe_confirm_grabpay_payment":{"title":"Confirm a GrabPay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_grabpay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_grabpay_payment","gate":false,"data":{"section_type":"method","title":"Confirm a GrabPay payment","description":"Use `stripe.confirmGrabPayPayment` in the [GrabPay payments with Payment Methods](/payments/grabpay)\nflow when the customer submits your payment form. When called, it will confirm the\n[PaymentIntent](/api/payment_intents), and automatically redirect the customer to\nauthorize the transaction. Once authorization is complete, the customer will be redirected\nback to your specified `return_url`.\n","signature":{"object_name":"stripe","method_name":"confirmGrabPayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret)\nof the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request. Refer to the [Payment Intents API](/api/payment_intents/confirm)\nfor a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an\nobject containing data to create a `PaymentMethod` with. See the use case sections\nbelow for details.\n","validation":"string | object"},{"name":"return_url","documentation":"The URL your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/grabpay#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret)\nof the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request. Refer to the [Payment Intents API](/api/payment_intents/confirm)\nfor a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an\nobject containing data to create a `PaymentMethod` with. See the use case sections\nbelow for details.\n","validation":"string | object"},{"name":"return_url","documentation":"The URL your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/grabpay#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a GrabPay payment","snippets":{"js":"stripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmGrabPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}},"returns":"By default, `stripe.confirmGrabPayPayment` will trigger a redirect when successful. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nobject. This object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error. Refer to the [API reference](/api#errors) for all\n  possible errors.\n","callout":"Note that `stripe.confirmGrabPayPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting\nindicator like a spinner. If you receive an error result, you should be sure to show that\nerror to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"with a new PaymentMethod","description":"You can confirm the `PaymentIntent` using `stripe.confirmGrabPayPayment` without\npassing in any additional data. This will automatically create and attach a new\n`PaymentMethod`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The URL your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with a new PaymentMethod","snippets":{"js":"stripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmGrabPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}}},{"name":"existing","title":"with an existing PaymentMethod","description":"Use `stripe.confirmGrabPayPayment` with an existing `PaymentMethod` by passing its\n`id` to `payment_method`. The `PaymentMethod` will be used to confirm the\n`PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The URL your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmGrabPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the\n    // authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, you can then\nconfirm the `PaymentIntent` using `stripe.confirmGrabPayPayment` without passing in\nany additional data.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The URL your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmGrabPayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmGrabPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}}}],"section_tag":"stripe_confirm_grabpay_payment"},"display_on_load":true},"stripe_confirm_ideal_payment":{"title":"Confirm an iDEAL payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_ideal_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_ideal_payment","gate":false,"data":{"section_type":"method","title":"Confirm an iDEAL payment","description":"Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](/payments/ideal) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmIdealPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal/accept-a-payment?platform=web#web-handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal/accept-a-payment?platform=web#web-handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an iDEAL payment","snippets":{"js":"stripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmIdealPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      ideal: idealBankElement,\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"By default, `stripe.confirmIdealPayment` will trigger a redirect when successful.\nIf there is an error, or when handling next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmIdealPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new `PaymentMethod` with `stripe.confirmIdealPayment` by passing an `idealBank` [Element](/js/element) to `payment_method[ideal]`.\nThe new `PaymentMethod` will be created with the [bank code](/payments/ideal/accept-a-payment?platform=web\u0026ui=element#bank-reference) collected by the `Element` and will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by an `idealBank` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"ideal","documentation":"An `idealBank` [Element](/js/element).\n","validation":"Element","badge_text":"recommended"},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nRequired when `setup_future_usage` is set to `off_session`.\n","validation":"object","required":false,"expanded":false,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":false},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmIdealPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      ideal: idealBankElement,\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmIdealPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmIdealPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s bank or want to collect it yourself, then you do not need to use the `idealBank` [Element](/js/element).\nYou can pass in the customer’s [bank code](/payments/ideal/accept-a-payment?platform=web\u0026ui=element#bank-reference) directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by an `idealBank` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"ideal","documentation":"An object detailing the customer's iDEAL bank.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"bank","documentation":"The customer's [bank](/payments/ideal/accept-a-payment?platform=web\u0026ui=element#bank-reference).\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nRequired when `setup_future_usage` is set to `off_session`.\n","validation":"object","required":false,"expanded":false,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":false},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this iDEAL payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: {\n        bank: 'abn_amro',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmIdealPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      ideal: {\n        bank: 'abn_amro',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmIdealPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmIdealPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmIdealPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_ideal_payment"},"display_on_load":true},"stripe_confirm_klarna_payment":{"title":"Confirm a Klarna payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_klarna_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_klarna_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Klarna payment","description":"Use `stripe.confirmKlarnaPayment` in the Klarna payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmKlarnaPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/klarna/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/klarna/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a Klarna payment","snippets":{"js":"stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}},"returns":"By default, `stripe.confirmKlarnaPayment` will trigger a redirect when successful.\nIf there is an error, or when handling `next_action`s manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmKlarnaPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        address: {\n          country: 'DE',\n        },\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        address: {\n          country: 'DE',\n        },\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"With an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"attached","title":"With an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmKlarnaPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_klarna_payment"},"display_on_load":true},"stripe_confirm_konbini_payment":{"title":"Confirm a Konbini payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_konbini_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_konbini_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Konbini payment","description":"Use `stripe.confirmKonbiniPayment` in the [Konbini](/payments/konbini) payment flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/konbini/accept-a-payment) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmKonbiniPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","validation":"object | string"},{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"Object","required":false,"expanded":false,"subspec":[{"name":"konbini","documentation":"Configuration for this Konbini payment.\n","validation":"object","expanded":true,"subspec":[{"name":"confirmation_number","documentation":"An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.\nMay not be all 0 and could be rejected in case of insufficient uniqueness. We recommend to use the customer’s phone number.\n","validation":"string","required":false}]}]}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to handle next actions yourself. Please refer to our [integration guide](/payments/konbini/accept-a-payment) for more info. Default is `true`.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","validation":"object | string"},{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"Object","required":false,"expanded":false,"subspec":[{"name":"konbini","documentation":"Configuration for this Konbini payment.\n","validation":"object","expanded":true,"subspec":[{"name":"confirmation_number","documentation":"An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.\nMay not be all 0 and could be rejected in case of insufficient uniqueness. We recommend to use the customer’s phone number.\n","validation":"string","required":false}]}]}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to handle next actions yourself. Please refer to our [integration guide](/payments/konbini/accept-a-payment) for more info. Default is `true`.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a Konbini payment","snippets":{"js":"stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '花子山田',\n        email: 'yamada.hanako@example.com',\n      },\n    },\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '花子山田',\n        email: 'yamada.hanako@example.com',\n      },\n    },\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n);\n"}},"returns":"`stripe.confirmKonbiniPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successful PaymentIntent.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"Note that `stripe.confirmKonbiniPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"collected","title":"with collected data","description":"You can pass in the customer’s billing details to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nTo create a Konbini `PaymentMethod`, you are required to collect and include the customer’s name and email.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's full name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email address.\n","validation":"string","required":true}]}]},{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"Object","required":false,"expanded":false,"subspec":[{"name":"konbini","documentation":"Configuration for this Konbini payment.\n","validation":"object","expanded":true,"subspec":[{"name":"confirmation_number","documentation":"An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.\nMay not be all 0 and could be rejected in case of insufficient uniqueness. We recommend to use the customer’s phone number.\n","validation":"string","required":false}]}]}]},"request":{"title":"Confirm with collected data","snippets":{"js":"stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '花子山田',\n        email: 'yamada.hanako@example.com',\n      },\n    },\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '花子山田',\n        email: 'yamada.hanako@example.com',\n      },\n    },\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmKonbiniPayment`.\nIt will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true},{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"Object","required":false,"expanded":false,"subspec":[{"name":"konbini","documentation":"Configuration for this Konbini payment.\n","validation":"object","expanded":true,"subspec":[{"name":"confirmation_number","documentation":"An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.\nMay not be all 0 and could be rejected in case of insufficient uniqueness. We recommend to use the customer’s phone number.\n","validation":"string","required":false}]}]}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  },\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmKonbiniPayment` without passing in any additional data.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method_options","documentation":"An object containing payment-method-specific configuration to confirm the [PaymentIntent](/api/payment_intents) with.\n","validation":"Object","required":false,"expanded":false,"subspec":[{"name":"konbini","documentation":"Configuration for this Konbini payment.\n","validation":"object","expanded":true,"subspec":[{"name":"confirmation_number","documentation":"An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.\nMay not be all 0 and could be rejected in case of insufficient uniqueness. We recommend to use the customer’s phone number.\n","validation":"string","required":false}]}]}]},"request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmKonbiniPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method_options: {\n      konbini: {\n        confirmation_number: '08012341234',\n      },\n    },\n  }\n);\n"}}}],"section_tag":"stripe_confirm_konbini_payment"},"display_on_load":true},"stripe_confirm_mobilepay_payment":{"title":"Confirm a MobilePay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_mobilepay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_mobilepay_payment","gate":false,"data":{"section_type":"method","title":"Confirm a MobilePay payment","description":"Use `stripe.confirmMobilepayPayment` in the [MobilePay Payments with Payment Methods](/payments/mobilepay) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmMobilepayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal/accept-a-payment?platform=web#web-handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal/accept-a-payment?platform=web#web-handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a MobilePay payment","snippets":{"js":"stripe\n  .confirmMobilepayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      mobilepay: {},\n    }\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmMobilepayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"By default, `stripe.confirmMobilepayPayment` will trigger a redirect when successful.\nIf there is an error, or when handling next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmMobilepayPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmMobilepayPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmMobilepayPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmMobilepayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmMobilepayPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmMobilepayPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmMobilepayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_mobilepay_payment"},"display_on_load":true},"stripe_confirm_multibanco_payment":{"title":"Confirm a Multibanco payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_multibanco_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_multibanco_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Multibanco payment","description":"Use `stripe.confirmMultibancoPayment` in the [Multibanco Payment](/payments/multibanco) with Payment Methods flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/multibanco/accept-a-payment) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmMultibancoPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to handle next actions yourself. Please refer to our [Stripe Multibanco integration guide](/payments/multibanco/accept-a-payment) for more info. Default is `true`.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to handle next actions yourself. Please refer to our [Stripe Multibanco integration guide](/payments/multibanco/accept-a-payment) for more info. Default is `true`.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a Multibanco payment","snippets":{"js":"stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n"}},"returns":"`stripe.confirmMultibancoPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successful PaymentIntent.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"`stripe.confirmMultibancoPayment` might take several seconds to complete. During that time, disable your form from being resubmitted and show a\nwaiting indicator, such as a spinner. If you receive an error, display it to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.confirmMultibancoPayment` will pop up a modal with the voucher. This modal contains all the information required\nto pay the voucher through online banking or from an ATM, such as the Multibanco entity and reference numbers, and amount.\n","use_cases":[{"name":"collected","title":"with collected data","description":"You can pass in the customer’s billing details to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nTo create a Multibanco `PaymentMethod`, you are required to collect and include the customer’s email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`email` is required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with collected data","snippets":{"js":"stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmMultibancoPayment`.\nIt will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmMultibancoPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmMultibancoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n"}}}],"section_tag":"stripe_confirm_multibanco_payment"},"display_on_load":true},"stripe_confirm_oxxo_payment":{"title":"Confirm an OXXO payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_oxxo_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_oxxo_payment","gate":false,"data":{"section_type":"method","title":"Confirm an Oxxo payment","description":"Use `stripe.confirmOxxoPayment` in the [OXXO Payment](/payments/oxxo) with Payment Methods flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/oxxo) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmOxxoPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to handle next actions yourself. Please refer to our [Stripe OXXO integration guide](/payments/oxxo) for more info. Default is `true`.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to handle next actions yourself. Please refer to our [Stripe OXXO integration guide](/payments/oxxo) for more info. Default is `true`.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm an Oxxo payment","snippets":{"js":"stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Fulano de Tal',\n        email: 'fulano@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Fulano de Tal',\n        email: 'fulano@example.com',\n      },\n    },\n  }\n);\n"}},"returns":"`stripe.confirmOxxoPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successful PaymentIntent.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"Note that `stripe.confirmOxxoPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.confirmOxxoPayment` will pop up a modal with the voucher. This modal contains all the information required\nto pay the voucher at OXXO stores, such as the amount, a reference number and corresponding barcode.\n","use_cases":[{"name":"collected","title":"with collected data","description":"You can pass in the customer’s billing details to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nTo create a OXXO `PaymentMethod`, you are required to collect and include the customer’s name and email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with collected data","snippets":{"js":"stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Fulano de Tal',\n        email: 'fulano@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Fulano de Tal',\n        email: 'fulano@example.com',\n      },\n    },\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmOxxoPayment`.\nIt will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmOxxoPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmOxxoPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n"}}}],"section_tag":"stripe_confirm_oxxo_payment"},"display_on_load":true},"stripe_confirm_p24_payment":{"title":"Confirm a Przelewy24 payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_p24_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_p24_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Przelewy24 payment","description":"Use `stripe.confirmP24Payment` in the [Przelewy24 Payments with Payment Methods](/payments/p24/accept-a-payment) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmP24Payment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/p24/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/p24/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a P24 payment","snippets":{"js":"stripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        email: 'jenny.rosen@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmP24Payment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        email: 'jenny.rosen@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"`stripe.confirmP24Payment` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmP24Payment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmP24Payment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmP24Payment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"self_collected","title":"with collected data","description":"Your customer's email address is required for the Przelewy24 authorization to succeed.\nYou can pass in the customer’s email address directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's email address.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"An object detailing billing information.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"email","documentation":"The customer's email address.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        email: 'jenny.rosen@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmP24Payment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        email: 'jenny.rosen@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmP24Payment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmP24Payment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmP24Payment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_p24_payment"},"display_on_load":true},"stripe_confirm_paynow_payment":{"title":"Confirm a PayNow payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_paynow_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_paynow_payment","gate":false,"data":{"section_type":"method","title":"Confirm a PayNow payment","description":"Use `stripe.confirmPayNowPayment` in the PayNow payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide and handle the [NextAction](/api/payment_intents/object#payment_intent_object-next_action) for the customer to authorize the payment.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmPayNowPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Default is `true`. Set this to `false` if you would like to [handle displaying the PayNow QR code yourself](/payments/paynow#confirm-payment-intent).\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Default is `true`. Set this to `false` if you would like to [handle displaying the PayNow QR code yourself](/payments/paynow#confirm-payment-intent).\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a PayNow payment","snippets":{"js":"stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}},"returns":"By default, `stripe.confirmPayNowPayment` will display the PayNow QR code overlay. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nobject. This object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPayNowPayment` may take several seconds to complete and display the QR code.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment method.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n    },\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error, paymentIntent} = await stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"existing","title":"With an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"attached","title":"With an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmPayNowPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}}],"section_tag":"stripe_confirm_paynow_payment"},"display_on_load":true},"stripe_confirm_paypal_payment":{"title":"Confirm a PayPal payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_paypal_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_paypal_payment","gate":false,"data":{"section_type":"method","title":"Confirm a PayPal payment","description":"Use `stripe.confirmPayPalPayment` in the [PayPal Payments with Payment Methods](/payments/paypal/accept-a-payment) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent`, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n","signature":{"object_name":"stripe","method_name":"confirmPayPalPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\nSee the use case sections below for details.\n","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\nSee the use case sections below for details.\n","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]}]},"request":{"title":"Confirm a PayPal payment","snippets":{"js":"stripe\n  .confirmPayPalPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmPayPalPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}},"returns":"`stripe.confirmPayPalPayment` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPayPalPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"with a new PaymentMethod","description":"You can confirm the `PaymentIntent` using `stripe.confirmPayPalPayment` without\npassing in any additional data. This will automatically create and attach a new\n`PaymentMethod`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with a new PaymentMethod","snippets":{"js":"stripe\n  .confirmPayPalPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmPayPalPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmPayPalPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmPayPalPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmPayPalPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmPayPalPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmPayPalPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmPayPalPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/checkout/complete\",\n  },\n);\n"}}}],"section_tag":"stripe_confirm_paypal_payment"},"display_on_load":true},"stripe_confirm_payto_payment":{"title":"Confirm a PayTo payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_payto_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_payto_payment","gate":false,"data":{"section_type":"method","title":"Confirm a PayTo payment","description":"Use `stripe.confirmPayToPayment` in the PayTo payment method creation flow when the customer submits your payment form.\nWhen you call the method, it confirms the [PaymentIntent](/api/payment_intents) with the `data` you provide, and sends a request to the customer to authorize the transaction.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you've already attached a `PaymentMethod`, you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmPayToPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to manually handle polling for PaymentIntent updates.\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to manually handle polling for PaymentIntent updates.\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a PayTo payment","snippets":{"js":"stripe\n  .confirmPayToPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmPayToPayment('{PAYMENT_INTENT_CLIENT_SECRET}');\n"}},"returns":"By default, `stripe.confirmPayToPayment` will poll for updates to the `PaymentIntent`.\nIf there's an error, or when handling `next_action`s manually by using the `handleActions: false` option, it returns a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPayToPayment` might take some time to complete while waiting for customers to authorize the PayTo agreement, and while waiting for funds to transfer.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"without an existing payment method","description":"If you haven't already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` is used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment. The email is required if the customer is paying with PayID.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"email","validation":"string","required":false},{"name":"name","validation":"string","required":true}]},{"name":"payto","documentation":"The [PayTo payment method details](/api/payment_methods/create#create_payment_method-payto) associated with the customer's bank account. Either `pay_id` or `account_number` and `bsb_number` must be provided.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"pay_id","validation":"string","required":false},{"name":"account_number","validation":"string","required":false},{"name":"bsb_number","validation":"string","required":false}]}]}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmPayToPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        // Email is only required if `pay_id` is used\n        email: 'jenny@example.com'\n      },\n      payto: {\n        pay_id: 'jenny@example.com'\n        // Alternatively, provide bank account details\n        account_number: '000123456',\n        bsb_number: '000000'\n      }\n    }\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPayToPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        // Email is only required if `pay_id` is used\n        email: 'jenny@example.com'\n      },\n      payto: {\n        pay_id: 'jenny@example.com'\n        // Alternatively, provide bank account details\n        account_number: '000123456',\n        bsb_number: '000000'\n      }\n    }\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you've already created a `PaymentMethod`, you can pass its `id` to `payment_method`, which is used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmPayToPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}'\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPayToPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}'\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you've already attached a `PaymentMethod` to this `PaymentIntent`, you can confirm it without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmPayToPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmPayToPayment('{PAYMENT_INTENT_CLIENT_SECRET}');\n"}}}],"section_tag":"stripe_confirm_payto_payment"},"display_on_load":true},"stripe_confirm_pix_payment":{"title":"Confirm a Pix payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_pix_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_pix_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Pix payment","description":"Use `stripe.confirmPixPayment` in the [Pix Payment](/payments/pix) with Payment Methods flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/pix) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmPixPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Default to be `true`. Set this to `false` if you would like to [handle displaying the Pix QR code yourself](/payments/pix/accept-a-payment#confirm-payment-intent).\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Default to be `true`. Set this to `false` if you would like to [handle displaying the Pix QR code yourself](/payments/pix/accept-a-payment#confirm-payment-intent).\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a Pix payment","snippets":{"js":"stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n"}},"returns":"By default, `stripe.confirmPixPayment` will display the Pix QR code overlay. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nobject. This object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPixPayment` may take several seconds to complete and display the QR code.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method paramters or and empty payment method object.\n","validation":"object","required":true,"expanded":false}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {},\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {},\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPixPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n"}}}],"section_tag":"stripe_confirm_pix_payment"},"display_on_load":true},"stripe_confirm_promptpay_payment":{"title":"Confirm a PromptPay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_promptpay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_promptpay_payment","gate":false,"data":{"section_type":"method","title":"Confirm a PromptPay payment","description":"Use `stripe.confirmPromptPayPayment` in the PromptPay payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide and handle the [NextAction](/api/payment_intents/object#payment_intent_object-next_action) for the customer to authorize the payment.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmPromptPayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Default to be `true`. Set this to `false` if you would like to [handle displaying the PromptPay QR code yourself](/payments/promptpay/accept-a-payment#confirm-payment-intent).\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Default to be `true`. Set this to `false` if you would like to [handle displaying the PromptPay QR code yourself](/payments/promptpay/accept-a-payment#confirm-payment-intent).\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a PromptPay payment","snippets":{"js":"stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}},"returns":"By default, `stripe.confirmPromptPayPayment` will display the PromptPay QR code overlay. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nobject. This object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPromptPayPayment` may take several seconds to complete and display the QR code.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment method.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n    },\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error, paymentIntent} = await stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"existing","title":"With an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"attached","title":"With an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmPromptPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}}],"section_tag":"stripe_confirm_promptpay_payment"},"display_on_load":true},"stripe_confirm_sepa_debit_payment":{"title":"Confirm a SEPA debit payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_sepa_debit_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_sepa_debit_payment","gate":false,"data":{"section_type":"method","title":"Confirm a SEPA Debit payment","description":"Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](/payments/sepa-debit) with Payment Methods flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/sepa-debit) for more details.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new PaymentMethod for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmSepaDebitPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up the SEPA Direct Debit account for reuse, set\nthis parameter to `off_session`. SEPA Direct Debit only\naccepts an `off_session` value for this parameter. If a\n`customer` is provided on this\n[PaymentIntent](/api/payment_intents), the\n[PaymentMethod](/api/payment_methods) will be attached to\nthe customer when the PaymentIntent transitions to\n`processing`.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up the SEPA Direct Debit account for reuse, set\nthis parameter to `off_session`. SEPA Direct Debit only\naccepts an `off_session` value for this parameter. If a\n`customer` is provided on this\n[PaymentIntent](/api/payment_intents), the\n[PaymentMethod](/api/payment_methods) will be attached to\nthe customer when the PaymentIntent transitions to\n`processing`.\n","validation":"string"}]}]},"request":{"title":"Confirm a SEPA Debit payment","snippets":{"js":"stripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmSepaDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}},"returns":"`stripe.confirmSepaDebitPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the successful PaymentIntent.\n* `result.error`: an error.\n  Refer to the API reference for all possible errors.\n","callout":"Note that `stripe.confirmSepaDebitPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new PaymentMethod with `stripe.confirmSepaDebitPayment` by passing an `iban` [Element](/js/element) to `payment_method[sepa_debit]`.\nThe new `PaymentMethod` will be created with the data collected by the `Element` and will be used to confirm the `PaymentIntent`.\nAdditionally, to create a SEPA Direct Debit `PaymentMethod`, you are required to collect and include the customer’s name and email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an `object` to confirm the payment using data collected by an `iban` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"sepa_debit","documentation":"An `iban` Element.\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmSepaDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s IBAN account number or want to collect it yourself, then you do not need to use the `iban` Element with `stripe.confirmSepaDebitPayment`.\nYou can pass in the customer’s account number directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\nTo create a SEPA Direct Debit `PaymentMethod`, you are required to collect and include the customer’s name and email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected without an `Element`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"sepa_debit","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"iban","documentation":"An IBAN account number.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: {\n        iban: 'DE89370400440532013000',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmSepaDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sepa_debit: {\n        iban: 'DE89370400440532013000',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmSepaDebitPayment`.\nIt will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmSepaDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmSepaDebitPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmSepaDebitPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmSepaDebitPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_sepa_debit_payment"},"display_on_load":true},"stripe_confirm_sofort_payment":{"title":"Confirm a Sofort payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_sofort_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_sofort_payment","gate":false,"data":{"section_type":"method","title":"Confirm a Sofort payment","description":"Use `stripe.confirmSofortPayment` in the [Sofort Payments with Payment Methods](/payments/sofort) flow when the customer submits your payment form.\nWhen called, it will confirm the `PaymentIntent` with `data` you provide. It will then automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmSofortPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/sofort/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/sofort/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a Sofort payment","snippets":{"js":"stripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmSofortPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"returns":"`stripe.confirmSofortPayment` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmSofortPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmSofortPayment` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    // Inform the customer that there was an error.\n  });\n","es_next":"const {error} = await stripe.confirmSofortPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"self_collected","title":"with collected data","description":"The country of your customer's bank is required for the Sofort authorization to succeed.\nYou can pass in the country of your customer's bank directly to create a new `PaymentMethod` and confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's name.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"sofort","documentation":"An object detailing SOFORT specific parameters.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"country","documentation":"The country code where customer's bank is located.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nRequired when `setup_future_usage` is set to `off_session`.\n","validation":"object","required":false,"expanded":false,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":false},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"},{"name":"setup_future_usage","documentation":"To set up a SEPA Direct Debit payment method using the bank details from this SOFORT payment,\nset this parameter to `off_session`. When using this parameter, a `customer` will need\nto be set on the [PaymentIntent](/api/payment_intents). The newly created SEPA Direct Debit\n[PaymentMethod](/api/payment_methods) will be attached to this customer.\n","validation":"string"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmSofortPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm the `PaymentIntent` using `stripe.confirmSofortPayment` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmSofortPayment('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmSofortPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_sofort_payment"},"display_on_load":true},"stripe_confirm_twint_payment":{"title":"Confirm a TWINT payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_twint_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_twint_payment","gate":false,"data":{"section_type":"method","title":"Confirm a TWINT payment","description":"Use `stripe.confirmTwintPayment` in the TWINT payment method creation flow when the customer submits your payment form.\nWhen you call the method, it confirms the [PaymentIntent](/api/payment_intents) with the `data` you provide, and automatically redirects the customer to authorize the transaction.\nOnce authorization is complete, the customer is redirected back to your specified `return_url`.\n\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you've already attached a `return_url` and a `PaymentMethod`, you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmTwintPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/twint/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/twint/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an TWINT payment","snippets":{"js":"stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}},"returns":"By default, `stripe.confirmTwintPayment` triggers a redirect when successful.\nIf there's an error, or when handling `next_action`s manually by using the `handleActions: false` option, it returns a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmTwintPayment` might take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"without an existing payment method","description":"If you haven't already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` is used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"email","validation":"string","required":true},{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","badge_text":"recommended","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you've already created a `PaymentMethod`, you can pass its `id` to `payment_method`, which is used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you've already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, you can confirm it without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmTwintPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_twint_payment"},"display_on_load":true},"stripe_confirm_wechat_pay_payment":{"title":"Confirm a WeChat Pay payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_wechat_pay_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_wechat_pay_payment","gate":false,"data":{"section_type":"method","title":"Confirm a WeChat Pay payment","description":"Use `stripe.confirmWechatPayPayment` in the WeChat Pay payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide and handle the [NextAction](/api/payment_intents/object#payment_intent_object-next_action) for the customer to authorize the payment.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmWechatPayPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you would like to [handle displaying the WeChat Pay QR code yourself](/payments/wechat-pay/accept-a-payment?platform=web#submit-payment).\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you would like to [handle displaying the WeChat Pay QR code yourself](/payments/wechat-pay/accept-a-payment?platform=web#submit-payment).\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a WeChat Pay payment","snippets":{"js":"stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}},"returns":"By default, `stripe.confirmWechatPayPayment` will display WeChat Pay QR code. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nobject. This object has either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmWechatPayPayment` may take several seconds to complete and display the QR code.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment method.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n      wechat_pay: {},\n    },\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error, paymentIntent} = await stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: '{NAME}',\n        email: '{EMAIL}'\n      },\n      wechat_pay: {},\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"existing","title":"With an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"attached","title":"With an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n).then(function({error, paymentIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (paymentIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (paymentIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error} = await stripe.confirmWechatPayPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {}\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (paymentIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (paymentIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}}],"section_tag":"stripe_confirm_wechat_pay_payment"},"display_on_load":true},"stripe_confirm_zip_payment":{"title":"Confirm a Zip payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_confirm_zip_payment","section_anchor":"confirm_payment_intent_payment_method","subsection_anchors":null,"path":"/payment_intents/confirm_zip_payment","gate":false,"data":{"section_type":"method","title":"Confirm an Zip payment","description":"Use `stripe.confirmZipPayment` in the Zip payment method creation flow when the customer submits your payment form.\nWhen called, it will confirm the [PaymentIntent](/api/payment_intents) with `data` you provide, and it will automatically redirect the customer to authorize the transaction.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\nWhen you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `return_url` and a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmZipPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/zip/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Payment Intents API](/api/payment_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/zip/accept-a-payment#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm an Zip payment","snippets":{"js":"stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}},"returns":"By default, `stripe.confirmZipPayment` will trigger a redirect when successful.\nIf there is an error, or when handling `next_action`s manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmZipPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"email","validation":"string","required":true},{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment.\n","validation":"object","badge_text":"recommended","expanded":false,"subspec":[{"name":"name","validation":"string","required":true},{"name":"address","validation":"object","required":true}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm without existing payment method","snippets":{"js":"stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n        address: {\n          line1: '123 Main Street',\n          city: 'San Francisco',\n          state: 'CA',\n          country: 'US',\n          postal_code: '94321'\n        }\n      }\n    },\n    shipping: {\n      name: 'Jenny Rosen',\n      address: {\n        line1: '123 Main Street',\n        city: 'San Francisco',\n        state: 'CA',\n        country: 'US',\n        postal_code: '94321'\n      }\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` and it will be used to confirm the `PaymentIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(result) {\n  // Inform the customer that there was an error.\n});\n","es_next":"const {error} = await stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `PaymentIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}'\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmZipPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_zip_payment"},"display_on_load":true},"stripe_retrieve_payment_intent":{"title":"Retrieve a PaymentIntent","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_retrieve_payment_intent","section_anchor":"stripe_retrieve_payment_intent","subsection_anchors":null,"path":"/payment_intents/retrieve_payment_intent","gate":false,"data":{"section_type":"method","title":"Retrieve a PaymentIntent","description":"Retrieve a [PaymentIntent](/api/payment_intents) using its [client secret](/api/payment_intents/object#payment_intent_object-client_secret).\n","signature":{"object_name":"stripe","method_name":"retrievePaymentIntent","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the [PaymentIntent](/api/payment_intents) to retrieve.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the [PaymentIntent](/api/payment_intents) to retrieve.\n","validation":"string","required":true}]},"request":{"title":"Retrieve a PaymentIntent","snippets":{"js":"stripe\n  .retrievePaymentIntent('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.retrievePaymentIntent(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n);\n\n// Handle error or paymentIntent\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: a [PaymentIntent](/api/payment_intents) was retrieved successfully.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_retrieve_payment_intent"},"display_on_load":true},"stripe_verify_microdeposits_for_payment":{"title":"Verify with micro-deposits for payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_verify_microdeposits_for_payment","section_anchor":"stripe_verify_microdeposits_for_payment","subsection_anchors":null,"path":"/payment_intents/verify_microdeposits_for_payment","gate":false,"data":{"section_type":"method","title":"Verify with micro-deposits for payment","description":"Use `stripe.verifyMicrodepositsForPayment` in the [Accept a Canadian pre-authorized debit payment](/payments/acss-debit/accept-a-payment) or [Accept an ACH Direct Debit payment](/payments/ach-debit/accept-a-payment) flow to verify a customer's bank account with micro-deposits.\n\nIt should be only called when [PaymentIntent](/api/payment_intents) is in the `requires_action` state, and contains a `next_action` field that has a `type` equal to `verify_with_microdeposits`.\nRefer to our [integration guide](/payments/acss-debit/accept-a-payment) for more details.\n","signature":{"object_name":"stripe","method_name":"verifyMicrodepositsForPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"amounts","documentation":"An array of two positive integers, in *cents*, equal to the values of the micro-deposits sent to the bank account.\n","validation":"array"},{"name":"descriptor_code","documentation":"A six-character code starting with SM present in the microdeposit sent to the bank account.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"amounts","documentation":"An array of two positive integers, in *cents*, equal to the values of the micro-deposits sent to the bank account.\n","validation":"array"},{"name":"descriptor_code","documentation":"A six-character code starting with SM present in the microdeposit sent to the bank account.\n","validation":"string"}]}]},"request":{"title":"Verify with micro-deposits for payment","snippets":{"js":"stripe.verifyMicrodepositsForPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    amounts: [32, 45],\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.verifyMicrodepositsForPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    amounts: [32, 45],\n  }\n);\n\n// Handle the paymentIntent or error\n"}},"returns":"`stripe.verifyMicrodepositsForPayment` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentIntent`: the [PaymentIntent](/api/payment_intents) with a `status` of `processing`.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/acss-debit/accept-a-payment) for all possible errors.\n","callout":"Verification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a `payment_intent.payment_failed` webhook event.\nRefer to our [integration guide](/payments/acss-debit/accept-a-payment) for more details.\n","section_tag":"stripe_verify_microdeposits_for_payment"},"display_on_load":true},"stripe_create_radar_session":{"title":"Create a Radar Session","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_create_radar_session","section_anchor":"stripe_create_radar_session","subsection_anchors":null,"path":"/payment_intents/create_radar_session","gate":false,"data":{"section_type":"method","title":"Create a Radar session","description":"Use `stripe.createRadarSession()` to associate client browser information with a Radar Session ID. This ID can then be passed to Stripe when [creating charges and payment methods](/radar/radar-session) to associate client browser information with those charges and improve Radar's ability to identify fraud.\n\nWe've prefilled the example with a sample [test API key](/keys). Don’t submit any personally identifiable information in requests made with this key.\nTo create a Stripe object using your account, replace the sample API key with your actual API key or [sign in](/login?redirect=%2Fdocs%2Fjs%2Finitializing).\n\n","callout":"Note that `stripe.createRadarSession` should be non-blocking. If you receive an error from this function, continue on with completing charges without passing through a Radar Session ID.\n","signature":{"object_name":"stripe","method_name":"createRadarSession","args":[]},"request":{"title":"Create a Radar Session","snippets":{"js":"var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nstripe.createRadarSession().then(function(result) {\n  // Handle result.error or result.radarSession\n});\n","es_next":"var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst {radarSession, error} = await stripe.createRadarSession();\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.radarSession`: a Radar Session was created successfully.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors and the [FPX guide](/payments/fpx/accept-a-payment#error-codes) for FPX specific errors.\n\nAfter you receive a Radar Session ID, pass it to your server and subsequently include it in your API requests to create charges, payment methods, or to create or confirm a PaymentIntent.\n","section_tag":"stripe_create_radar_session"},"display_on_load":true},"stripe_handle_next_action_for_payment":{"title":"Handle a next action","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_handle_next_action_for_payment","section_anchor":"stripe_handle_next_action_for_payment","subsection_anchors":null,"path":"/payment_intents/handle_next_action","gate":false,"data":{"section_type":"method","title":"Handle a next action","description":"Use `stripe.handleNextAction` in the [finalizing payments on the server](/payments/finalize-payments-on-the-server#next-actions)\nflow to finish confirmation of a [PaymentIntent](/api/payment_intents) with the `requires_action` status.\nIt will throw an error if the PaymentIntent has a different status.\n\nDepending on the payment method and required action, the customer may be temporarily redirected from your site\nand brought back to the `return_url` [parameter](/api/payment_intents/confirm#confirm_payment_intent-return_url) provided when the PaymentIntent is confirmed.\n","callout":"Note that `stripe.handleNextAction` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleNextAction` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThe authentication challenge requires a context switch that can be hard to follow on a screen-reader.\nEnsure that your form is accessible by ensuring that success or error messages are clearly read out.\n","signature":{"object_name":"stripe","method_name":"handleNextAction","args":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string"}]}]},"request":{"title":"Handle a next action","snippets":{"js":"stripe.handleNextAction({\n  clientSecret: '{PAYMENT_INTENT_CLIENT_SECRET}'\n}).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {\n  paymentIntent,\n  error\n} = await stripe.handleNextAction({\n  clientSecret: '{PAYMENT_INTENT_CLIENT_SECRET}',\n});\n\n// Handle the paymentIntent or error\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: a [PaymentIntent](/api/payment_intents) with the `processing` or `succeeded` status.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_next_action_for_payment"},"display_on_load":true},"stripe_handle_card_action":{"title":"Handle a card action","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_handle_card_action","section_anchor":"stripe_handle_card_action","subsection_anchors":null,"path":"/payment_intents/handle_card_action","gate":false,"data":{"section_type":"method","title":"Handle a card action","description":"Use `stripe.handleCardAction` in the Payment Intents API [manual confirmation](/payments/payment-intents/web-manual) flow to handle a [PaymentIntent](/api/payment_intents) with the `requires_action` status.\nIt will throw an error if the `PaymentIntent` has a different status.\n","callout":"Note that `stripe.handleCardAction` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleCardAction` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThe authentication challenge requires a context switch that can be hard to follow on a screen-reader.\nEnsure that your form is accessible by ensuring that success or error messages are clearly read out.\n","signature":{"object_name":"stripe","method_name":"handleCardAction","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` to handle.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` to handle.\n","validation":"string","required":true}]},"request":{"title":"Handle a card action","snippets":{"js":"stripe\n  .handleCardAction('{PAYMENT_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.handleCardAction(\n  '{{PAYMENT_INTENT_CLIENT_SECRET}}',\n);\n\n// Handle the paymentIntent or error\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: a [PaymentIntent](/api/payment_intents) with the `requires_confirmation` status to confirm server-side.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_card_action"},"display_on_load":true},"stripe_collect_bank_account_for_payment":{"title":"Collect bank account details for payment","group_title":"Payment Intents","group_anchor":"payment_intents","anchor":"stripe_collect_bank_account_for_payment","section_anchor":"stripe_collect_bank_account_for_payment","subsection_anchors":null,"path":"/payment_intents/collect_bank_account_for_payment","gate":false,"data":{"section_type":"method","title":"Collect bank account details for payment","description":"Use `stripe.collectBankAccountForPayment` in the [Accept a payment](/payments/ach-debit/accept-a-payment) flow for the [ACH Direct Debit](/payments/ach-debit) payment method to collect the customer’s bank account in your payment form.\nWhen called, it will automatically load an on-page modal UI to collect bank account details and verification, and attach the [PaymentMethod](/api/payment_methods) to the [PaymentIntent](/api/payment_intents).\n","signature":{"object_name":"stripe","method_name":"collectBankAccountForPayment","args":[{"name":"options","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"params","validation":"object","required":true,"expanded":true,"subspec":[{"name":"payment_method_type","documentation":"The payment method type for the bank account details (e.g. `us_bank_account`)\n","validation":"string","required":true},{"name":"payment_method_data","documentation":"Payment method specific data to be sent with the request\n","validation":"object","required":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` is required. Providing `email` allows your customer to receive [ACH Direct Debit mandate and microdeposit emails](/payments/ach-debit#mandate-and-microdeposit-emails).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]}]}],"required":true}]},"table_content":{"items":[{"name":"options","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"params","validation":"object","required":true,"expanded":true,"subspec":[{"name":"payment_method_type","documentation":"The payment method type for the bank account details (e.g. `us_bank_account`)\n","validation":"string","required":true},{"name":"payment_method_data","documentation":"Payment method specific data to be sent with the request\n","validation":"object","required":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` is required. Providing `email` allows your customer to receive [ACH Direct Debit mandate and microdeposit emails](/payments/ach-debit#mandate-and-microdeposit-emails).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]}]}],"required":true}]},"request":{"title":"Collect bank account details for payment","snippets":{"js":"stripe.collectBankAccountForPayment(\n  {\n    clientSecret: '{PAYMENT_INTENT_CLIENT_SECRET}',\n    params: {\n      payment_method_type: 'us_bank_account',\n      payment_method_data: {\n        billing_details: {name: 'Jenny Rosen', email: 'jenny@example.com'},\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.collectBankAccountForPayment(\n  {\n    clientSecret: '{PAYMENT_INTENT_CLIENT_SECRET}',\n    params: {\n      payment_method_type: 'us_bank_account',\n      payment_method_data: {\n        billing_details: {name: 'Jenny Rosen', email: 'jenny@example.com'},\n      },\n    },\n  }\n);\n\n// Handle the paymentIntent or error\n"}},"returns":"When the `stripe.collectBankAccountForPayment` completes successfully, it returns a PaymentIntent.\nIf the customer provided their account, the PaymentIntent is in the `requires_confirmation` state. If the customer closed the dialog without providing their account, the PaymentIntent is in the `requires_payment_method` state.\nUse [stripe.confirmUsBankAccountPayment](/js/payment_intents/confirm_us_bank_account_payment) to complete the process.\n","section_tag":"stripe_collect_bank_account_for_payment"},"display_on_load":true},"setup_intents_intro":{"title":"Introduction","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"setup_intents_intro","section_anchor":"setup_intents_intro","subsection_anchors":null,"path":"/setup_intents","gate":false,"data":{"section_type":"generic","title":"Setup Intents","description":"Use the [Setup Intents APIs](/payments/setup-intents) to save a card and charge it later.\nFor step-by-step instructions on using the Setup Intents APIs, see the [set up recurring payments guide](/payments/save-and-reuse).\n\nThe following Stripe.js methods are available for working with Setup Intents.\n","section_tag":"setup_intents_intro"},"display_on_load":true},"confirm_setup_intent":{"title":"Confirm a SetupIntent","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"confirm_setup_intent","section_anchor":"confirm_setup_intent","subsection_anchors":null,"path":"/setup_intents/confirm_setup","gate":false,"data":{"section_type":"method","title":"Confirm a setup","description":"Use `stripe.confirmSetup` to confirm a [SetupIntent](/api/setup_intents) using data collected\nby the [Payment Element](/js/element/payment_element), or with manually provided data via `confirmParams`.\nWhen called, `stripe.confirmSetup` will attempt to complete any [required actions](/payments/intents),\nsuch as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\nYour user will be redirected to the `return_url` you pass once the authorization is complete.\n","signature":{"object_name":"stripe","method_name":"confirmSetup","args":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance used to create the Payment Element.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=setup). It's always required if you don't provide a `clientSecret`.\n","validation":"object","required":true,"requirement_text":"Conditionally required"},{"name":"clientSecret","documentation":"The SetupIntent's client secret.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=setup). It's always required if you don't provide an `elements` instance containing a [client secret](/api/setup_intents/object#setup_intent_object-client_secret).\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"confirmParams","documentation":"Parameters that will be passed on to the Stripe API. Refer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true},{"name":"confirmation_token","documentation":"If collected previously, the ID of the ConfirmationToken to use to confirm this SetupIntent. This is mutually exclusive with the `elements` parameter.\n","validation":"string"},{"name":"payment_method_data","documentation":"When you call `stripe.confirmSetup`, payment details are collected from the Element and passed to the SetupIntents\n[confirm endpoint](/api/setup_intents/confirm) as the [payment_method_data](/api/setup_intents/confirm#confirm_setup_intent-payment_method)\nparameter. You can also include additional `payment_method_data` fields, which will be merged with the data collected from the Element.\n","validation":"object","subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nDetails collected by Elements will override values passed here.\nBilling fields that are omitted in the Payment Element via the `fields` option required.\n","validation":"object"},{"name":"allow_redisplay","documentation":"Indicates whether the payment method can be displayed to the customer in subsequent checkout flows. The value passed here will override the [allow_redisplay](docs/api/payment_methods/object#payment_method_object-allow_redisplay) determined by the provided `elements` parameter.\n","validation":"'unspecified' | 'always' | 'limited'"}]},{"name":"expand","documentation":"An array of pass through [SetupIntent](/api/setup_intents/object) expansion parameters ([learn more](/api/expanding_objects)).\n","validation":"array","required":false}]},{"name":"redirect","documentation":"By default, `stripe.confirmSetup` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `stripe.confirmSetup` will only redirect if your user chooses a redirect-based payment method.\n\n**Note**: Setting `if_required` requires that you handle successful confirmations for redirect-based and non-redirect based payment methods separately.\nWhen a non-redirect based payment method is successfully confirmed, `stripe.confirmSetup` will resolve with a `{setupIntent}` object.\n","validation":"'always' | 'if_required'"}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance used to create the Payment Element.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=setup). It's always required if you don't provide a `clientSecret`.\n","validation":"object","required":true,"requirement_text":"Conditionally required"},{"name":"clientSecret","documentation":"The SetupIntent's client secret.\n\nRequired if you [collect payment details before creating an Intent](/payments/accept-a-payment-deferred?platform=web\u0026type=setup). It's always required if you don't provide an `elements` instance containing a [client secret](/api/setup_intents/object#setup_intent_object-client_secret).\n","validation":"string","required":true,"requirement_text":"Conditionally required"},{"name":"confirmParams","documentation":"Parameters that will be passed on to the Stripe API. Refer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true},{"name":"confirmation_token","documentation":"If collected previously, the ID of the ConfirmationToken to use to confirm this SetupIntent. This is mutually exclusive with the `elements` parameter.\n","validation":"string"},{"name":"payment_method_data","documentation":"When you call `stripe.confirmSetup`, payment details are collected from the Element and passed to the SetupIntents\n[confirm endpoint](/api/setup_intents/confirm) as the [payment_method_data](/api/setup_intents/confirm#confirm_setup_intent-payment_method)\nparameter. You can also include additional `payment_method_data` fields, which will be merged with the data collected from the Element.\n","validation":"object","subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\nDetails collected by Elements will override values passed here.\nBilling fields that are omitted in the Payment Element via the `fields` option required.\n","validation":"object"},{"name":"allow_redisplay","documentation":"Indicates whether the payment method can be displayed to the customer in subsequent checkout flows. The value passed here will override the [allow_redisplay](docs/api/payment_methods/object#payment_method_object-allow_redisplay) determined by the provided `elements` parameter.\n","validation":"'unspecified' | 'always' | 'limited'"}]},{"name":"expand","documentation":"An array of pass through [SetupIntent](/api/setup_intents/object) expansion parameters ([learn more](/api/expanding_objects)).\n","validation":"array","required":false}]},{"name":"redirect","documentation":"By default, `stripe.confirmSetup` will always redirect to your `return_url` after a successful confirmation.\nIf you set `redirect: \"if_required\"`, then `stripe.confirmSetup` will only redirect if your user chooses a redirect-based payment method.\n\n**Note**: Setting `if_required` requires that you handle successful confirmations for redirect-based and non-redirect based payment methods separately.\nWhen a non-redirect based payment method is successfully confirmed, `stripe.confirmSetup` will resolve with a `{setupIntent}` object.\n","validation":"'always' | 'if_required'"}]}]},"request":{"title":"Confirm a setup intent","snippets":{"js":"stripe.confirmSetup({\n  elements,\n  confirmParams: {\n    // Return URL where the customer should be redirected after the SetupIntent is confirmed.\n    return_url: 'https://example.com',\n  },\n})\n.then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n  }\n});\n","es_next":"const {error} = await stripe.confirmSetup(\n  {\n    elements,\n    confirmParams: {\n      // Return URL where the customer should be redirected after the SetupIntent is confirmed.\n      return_url: 'https://example.com',\n    },\n  }\n);\nif (error) {\n  // Inform the customer that there was an error.\n}\n"}},"returns":"`stripe.confirmSetup` will return a `Promise`.\nUpon a successful authorization, your user will be redirected to the `return_url` you provide\nbefore the Promise ever resolves.\n\nIf the authorization fails, the `Promise` will resolve with an `{error}` object that describes the failure.\nWhen the [error type](/api/errors#errors-type) is `card_error` or `validation_error`, you can display the error\nmessage in `error.message` directly to your user. An error type of `invalid_request_error` could be due to an invalid\nrequest or 3DS authentication failures.\n\nNote that for some payment methods such as iDEAL or Afterpay Clearpay, your user will first be redirected to an intermediate page to authorize the payment.\nIf they fail to authorize the payment, they will be redirected back to your `return_url` and the SetupIntent will have a `status` of `requires_payment_method`.\nIn this case you should attempt to recollect payment from the user.\n","callout":"Note that `stripe.confirmSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","section_tag":"confirm_setup_intent"},"display_on_load":true},"confirm_setup_intent_payment_method":{"title":"Confirm a SetupIntent by payment method","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"confirm_setup_intent_payment_method","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":["stripe_confirm_card_setup","stripe_confirm_us_bank_account_setup","stripe_confirm_acss_debit_setup","stripe_confirm_au_becs_debit_setup","stripe_confirm_bacs_debit_setup","stripe_confirm_bancontact_setup","stripe_confirm_cashapp_setup","stripe_confirm_ideal_setup","stripe_confirm_paypal_setup","stripe_confirm_payto_setup","stripe_confirm_sepa_debit_setup","stripe_confirm_sofort_setup"],"path":"/setup_intents/payment_method","gate":false,"data":{"section_type":"generic","title":"Confirm a SetupIntent by payment method","description":"Below are a number of methods used to confirm a SetupIntent for a specific payment method type.\n","section_tag":"confirm_setup_intent_payment_method"},"display_on_load":true},"stripe_confirm_card_setup":{"title":"Confirm card setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_card_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_card_setup","gate":false,"data":{"section_type":"method","title":"Confirm card setup","description":"Use `stripe.confirmCardSetup` in the [Setup Intents API flow](/payments/save-and-reuse) when the customer submits your payment form.\nWhen called, it will confirm the [SetupIntent](/api/setup_intents) with `data` you provide and carry out 3DS or other next actions if they are required.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmCardSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [handle next actions yourself](/payments/payment-intents/verifying-status#next-actions), or if you want to defer next action handling until later (e.g. for use in the [PaymentRequest API](/stripe-js/elements/payment-request-button#complete-payment-intents)).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","badge_text":"recommended","validation":"string | object"},{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [handle next actions yourself](/payments/payment-intents/verifying-status#next-actions), or if you want to defer next action handling until later (e.g. for use in the [PaymentRequest API](/stripe-js/elements/payment-request-button#complete-payment-intents)).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm card setup","snippets":{"js":"stripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  },\n);\n"}},"callout":"Note that `stripe.confirmCardSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.confirmCardSetup` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThis will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers.\nYou should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n","returns":"`stripe.confirmCardSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Use `stripe.confirmCardSetup` with payment data from an [Element](/js/element) by passing a `card` or `cardNumber` `Element` to `payment_method[card]`.\nThe new `PaymentMethod` will be created with data collected by the `Element` and will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by a `card` or `cardNumber` [Element](/js/element).\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"card","documentation":"Uses the provided `card` or `cardNumber` [Element](/js/element) for confirmation.\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      card: cardElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmCardSetup` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"token","title":"with an existing token","description":"For backwards compatibility, you can convert an existing `Token` into a `PaymentMethod` with `stripe.confirmCardSetup` by passing the `Token` to `payment_method[card][token]`.\nThe newly created `PaymentMethod` will be used to confirm the `PaymentMethod`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using an existing token.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"card","documentation":"An object of card data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"token","documentation":"Converts the provided token into a `PaymentMethod` to use for confirmation.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.\n","validation":"object","badge_text":"recommended"}]}]},"request":{"title":"Confirm with existing token","snippets":{"js":"stripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      card: {\n        token: 'tok_visa',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      card: {\n        token: 'tok_visa',\n      },\n    },\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `SetupIntent`, then you can confirm the `SetupIntent` using `stripe.confirmCardSetup` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmCardSetup('{SETUP_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n);\n"}}}],"section_tag":"stripe_confirm_card_setup"},"display_on_load":true},"stripe_confirm_us_bank_account_setup":{"title":"Confirm an ACH Direct Debit setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_us_bank_account_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_us_bank_account_setup","gate":false,"data":{"section_type":"method","title":"Confirm an ACH Direct Debit setup","description":"\nUse `stripe.confirmUsBankAccountSetup` in the [Save bank details](/payments/ach-debit/set-up-payment) flow for the [ACH Direct Debit](/payments/ach-debit) payment method to record the customer’s authorization for future payments.\n\nWhen you confirm a [SetupIntent](/api/setup_intents), it needs to have an attached [PaymentMethod](/api/payment_methods).\nWe suggest using `stripe.collectBankAccountForSetup`, which automatically collects bank account details and attaches a [PaymentMethod](/api/payment_methods). You may also choose to reuse an existing `PaymentMethod` or manually collect bank account details  using the `data` parameter. These use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmUsBankAccountSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]}]},"request":{"title":"Confirm an ACH Direct Debit setup","snippets":{"js":"stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}},"returns":"`stripe.confirmUsBankAccountSetup` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/ach-debit/set-up-payment) for all possible errors.\n","use_cases":[{"name":"existing_payment_method","title":"with an existing PaymentMethod","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmUsBankAccountSetup`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with an existing PaymentMethod","snippets":{"js":"stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}},{"name":"attached_payment_method","title":"with an attached PaymentMethod","description":"If you have successfully called `stripe.collectBankAccountForSetup` or attached a `PaymentMethod` to this `SetupIntent` already, then you can confirm the `SetupIntent` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {}\n);\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}},{"name":"self_collected_bank_account","title":"with self collected bank account information","description":"If you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` is required. Providing `email` allows your customer to receive [ACH Direct Debit mandate and microdeposit emails](/payments/ach-debit#mandate-and-microdeposit-emails).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]},{"name":"us_bank_account","documentation":"The customer's [bank account information](/api/payment_methods/create#create_payment_method-us_bank_account).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"account_number","documentation":"The customer’s bank account number.\n","validation":"string","required":true},{"name":"routing_number","documentation":"The routing number of the customer’s bank.\n","validation":"string","required":true},{"name":"account_holder_type","documentation":"Account holder type: individual or company.\n","validation":"string","required":true},{"name":"account_type","documentation":"Account type: checkings or savings. Defaults to checking if omitted.\n","validation":"string","required":false}]}]}]},"request":{"title":"Confirm with bank account information","snippets":{"js":"stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmUsBankAccountSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      us_bank_account: {\n        routing_number: '110000000',\n        account_number: '000123456789',\n        account_holder_type: 'individual',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}}],"section_tag":"stripe_confirm_us_bank_account_setup"},"display_on_load":true},"stripe_confirm_acss_debit_setup":{"title":"Confirm an ACSS Debit setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_acss_debit_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_acss_debit_setup","gate":false,"data":{"section_type":"method","title":"Confirm a Canadian pre-authorized debit setup","description":"Use `stripe.confirmAcssDebitSetup` in the [Save bank details](/payments/acss-debit/set-up-payment) flow to set up a [Canadian pre-authorized debit](/payments/acss-debit) payment method for future payments.\nWhen called, it will automatically pop up a modal to collect bank account details and verification, accept the mandate, and confirm the [SetupIntent](/api/setup_intents) when the user submits the form.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/acss-debit/set-up-payment) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\n`stripe.confirmAcssDebitSetup` automatically creates a new `PaymentMethod` for you when your customer completes the modal UI.\nIt can also be called with an existing `PaymentMethod`, which will load the modal UI to collect a new mandate agreement.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAcssDebitSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"skipMandate","documentation":"Set this to `true` if you want to skip displaying the mandate confirmation.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"skipMandate","documentation":"Set this to `true` if you want to skip displaying the mandate confirmation.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm Canadian pre-authorized debit setup","snippets":{"js":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}},"returns":"`stripe.confirmAcssDebitSetup` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/acss-debit/set-up-payment) for all possible errors.\n","callout":"Note that `stripe.confirmAcssDebitSetup` may take several seconds to complete.\nDuring that time, disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, show it to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new_payment_method","title":"with a new PaymentMethod","description":"You can pass in the customer’s billing details to create a new `PaymentMethod` and confirm the `SetupIntent`.\nYou are required to collect and include the customer’s name and email address. This method loads an on-page modal UI\nthat handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization for you.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with a new PaymentMethod","snippets":{"js":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}},{"name":"existing_payment_method","title":"with an existing PaymentMethod","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmAcssDebitSetup`.\nThis method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},"request":{"title":"Confirm with an existing PaymentMethod","snippets":{"js":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}},{"name":"attached_payment_method","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `SetupIntent`, then you can confirm the `SetupIntent` without passing in any additional data.\nThis method loads an on-page modal UI that only presents a hosted mandate agreement and collects authorization for you.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {}\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {}\n);\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}},{"name":"self_collected_bank_account","title":"with self collected bank account information","description":"If you already know the customer’s bank account information, or want to collect it yourself, you can pass them in directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\nIn this case, this method does not load the on-page modal UI, so you will need to [build your own mandate agreement page](/payments/acss-debit/custom-pad-agreement).\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]},{"name":"acss_debit","documentation":"The customer's [bank account information](/api/payment_methods/create#create_payment_method-acss_debit).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"account_number","documentation":"The customer’s bank account number.\n","validation":"string","required":true},{"name":"institution_number","documentation":"The institution number of the customer’s bank.\n","validation":"string","required":true},{"name":"transit_number","documentation":"The transit number of the customer’s bank.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with bank account information","snippets":{"js":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      acss_debit: {\n        institution_number: '000',\n        transit_number: '11000',\n        account_number: '000123456789',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      acss_debit: {\n        institution_number: '000',\n        transit_number: '11000',\n        account_number: '000123456789',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}},{"name":"existing_payment_method_skip_mandate","title":"with an existing PaymentMethod but skip mandate display","description":"If you have already created a `PaymentMethod` and built your own mandate agreement page,\nyou can reuse it by passing its `id` to `payment_method` when calling `stripe.confirmAcssDebitSetup` and skip the on-page modal UI at the same time.\n","table_content":{"title":"Data and options argument paramters","items":[{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"skipMandate","documentation":"Set to `true` to skip the on-page modal UI.\n","validation":"boolean","required":true}]}]},"request":{"title":"Confirm with an existing PaymentMethod but skip mandate display","snippets":{"js":"stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    skipMandate: true,\n  }\n).then(function(result) {\n  if (result.error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else {\n    // Handle next step based on SetupIntent's status.\n    console.log(\"SetupIntent ID: \" + result.setupIntent.id);\n    console.log(\"SetupIntent status: \" + result.setupIntent.status);\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmAcssDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n  {\n    skipMandate: true,\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(error.message);\n} else {\n  // Handle next step based on SetupIntent's status.\n  console.log(\"SetupIntent ID: \" + setupIntent.id);\n  console.log(\"SetupIntent status: \" + setupIntent.status);\n}\n"}}}],"section_tag":"stripe_confirm_acss_debit_setup"},"display_on_load":true},"stripe_confirm_au_becs_debit_setup":{"title":"Confirm BECS Debit setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_au_becs_debit_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_au_becs_debit_setup","gate":false,"data":{"section_type":"method","title":"Confirm BECS Debit setup","description":"Use `stripe.confirmAuBecsDebitSetup` in the [BECS Direct Debit Payments](/payments/au-becs-debit) flow when the customer submits your payment form.\nWhen called, it will confirm the [SetupIntent](/api/setup_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/au-becs-debit) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmAuBecsDebitSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"}]}]},"request":{"title":"Confirm BECS Debit setup","snippets":{"js":"stripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmAuBecsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  },\n);\n"}},"callout":"Note that `stripe.confirmAuBecsDebitSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","returns":"`stripe.confirmAuBecsDebitSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new `PaymentMethod` with `stripe.confirmAuBecsDebitSetup` by passing an `auBankAccount` [Element](/js/element) to `payment_method[au_becs_debit]`.\nThe new `PaymentMethod` will be created with the data collected by the `Element` and will be used to confirm the `SetupIntent`.\nAdditionally, to create a BECS Direct Debit `PaymentMethod`, you are required to collect and include the account holder's name and the customer’s email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an `object` to confirm using data collected by an `auBankAccount`\nElement.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"au_becs_debit","documentation":"An `auBankAccount` [Element](/js/element).\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmAuBecsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      au_becs_debit: auBankAccountElement,\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmAuBecsDebitSetup` and it will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmAuBecsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s BSB number and bank account number or want to collect it yourself, then you do not need to use the `auBankAccount` [Element](/js/element).\nYou can pass in the customer’s bank account information directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\nAdditionally, to create a BECS Direct Debit `PaymentMethod`, you are required to collect and include the account holder's name and the customer's email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected without an `Element`.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"au_becs_debit","documentation":"An object of self-collected bank account data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"bsb_number","documentation":"A Bank State Branch (BSB) number.\n","validation":"string","required":true},{"name":"account_number","documentation":"A bank account number.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The account holder's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmAuBecsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      au_becs_debit: {\n        bsb_number: '000000',\n        account_number: '000123456'\n      },\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmAuBecsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      au_becs_debit: {\n        bsb_number: '000000',\n        account_number: '000123456'\n      },\n      billing_details: {\n        name: 'John Smith',\n        email: 'john.smith@example.com',\n      },\n    },\n  },\n);\n"}}}],"section_tag":"stripe_confirm_au_becs_debit_setup"},"display_on_load":true},"stripe_confirm_bacs_debit_setup":{"title":"Confirm Bacs Debit setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_bacs_debit_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_bacs_debit_setup","gate":false,"data":{"section_type":"method","title":"Confirm Bacs Debit setup","description":"Use `stripe.confirmBacsDebitSetup` in the [Bacs Direct Debit Payments](/payments/payment-methods/bacs-debit) flow when the customer submits your payment form.\nWhen called, it will confirm the [SetupIntent](/api/setup_intents) with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/payment-methods/bacs-debit) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmBacsDebitSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"}]}]},"request":{"title":"Confirm Bacs Debit setup","snippets":{"js":"stripe\n  .confirmBacsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      bacs_debit: {\n        sort_code: '108800',\n        account_number: '000123456'\n      },\n      billing_details: {\n        address: {\n          line1: addressLine1,\n          city: addressCity,\n          country: addressCountry,\n          postal_code: addressPostalCode,\n        },\n        email: customerEmail,\n        name: customerName,\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmBacsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      bacs_debit: {\n        sort_code: '108800',\n        account_number: '000123456'\n      },\n      billing_details: {\n        address: {\n          line1: addressLine1,\n          city: addressCity,\n          country: addressCountry,\n          postal_code: addressPostalCode,\n        },\n        email: customerEmail,\n        name: customerName,\n      },\n    },\n  },\n);\n"}},"callout":"Note that `stripe.confirmBacsDebitSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","returns":"`stripe.confirmBacsDebitSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"self_collected","title":"with self collected data","description":"You can also pass in the customer’s bank account information directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\nAdditionally, to create a Bacs Direct Debit `PaymentMethod`, you are required to collect and include the account holder's name and the customer's email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using payment method data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"bacs_debit","documentation":"An object of self-collected bank account data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"account_number","documentation":"A bank account number.\n","validation":"string","required":true},{"name":"sort_code","documentation":"A sort code.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"address","documentation":"The account holder's address.\n","validation":"string","required":true,"subspec":[{"name":"line1","documentation":"Line 1 of the account holder's address.\n","validation":"string","required":true},{"name":"city","documentation":"The account holder's city.\n","validation":"string","required":true},{"name":"country","documentation":"The account holder's country.\n","validation":"string","required":true},{"name":"postal_code","documentation":"The account holder's postal code.\n","validation":"string","required":true}]},{"name":"name","documentation":"The account holder's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmBacsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      bacs_debit: {\n        sort_code: '108800',\n        account_number: '000123456'\n      },\n      billing_details: {\n        address: {\n          line1: addressLine1,\n          city: addressCity,\n          country: addressCountry,\n          postal_code: addressPostalCode,\n        },\n        email: customerEmail,\n        name: customerName,\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmBacsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      bacs_debit: {\n        sort_code: '108800',\n        account_number: '000123456'\n      },\n      billing_details: {\n        address: {\n          line1: addressLine1,\n          city: addressCity,\n          country: addressCountry,\n          postal_code: addressPostalCode,\n        },\n        email: customerEmail,\n        name: customerName,\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmBacsDebitSetup` and it will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmBacsDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmBacsDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}}],"section_tag":"stripe_confirm_bacs_debit_setup"},"display_on_load":true},"stripe_confirm_bancontact_setup":{"title":"Confirm Bancontact setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_bancontact_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_bancontact_setup","gate":false,"data":{"section_type":"method","title":"Confirm Bancontact setup","description":"Use `stripe.confirmBancontactSetup` in the [Set up future payments](/payments/bancontact/set-up-payment) flow to use Bancontact bank details to set up a\nSEPA Direct Debit payment method for future payments. When called, it will confirm a `SetupIntent` with `data` you provide, and it will\nautomatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified `return_url`.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/bancontact/set-up-payment) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmBancontactSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/bancontact/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/bancontact/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm Bancontact setup","snippets":{"js":"stripe\n  .confirmBancontactSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmBancontactSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"callout":"Note that `stripe.confirmBancontactSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","returns":"`stripe.confirmBancontactSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmBancontactSetup` and it will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmBancontactSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmBancontactSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"Your customer's name and email are required for the Bancontact authorization to succeed.\nYou can pass in these properties directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's name and email.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmBancontactSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmBancontactSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}}],"section_tag":"stripe_confirm_bancontact_setup"},"display_on_load":true},"stripe_confirm_cashapp_setup":{"title":"Confirm Cash App Pay setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_cashapp_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_cashapp_setup","gate":false,"data":{"section_type":"method","title":"Confirm an Cash App Pay setup","description":"\nUse `stripe.confirmCashappSetup` in the [Save payment details](/payments/cash-app-pay/set-up-payment) flow for the [Cash App Pay](/payments/cash-app-pay) payment method to record the customer’s authorization for future payments.\n\nWhen you confirm a [SetupIntent](/api/setup_intents), it needs to have an attached [PaymentMethod](/api/payment_methods).\n\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmCashappSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you would like to [handle displaying the Cash App Pay QR code or handle the authorization redirect](docs/payments/cash-app-pay/set-up-payment?platform=web\u0026ui=API#web-create-setup-intent) yourself.\n","validation":"boolean","required":false}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you would like to [handle displaying the Cash App Pay QR code or handle the authorization redirect](docs/payments/cash-app-pay/set-up-payment?platform=web\u0026ui=API#web-create-setup-intent) yourself.\n","validation":"boolean","required":false}]}]},"request":{"title":"Confirm a Cash App Pay setup","snippets":{"js":"stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      type: 'cashapp',\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(error, setupIntent) {\n  if (error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else if (setupIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (setupIntent.status === 'requires_action'){\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error, setupIntent} = await stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      type: 'cashapp',\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (setupIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (setupIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}},"returns":"By default, `stripe.confirmCashappSetup` will display Cash App Pay QR code in desktop web app, or trigger a redirect in mobile web app. If\nthere is an error, or when handling next actions manually by using the\n`handleActions: false` option, it will return a `Promise` which resolves with a `result`\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/cash-app-pay/set-up-payment) for all possible errors.\n","callout":"Note that `stripe.confirmCashappSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"Without an existing payment method","description":"If you have not already created a `PaymentMethod`, you can pass payment method parameters, and the newly created `PaymentMethod` will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with bank account information","snippets":{"js":"stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      type: 'cashapp',\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function(error, setupIntent) {\n  if (error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else if (setupIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (setupIntent.status === 'requires_action'){\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {error, setupIntent} = await stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      type: 'cashapp',\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n} else if (setupIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (setupIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"existing","title":"with an existing PaymentMethod","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmCashappSetup`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with an existing PaymentMethod","snippets":{"js":"stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n).then(function({error, setupIntent}) {\n  if (error) {\n    // Inform the customer that there was an error.\n    console.log(result.error.message);\n  } else if (setupIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (setupIntent.status === 'requires_action'){\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href\n  }\n);\n\nif (error) {\n  // Inform the customer that there was an error.\n  console.log(result.error.message);\n} else if (setupIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (setupIntent.status === 'requires_action'){\n  // Inform the customer that the payment did not go through\n}\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `return_url` and a `PaymentMethod` to this `SetupIntent`, then you can confirm without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}'\n).then(function({setupIntent, error}) {\n  if (error) {\n    // Inform the customer that there was an error.\n  } else if (setupIntent.status === 'succeeded') {\n    // Inform the customer that the payment was successful\n  } else if (setupIntent.status === 'requires_action') {\n    // Inform the customer that the payment did not go through\n  }\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmCashappSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}'\n);\nif (error) {\n  // Inform the customer that there was an error.\n} else if (setupIntent.status === 'succeeded') {\n  // Inform the customer that the payment was successful\n} else if (setupIntent.status === 'requires_action') {\n  // Inform the customer that the payment did not go through\n}\n"}}}],"section_tag":"stripe_confirm_cashapp_setup"},"display_on_load":true},"stripe_confirm_ideal_setup":{"title":"Confirm iDEAL setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_ideal_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_ideal_setup","gate":false,"data":{"section_type":"method","title":"Confirm iDEAL setup","description":"Use `stripe.confirmIdealSetup` in the [Set up future payments](/payments/ideal/set-up-payment) flow to use iDEAL bank details to set up a\nSEPA Direct Debit payment method for future payments. When called, it will confirm a `SetupIntent` with `data` you provide, and it will\nautomatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified `return_url`.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/ideal/set-up-payment) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmIdealSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal/accept-a-payment?platform=web#web-handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/ideal/accept-a-payment?platform=web#web-handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm iDEAL setup","snippets":{"js":"stripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmIdealSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      ideal: idealBankElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}},"callout":"Note that `stripe.confirmIdealSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","returns":"`stripe.confirmIdealSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new SEPA Direct Debit `PaymentMethod` with `stripe.confirmIdealSetup` by passing an `idealBank` [Element](/js/element) to `payment_method[ideal]`.\nThe new `PaymentMethod` will be created with the data collected by the `Element` and will be used to confirm the `SetupIntent`.\nAdditionally, to create a SEPA Direct Debit `PaymentMethod`, you are required to collect and include the customer’s name and email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by an `idealBank`\nElement.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"ideal","documentation":"An `idealBank` [Element](/js/element).\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: idealBankElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmIdealSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      ideal: idealBankElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmIdealSetup` and it will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmIdealSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s bank or want to collect it yourself, then you do not need to use the `idealBank` [Element](/js/element).\nYou can pass in the customer’s [bank code](/payments/ideal/accept-a-payment?platform=web\u0026ui=element#bank-reference) directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm using data collected by an `idealBank`\nElement.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"ideal","documentation":"An object detailing the customer's iDEAL bank.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"bank","documentation":"The customer's [bank](/payments/ideal/accept-a-payment?platform=web\u0026ui=element#bank-reference).\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmIdealSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      ideal: {\n        bank: 'abn_amro',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmIdealSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      ideal: {\n        bank: 'abn_amro',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}}],"section_tag":"stripe_confirm_ideal_setup"},"display_on_load":true},"stripe_confirm_paypal_setup":{"title":"Confirm PayPal setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_paypal_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_paypal_setup","gate":false,"data":{"section_type":"method","title":"Confirm a PayPal setup","description":"Use `stripe.confirmPayPalSetup` in the [PayPal Payments with Setup Intents](/payments/paypal/set-up-payment) flow when the customer submits your setup form.\nWhen called, it will confirm the `SetupIntent`, and it will automatically redirect the customer to authorize the setup.\nOnce authorization is complete, the customer will be redirected back to your specified `return_url`.\n","signature":{"object_name":"stripe","method_name":"confirmPayPalSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\nSee the use case sections below for details.\n","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing [PaymentMethod](/api/payment_methods).\nSee the use case sections below for details.\n","validation":"string | object"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]}]},"request":{"title":"Confirm a PayPal setup","snippets":{"js":"stripe\n  .confirmPayPalSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmPayPalSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  },\n);\n"}},"returns":"`stripe.confirmPayPalSetup` will trigger a redirect when successful.\nIf there is an error, it will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPayPalSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"with a new PaymentMethod","description":"You can confirm the `SetupIntent` using `stripe.confirmPayPalSetup` without\npassing in any additional data. This will automatically create and attach a new\n`PaymentMethod`.\n","table_content":{"title":"Data argument properties","items":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with a new PaymentMethod","snippets":{"js":"stripe\n  .confirmPayPalSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmPayPalSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmPayPalSetup` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmPayPalPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmPayPalPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `SetupIntent`, then you can confirm the `SetupIntent` using `stripe.confirmPayPalSetup` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmPayPalSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmPayPalSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    // Return URL where the customer should be redirected after\n    // the authorization.\n    return_url: \"https://example.com/setup/complete\",\n  },\n);\n"}}}],"section_tag":"stripe_confirm_paypal_setup"},"display_on_load":true},"stripe_confirm_payto_setup":{"title":"Confirm PayTo setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_payto_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_payto_setup","gate":false,"data":{"section_type":"method","title":"Confirm a PayTo setup","description":"Use `stripe.confirmPayToSetup` in the [PayTo Payments with Setup Intents](/payments/payto/set-up-payment) flow when the customer submits your setup form.\nWhen called, it will confirm the `SetupIntent`, and send a request for authorization to the customer.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIf you've already attached a `PaymentMethod`, you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmPayToSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to manually handle polling for SetupIntent updates.\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Either the `id` of an existing [PaymentMethod](/api/payment_methods), or an object containing data to create a `PaymentMethod` with.\nSee the use case sections below for details.\n","validation":"string | object"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to manually handle polling for SetupIntent updates.\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm a PayTo setup","snippets":{"js":"stripe\n  .confirmPayToSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    {\n      payment_method: {\n        billing_details: {\n          name: 'Jenny Rosen',\n          // Email is only required if `pay_id` is used\n          email: 'jenny@example.com'\n        },\n        payto: {\n          pay_id: 'jenny@example.com'\n          // Alternatively, provide bank account details\n          account_number: '000123456',\n          bsb_number: '000000'\n        }\n      }\n    }\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmPayToSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        // Email is only required if `pay_id` is used\n        email: 'jenny@example.com'\n      },\n      payto: {\n        pay_id: 'jenny@example.com'\n        // Alternatively, provide bank account details\n        account_number: '000123456',\n        bsb_number: '000000'\n      }\n    }\n  }\n);\n"}},"returns":"By default, `stripe.confirmPayToSetup` will poll for updates to the `SetupIntent`.\nIf there's an error, or when handling `next_action`s manually by using the `handleActions: false` option, it returns a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","callout":"Note that `stripe.confirmPayToSetup` might take some time to complete while waiting for customers to authorize the PayTo agreement.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","use_cases":[{"name":"new","title":"with a new PaymentMethod","description":"You can confirm the `SetupIntent` using `stripe.confirmPayToSetup` without\npassing in any additional data. This will automatically create and attach a new\n`PaymentMethod`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass payment method billing details.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing_details](/api/payment_methods/create#create_payment_method-billing_details) associated with the payment. The email is required if the customer is paying with PayID.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"email","validation":"string","required":false},{"name":"name","validation":"string","required":true}]},{"name":"payto","documentation":"The [PayTo payment method details](/api/payment_methods/create#create_payment_method-payto) associated with the customer's bank account. Either `pay_id` or `account_number` and `bsb_number` must be provided.\n","validation":"object","required":true,"expanded":false,"subspec":[{"name":"pay_id","validation":"string","required":false},{"name":"account_number","validation":"string","required":false},{"name":"bsb_number","validation":"string","required":false}]}]}]},"request":{"title":"Confirm with a new PaymentMethod","snippets":{"js":"stripe\n  .confirmPayToSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    {\n      payment_method: {\n        billing_details: {\n          name: 'Jenny Rosen',\n          // Email is only required if `pay_id` is used\n          email: 'jenny@example.com'\n        },\n        payto: {\n          pay_id: 'jenny@example.com'\n          // Alternatively, provide bank account details\n          account_number: '000123456',\n          bsb_number: '000000'\n        }\n      }\n    }\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmPayToSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      billing_details: {\n        name: 'Jenny Rosen',\n        // Email is only required if `pay_id` is used\n        email: 'jenny@example.com'\n      },\n      payto: {\n        pay_id: 'jenny@example.com'\n        // Alternatively, provide bank account details\n        account_number: '000123456',\n        bsb_number: '000000'\n      }\n    }\n  }\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"Use `stripe.confirmPayToSetup` with an existing `PaymentMethod` by passing its `id` to `payment_method`.\nThe `PaymentMethod` will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmPayToPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}'\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmPayToPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}'\n  },\n);\n"}}},{"name":"attached","title":"with an attached PaymentMethod","description":"If you have already attached a `PaymentMethod` to this `SetupIntent`, then you can confirm the `SetupIntent` using `stripe.confirmPayToSetup` without passing in any additional data.\n","request":{"title":"Confirm with an attached PaymentMethod","snippets":{"js":"stripe\n  .confirmPayToSetup('{SETUP_INTENT_CLIENT_SECRET}')\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmPayToSetup('{SETUP_INTENT_CLIENT_SECRET}');\n"}}}],"section_tag":"stripe_confirm_payto_setup"},"display_on_load":true},"stripe_confirm_sepa_debit_setup":{"title":"Confirm SEPA Debit setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_sepa_debit_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_sepa_debit_setup","gate":false,"data":{"section_type":"method","title":"Confirm SEPA Debit setup","description":"Use `stripe.confirmSepaDebitSetup` in the [SEPA Direct Debit with Setup Intents](/payments/sepa-debit-setup-intents) flow when the customer submits your payment form.\nWhen called, it will confirm the `SetupIntent` with `data` you provide.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/sepa-debit-setup-intents) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmSepaDebitSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"}]}]},"request":{"title":"Confirm SEPA Debit setup","snippets":{"js":"stripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmSepaDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}},"callout":"Note that `stripe.confirmSepaDebitSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","returns":"`stripe.confirmSepaDebitSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"with_element","title":"with payment data from an Element","description":"Create and attach a new `PaymentMethod` with `stripe.confirmSepaDebitSetup` by passing an `iban` [Element](/js/element) to `payment_method[sepa_debit]`.\nThe new `PaymentMethod` will be created with the data collected by the `Element` and will be used to confirm the `SetupIntent`.\nAdditionally, to create a SEPA Direct Debit `PaymentMethod`, you are required to collect and include the customer’s name and email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an `object` to confirm using data collected by an `iban`\nElement.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"sepa_debit","documentation":"An `iban` [Element](/js/element).\n","validation":"Element","required":true},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with an Element","snippets":{"js":"stripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmSepaDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sepa_debit: ibanElement,\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}}},{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmSepaDebitSetup` and it will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmSepaDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"If you already know the customer’s IBAN account number or want to collect it yourself, then you do not need to use the `iban` [Element](/js/element).\nYou can pass in the customer’s account number directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\nAdditionally, to create a SEPA Direct Debit `PaymentMethod`, you are required to collect and include the customer’s name and email address.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an `object` to confirm using data collected by an `iban`\nElement.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"sepa_debit","documentation":"An object of self-collected IBAN data.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"iban","documentation":"An IBAN account number.\n","validation":"string","required":true}]},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmSepaDebitSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sepa_debit: {\n        iban: 'DE89370400440532013000',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmSepaDebitSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sepa_debit: {\n        iban: 'DE89370400440532013000',\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n  },\n);\n"}}}],"section_tag":"stripe_confirm_sepa_debit_setup"},"display_on_load":true},"stripe_confirm_sofort_setup":{"title":"Confirm Sofort setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_confirm_sofort_setup","section_anchor":"confirm_setup_intent_payment_method","subsection_anchors":null,"path":"/setup_intents/confirm_sofort_setup","gate":false,"data":{"section_type":"method","title":"Confirm Sofort setup","description":"Use `stripe.confirmSofortSetup` in the [Set up future payments](/payments/sofort/set-up-payment) flow to use SOFORT bank details to set up a\nSEPA Direct Debit payment method for future payments. When called, it will confirm a `SetupIntent` with `data` you provide, and it will\nautomatically redirect the customer to authorize the transaction. Once authorization is complete, the customer will be redirected back to your specified `return_url`.\nNote that there are some additional requirements to this flow that are not covered in this reference.\nRefer to our [integration guide](/payments/sofort/set-up-payment) for more details.\n\nWhen you confirm a `SetupIntent`, it needs to have an attached [PaymentMethod](/api/payment_methods).\nIn addition to confirming the `SetupIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\nIt can also be called with an existing `PaymentMethod`, or if you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\nThese use cases are detailed in the sections that follow.\n","signature":{"object_name":"stripe","method_name":"confirmSofortSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/sofort/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\nRefer to the [Setup Intents API](/api/setup_intents/confirm) for a full list of parameters.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"The `id` of an existing PaymentMethod or an object of collected data.\nSee use cases below for details.\n","validation":"object | string","badge_text":"recommended"},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},{"name":"options","documentation":"An options object to control the behavior of this method.\n","validation":"object","expanded":true,"subspec":[{"name":"handleActions","documentation":"Set this to `false` if you want to [manually handle the authorization redirect](/payments/sofort/accept-a-payment?platform=web#handle-redirect).\nDefault is `true`.\n","validation":"boolean"}]}]},"request":{"title":"Confirm SOFORT setup","snippets":{"js":"stripe\n  .confirmSofortSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmSofortSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}},"callout":"Note that `stripe.confirmSofortSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","returns":"`stripe.confirmSofortSetup` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","use_cases":[{"name":"existing","title":"with an existing payment method","description":"If you have already created a `PaymentMethod`, you can pass its `id` to `payment_method` when calling `stripe.confirmSofortSetup` and it will be used to confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"The `id` of an existing `PaymentMethod`.\n","validation":"string","required":true},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with existing payment method","snippets":{"js":"stripe\n  .confirmSofortSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {error, setupIntent} = await stripe.confirmSofortSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}}},{"name":"self_collected","title":"with self collected data","description":"Your customer's name, email and the country of their bank are required for the SOFORT authorization to succeed.\nYou can pass in these properties directly to create a new `PaymentMethod` and confirm the `SetupIntent`.\n","table_content":{"title":"Data argument properties","items":[{"name":"payment_method","documentation":"Pass an object to confirm with the customer's name and email.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"country","documentation":"The country code where customer's bank is located.\n","validation":"string","required":true},{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` and `email` are required.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":true}]}]},{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication.\n","validation":"string","badge_text":"recommended"}]},"request":{"title":"Confirm with self collected data","snippets":{"js":"stripe\n  .confirmSofortSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  })\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n    }\n  });\n","es_next":"const {error} = await stripe.confirmSofortSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: {\n      sofort: {\n        country: 'DE'\n      },\n      billing_details: {\n        name: 'Jenny Rosen',\n        email: 'jenny@example.com',\n      },\n    },\n    // Return URL where the customer should be redirected after the authorization.\n    return_url: window.location.href,\n  },\n);\n"}}}],"section_tag":"stripe_confirm_sofort_setup"},"display_on_load":true},"stripe_retrieve_setup_intent":{"title":"Retrieve a SetupIntent","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_retrieve_setup_intent","section_anchor":"stripe_retrieve_setup_intent","subsection_anchors":null,"path":"/setup_intents/retrieve_setup_intent","gate":false,"data":{"section_type":"method","title":"Retrieve a SetupIntent","description":"Retrieve a [SetupIntent](/api/setup_intents) using its client secret.\n","signature":{"object_name":"stripe","method_name":"retrieveSetupIntent","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` to retrieve.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` to retrieve.\n","validation":"string","required":true}]},"request":{"title":"Retrieve a SetupIntent","snippets":{"js":"stripe\n  .retrieveSetupIntent(\n    '{SETUP_INTENT_CLIENT_SECRET}',\n  )\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.retrieveSetupIntent(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n);\n\n// Handle result.error or result.paymentIntent\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.setupIntent`: a [SetupIntent](/api/setup_intents) was retrieved successfully.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_retrieve_setup_intent"},"display_on_load":true},"stripe_verify_microdeposits_for_setup":{"title":"Verify with micro-deposits for setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_verify_microdeposits_for_setup","section_anchor":"stripe_verify_microdeposits_for_setup","subsection_anchors":null,"path":"/setup_intents/verify_microdeposits_for_setup","gate":false,"data":{"section_type":"method","title":"Verify with micro-deposits for setup","description":"Use `stripe.verifyMicrodepositsForSetup` in the [Save details for future payments with pre-authorized debit in Canada](/payments/acss-debit/set-up-payment) or [Save details for future payments with ACH Direct Debit](/payments/ach-debit/set-up-payment) flow to verify a customer's bank account with micro-deposits.\n\nIt should be only called when [SetupIntent](/api/setup_intents) is in the `requires_action` state, and contains a `next_action` field that has a `type` equal to `verify_with_microdeposits`.\nRefer to our [integration guide](/payments/acss-debit/set-up-payment) for more details.\n","signature":{"object_name":"stripe","method_name":"verifyMicrodepositsForSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"amounts","documentation":"An array of two positive integers, in *cents*, equal to the values of the micro-deposits sent to the bank account.\n","validation":"array"},{"name":"descriptor_code","documentation":"A six-character code starting with SM present in the microdeposit sent to the bank account.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"amounts","documentation":"An array of two positive integers, in *cents*, equal to the values of the micro-deposits sent to the bank account.\n","validation":"array"},{"name":"descriptor_code","documentation":"A six-character code starting with SM present in the microdeposit sent to the bank account.\n","validation":"string"}]}]},"request":{"title":"Verify with micro-deposits for setup","snippets":{"js":"stripe.verifyMicrodepositsForSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    amounts: [32, 45],\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\n","es_next":"const {setupIntent, error} = await stripe.verifyMicrodepositsForSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    amounts: [32, 45],\n  }\n);\n\n// Handle the setupIntent or error\n"}},"returns":"`stripe.verifyMicrodepositsForSetup` will return a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.setupIntent`: the [SetupIntent](/api/setup_intents) with a `status` of `succeeded`.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) and our [integration guide](/payments/acss-debit/set-up-payment) for all possible errors.\n","callout":"Verification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a `payment_intent.payment_failed` webhook event.\nRefer to our [integration guide](/payments/acss-debit/accept-a-payment) for more details.\n","section_tag":"stripe_verify_microdeposits_for_setup"},"display_on_load":true},"stripe_handle_next_action_for_setup":{"title":"Handle a next action","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_handle_next_action_for_setup","section_anchor":"stripe_handle_next_action_for_setup","subsection_anchors":null,"path":"/setup_intents/handle_next_action","gate":false,"data":{"section_type":"method","title":"Handle a next action","description":"Use `stripe.handleNextAction` in the [finalizing payments on the server](/payments/finalize-payments-on-the-server#next-actions)\nflow to finish confirmation of a [SetupIntent](/api/setup_intents) with the `requires_action` status.\nIt will throw an error if the SetupIntent has a different status.\n\nDepending on the payment method and required action, the customer may be temporarily redirected from your site\nand brought back to the `return_url` [parameter](/api/setup_intents/confirm#confirm_setup_intent-return_url) provided when the SetupIntent is confirmed.\n","callout":"Note that `stripe.handleNextAction` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleNextAction` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThe authentication challenge requires a context switch that can be hard to follow on a screen-reader.\nEnsure that your form is accessible by ensuring that success or error messages are clearly read out.\n","signature":{"object_name":"stripe","method_name":"handleNextAction","args":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string"}]}]},"request":{"title":"Handle a next action","snippets":{"js":"stripe.handleNextAction({\n  clientSecret: '{SETUP_INTENT_CLIENT_SECRET}'\n}).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\n","es_next":"const {\n  setupIntent,\n  error\n} = await stripe.handleNextAction({\n  clientSecret: '{SETUP_INTENT_CLIENT_SECRET}',\n});\n\n// Handle the setupIntent or error\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.setupIntent`: a [SetupIntent](/api/setup_intents) with the `processing` or `succeeded` status.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_next_action_for_setup"},"display_on_load":true},"stripe_collect_bank_account_for_setup":{"title":"Collect bank account details for setup","group_title":"Setup Intents","group_anchor":"setup_intents","anchor":"stripe_collect_bank_account_for_setup","section_anchor":"stripe_collect_bank_account_for_setup","subsection_anchors":null,"path":"/setup_intents/collect_bank_account_for_setup","gate":false,"data":{"section_type":"method","title":"Collect bank account details for setup","description":"Use `stripe.collectBankAccountForSetup` in the [Save bank details](/payments/ach-debit/set-up-payment) flow for the [ACH Direct Debit](/payments/ach-debit) payment method to collect the customer’s bank account in your payment form.\nWhen called, it will automatically load an on-page modal UI to collect bank account details and verification, and attach the [PaymentMethod](/api/payment_methods) to the [SetupIntent](/api/setup_intents).\n","signature":{"object_name":"stripe","method_name":"collectBankAccountForSetup","args":[{"name":"options","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"params","validation":"object","required":true,"expanded":true,"subspec":[{"name":"payment_method_type","documentation":"The payment method type for the bank account details (e.g. `us_bank_account`)\n","validation":"string","required":true},{"name":"payment_method_data","documentation":"Payment method specific data to be sent with the request\n","validation":"object","required":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` is required. Providing `email` allows your customer to receive [ACH Direct Debit mandate and microdeposit emails](/payments/ach-debit#mandate-and-microdeposit-emails).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]}]}],"required":true}]},"table_content":{"items":[{"name":"options","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"params","validation":"object","required":true,"expanded":true,"subspec":[{"name":"payment_method_type","documentation":"The payment method type for the bank account details (e.g. `us_bank_account`)\n","validation":"string","required":true},{"name":"payment_method_data","documentation":"Payment method specific data to be sent with the request\n","validation":"object","required":true,"subspec":[{"name":"billing_details","documentation":"The customer's [billing_details](/api/payment_methods/create#create_payment_method-billing_details).\n`name` is required. Providing `email` allows your customer to receive [ACH Direct Debit mandate and microdeposit emails](/payments/ach-debit#mandate-and-microdeposit-emails).\n","validation":"Object","required":true,"expanded":true,"subspec":[{"name":"name","documentation":"The customer's name. The first and last name must be at minimum 2 characters each.\n","validation":"string","required":true},{"name":"email","documentation":"The customer's email.\n","validation":"string","required":false}]}]}]}],"required":true}]},"request":{"title":"Collect bank account details for setup","snippets":{"js":"stripe.collectBankAccountForSetup(\n  {\n    clientSecret: '{SETUP_INTENT_CLIENT_SECRET}',\n    params: {\n      payment_method_type: 'us_bank_account',\n      payment_method_data: {\n        billing_details: {name: 'Jenny Rosen', email: 'jenny@example.com'},\n      },\n    },\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\n","es_next":"const {setupIntent, error} = await stripe.collectBankAccountForSetup(\n  {\n    clientSecret: '{SETUP_INTENT_CLIENT_SECRET}',\n    params: {\n      payment_method_type: 'us_bank_account',\n      payment_method_data: {\n        billing_details: {name: 'Jenny Rosen', email: 'jenny@example.com'},\n      },\n    },\n  }\n);\n\n// Handle the setupIntent or error\n"}},"returns":"When the `stripe.collectBankAccountForSetup` completes successfully, it returns a SetupIntent.\nIf the customer provided their account, the SetupIntent is in the `requires_confirmation` state. If the customer closed the dialog without providing their account, the SetupIntent is in the `requires_payment_method` state.\nUse [stripe.confirmUsBankAccountSetup](/js/setup_intents/confirm_us_bank_account_setup) to complete the process.\n","section_tag":"stripe_collect_bank_account_for_setup"},"display_on_load":true},"payment_request_intro":{"title":"Introduction","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_intro","section_anchor":"payment_request_intro","subsection_anchors":null,"path":"/payment_request","gate":false,"data":{"section_type":"generic","title":"The Payment Request object","description":"A `PaymentRequest` object is used to collect payment information through an interface controlled and styled by the browser itself (i.e., not by you or your page).\n\nSee the [Payment Request Button Element quickstart](/stripe-js/elements/payment-request-button) for a high-level overview of when you’d want to do this.\n","section_tag":"payment_request_intro"},"display_on_load":true},"stripe_payment_request":{"title":"Create a PaymentRequest object","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"stripe_payment_request","section_anchor":"stripe_payment_request","subsection_anchors":null,"path":"/payment_request/create","gate":false,"data":{"section_type":"method","title":"Create a PaymentRequestObject","description":"Use `stripe.paymentRequest` to create a `PaymentRequest` object.\nCreating a `PaymentRequest` requires that you configure it with an `options` object.\n\nIn Safari, `stripe.paymentRequest` uses Apple Pay, and in other browsers it uses the [Payment Request API standard](https://www.w3.org/TR/payment-request/).\n","callout":"`stripe.paymentRequest` abstracts over a number of implementation\ndetails to work uniformly across Apple Pay and the Payment Request\nbrowser standard. In particular, under the hood we set `supportedNetworks`\nto its most permissive setting, dynamically accounting for country\nand platform. It is currently not possible to override this and make\n`supportedNetworks` be more restrictive.\n","signature":{"object_name":"stripe","method_name":"paymentRequest","args":[{"name":"options","required":true,"expanded":true,"validation":"object","documentation":"A set of options to create this `PaymentRequest` instance with.\nThese options can be updated using [`paymentRequest.update`](/js/payment_request/update).\n","subspec":[{"name":"country","documentation":"The two-letter country code of your Stripe account (e.g., `US`).\n","validation":"string","required":true},{"name":"currency","documentation":"Three character currency code (e.g., `usd`).\n","validation":"string","required":true},{"name":"total","documentation":"A [PaymentItem](#payment_item_object) object.\nThis `PaymentItem` is shown to the customer in the browser’s payment interface.\n","validation":"PaymentItem","required":true},{"name":"displayItems","documentation":"An array of [PaymentItem](#payment_item_object) objects.\nThese objects are shown as line items in the browser’s payment interface.\nNote that the sum of the line item amounts does not need to add up to the `total` amount above.\n","validation":"array","required":false},{"name":"requestPayerName","documentation":"By default, the browser‘s payment interface only asks the customer for actual payment information.\nA customer name can be collected by setting this option to `true`.\nThis collected name will appears in the [PaymentResponse](/js/appendix/payment_response) object.\n\nWe highly recommend you collect name as this also results in collection of billing address for Apple Pay.\nThe billing address can be used to perform address verification and block fraudulent payments.\nFor all other payment methods, the billing address is automatically collected when available.\n","validation":"boolean","required":false,"badge_text":"recommended"},{"name":"requestPayerEmail","documentation":"See the [`requestPayerName`](#payment_request_create-options-requestPayerName) option.\n","validation":"boolean","required":false},{"name":"requestPayerPhone","documentation":"See the [`requestPayerName`](#payment_request_create-options-requestPayerName) option.\n","validation":"boolean","required":false},{"name":"requestShipping","documentation":"Collect shipping address by setting this option to `true`.\nThe address appears in the [PaymentResponse](/js/appendix/payment_response).\n\nYou must also supply a valid [ShippingOptions] to the `shippingOptions` property.\nThis can be up front at the time `stripe.paymentRequest` is called, or in response to a `shippingaddresschange` event using the `updateWith` callback.\n","validation":"boolean","required":false},{"name":"shippingOptions","documentation":"An array of [ShippingOption](/js/appendix/shipping_option) objects.\nThe first shipping option listed appears in the browser payment interface as the default option.\n","validation":"array","required":false},{"name":"disableWallets","documentation":"An array of wallet strings.\nCan be one or more of `applePay`, `googlePay`, `link`, and `browserCard`.\nUse this option to disable Apple Pay, Google Pay, Link, and/or browser-saved cards.\n","validation":"array","required":false},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]},{"name":"onBehalfOf","documentation":"The Stripe account ID which is the business of record. See [use cases](/connect/charges) to determine if this option is relevant for your integration. This should match the [on_behalf_of](/api/payment_intents/create#create_payment_intent-on_behalf_of) provided on the Intent used when confirming payment.\n","validation":"string","requirement_text":"Connect only"}]}]},"table_content":{"items":[{"name":"options","required":true,"expanded":true,"validation":"object","documentation":"A set of options to create this `PaymentRequest` instance with.\nThese options can be updated using [`paymentRequest.update`](/js/payment_request/update).\n","subspec":[{"name":"country","documentation":"The two-letter country code of your Stripe account (e.g., `US`).\n","validation":"string","required":true},{"name":"currency","documentation":"Three character currency code (e.g., `usd`).\n","validation":"string","required":true},{"name":"total","documentation":"A [PaymentItem](#payment_item_object) object.\nThis `PaymentItem` is shown to the customer in the browser’s payment interface.\n","validation":"PaymentItem","required":true},{"name":"displayItems","documentation":"An array of [PaymentItem](#payment_item_object) objects.\nThese objects are shown as line items in the browser’s payment interface.\nNote that the sum of the line item amounts does not need to add up to the `total` amount above.\n","validation":"array","required":false},{"name":"requestPayerName","documentation":"By default, the browser‘s payment interface only asks the customer for actual payment information.\nA customer name can be collected by setting this option to `true`.\nThis collected name will appears in the [PaymentResponse](/js/appendix/payment_response) object.\n\nWe highly recommend you collect name as this also results in collection of billing address for Apple Pay.\nThe billing address can be used to perform address verification and block fraudulent payments.\nFor all other payment methods, the billing address is automatically collected when available.\n","validation":"boolean","required":false,"badge_text":"recommended"},{"name":"requestPayerEmail","documentation":"See the [`requestPayerName`](#payment_request_create-options-requestPayerName) option.\n","validation":"boolean","required":false},{"name":"requestPayerPhone","documentation":"See the [`requestPayerName`](#payment_request_create-options-requestPayerName) option.\n","validation":"boolean","required":false},{"name":"requestShipping","documentation":"Collect shipping address by setting this option to `true`.\nThe address appears in the [PaymentResponse](/js/appendix/payment_response).\n\nYou must also supply a valid [ShippingOptions] to the `shippingOptions` property.\nThis can be up front at the time `stripe.paymentRequest` is called, or in response to a `shippingaddresschange` event using the `updateWith` callback.\n","validation":"boolean","required":false},{"name":"shippingOptions","documentation":"An array of [ShippingOption](/js/appendix/shipping_option) objects.\nThe first shipping option listed appears in the browser payment interface as the default option.\n","validation":"array","required":false},{"name":"disableWallets","documentation":"An array of wallet strings.\nCan be one or more of `applePay`, `googlePay`, `link`, and `browserCard`.\nUse this option to disable Apple Pay, Google Pay, Link, and/or browser-saved cards.\n","validation":"array","required":false},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]},{"name":"onBehalfOf","documentation":"The Stripe account ID which is the business of record. See [use cases](/connect/charges) to determine if this option is relevant for your integration. This should match the [on_behalf_of](/api/payment_intents/create#create_payment_intent-on_behalf_of) provided on the Intent used when confirming payment.\n","validation":"string","requirement_text":"Connect only"}]}]},"request":{"title":"Create a PaymentRequestObject","snippets":{"js":"var paymentRequest = stripe.paymentRequest({\n  country: 'US',\n  currency: 'usd',\n  total: {\n    label: 'Demo total',\n    amount: 1000,\n  },\n  requestPayerName: true,\n  requestPayerEmail: true,\n});\n","es_next":"const paymentRequest = stripe.paymentRequest({\n  country: 'US',\n  currency: 'usd',\n  total: {\n    label: 'Demo total',\n    amount: 1000,\n  },\n  requestPayerName: true,\n  requestPayerEmail: true,\n});\n"}},"section_tag":"stripe_payment_request"},"display_on_load":true},"payment_request_can_make_payment":{"title":"Check if a payment can be made","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_can_make_payment","section_anchor":"payment_request_can_make_payment","subsection_anchors":null,"path":"/payment_request/can_make_payment","gate":false,"data":{"section_type":"method","title":"Check if a payment can be made","description":"Returns a `Promise` that resolves with an object detailing if an\nenabled wallet is ready to pay. If no wallet is available, it\nresolves with `null`. The resolution object has the properties\nin the table below.\n\n**NOTE**: The `paymentRequestButton` element automatically shows the correct wallet branding.\nYou shouldn't need to inspect the return object's properties unless you are building your own custom button.\n","signature":{"object_name":"paymentRequest","method_name":"canMakePayment"},"callout":"`canMakePayment` resolves to `null` outside the following supported cases:\n\n* Safari 10.1+ (desktop and mobile)\n  * with a saved Apple Pay card\n  * or when in a Private Browsing window\n  * or when the “Allow websites to check if Apple Pay is set up” preference is disabled\n* Chrome 61+ (desktop and mobile)\n  * with a saved Google Pay card\n  * or when the browser has a saved card (i.e. autofill)\n\nFor more information, see [Testing your integration](/stripe-js/elements/payment-request-button#testing).\n","table_content":{"title":"Return object properties","items":[{"name":"applePay","documentation":"`true` if Apple Pay wallet is ready to pay.\nIn this case:\n  - `paymentRequestButton` Element will show as a branded Apple Pay button automatically.\n  - When using a custom button, you‘ll want to show a button that conforms to the Apple Pay [Human Interface Guidelines](https://developer.apple.com/apple-pay/web-human-interface-guidelines/).\n","validation":"boolean"},{"name":"googlePay","documentation":"`true` if Google Pay wallet is ready to pay.\nIn this case:\n  - `paymentRequestButton` Element will show as a branded Google Pay button automatically.\n  - When using a custom button, you'll want to show a button that conforms to the Google Pay [Brand Guidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines).\n","validation":"boolean"},{"name":"link","documentation":"`true` if Link wallet is ready to pay.\nIn this case:\n  - `paymentRequestButton` Element will show as a branded Link button automatically.\n  - Link is not supported in custom button configurations.\n","validation":"boolean"}]},"request":{"title":"paymentRequest.canMakePayment","snippets":{"es_next":"const result = await paymentRequest.canMakePayment();\nif (result) {\n  // Mount paymentRequestButtonElement to the DOM\n}\n","js":"paymentRequest.canMakePayment().then(result =\u003E {\n  if (result) {\n    // Mount paymentRequestButtonElement to the DOM\n  }\n});\n"}},"response":{"title":"Return object","snippets":{"success":"{\n  applePay: true,\n  googlePay: false,\n  link: false,\n}\n"}},"section_tag":"payment_request_can_make_payment"},"display_on_load":true},"payment_request_show":{"title":"Show the payment request interface","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_show","section_anchor":"payment_request_show","subsection_anchors":null,"path":"/payment_request/show","gate":false,"data":{"section_type":"method","title":"Show the payment request interface","description":"Shows the browser’s payment interface.\nWhen using the `paymentRequestButton` [Element](/js/element), this is called for you automatically.\nThis method must be called as the result of a user interaction (for example, in a click handler).\n","signature":{"object_name":"paymentRequest","method_name":"show"},"request":{"title":"Show the payment request interface","snippets":{"js":"paymentRequest.show();\n","es_next":"paymentRequest.show();\n"}},"section_tag":"payment_request_show"},"display_on_load":true},"payment_request_update":{"title":"Update a PaymentRequest object","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_update","section_anchor":"payment_request_update","subsection_anchors":null,"path":"/payment_request/update","gate":false,"data":{"section_type":"method","title":"Update a PaymentRequest object","description":"`PaymentRequest` instances can be updated with an options object.\nAvailable options are documented below.\n\n`paymentRequest.update` can only be called when the browser payment interface is not showing.\nListen to the [click](/js/element/events) and [cancel](/js/element/events) events to detect if the payment interface has been initiated.\nTo update the `PaymentRequest` right before the payment interface is initiated, call `paymentRequest.update` in your click event handler.\n","signature":{"object_name":"paymentRequest","method_name":"update","args":[{"name":"options","required":true,"validation":"object","documentation":"A set of options to update this PaymentRequest instance with.\n","expanded":true,"subspec":[{"name":"currency","documentation":"Three character currency code (e.g., `usd`).\n","validation":"string","required":false},{"name":"total","documentation":"A [PaymentItem](#payment_item_object) object.\nThis `PaymentItem` is shown to the customer in the browser’s payment interface.\n","validation":"object","required":false},{"name":"displayItems","documentation":"An array of [PaymentItem](#payment_item_object) objects.\nThese payment items are shown as line items in the browser’s payment interface.\nNote that the sum of the line item amounts does not need to add up to the `total` amount above.\n","validation":"array","required":false},{"name":"shippingOptions","documentation":"An array of [ShippingOption](/js/appendix/shipping_option) objects.\nThe first shipping option listed appears in the browser payment interface as the default option.\n","validation":"array","required":false},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]}]}]},"table_content":{"items":[{"name":"options","required":true,"validation":"object","documentation":"A set of options to update this PaymentRequest instance with.\n","expanded":true,"subspec":[{"name":"currency","documentation":"Three character currency code (e.g., `usd`).\n","validation":"string","required":false},{"name":"total","documentation":"A [PaymentItem](#payment_item_object) object.\nThis `PaymentItem` is shown to the customer in the browser’s payment interface.\n","validation":"object","required":false},{"name":"displayItems","documentation":"An array of [PaymentItem](#payment_item_object) objects.\nThese payment items are shown as line items in the browser’s payment interface.\nNote that the sum of the line item amounts does not need to add up to the `total` amount above.\n","validation":"array","required":false},{"name":"shippingOptions","documentation":"An array of [ShippingOption](/js/appendix/shipping_option) objects.\nThe first shipping option listed appears in the browser payment interface as the default option.\n","validation":"array","required":false},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"billingAgreement","validation":"string"}]},{"name":"deferredPaymentRequest","documentation":"Specify a request to set up a deferred payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaydeferredpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"deferredBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"deferredPaymentDate","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"},{"name":"freeCancellationDate","validation":"Date","documentation":"If set, you must also supply a freeCancellationDateTimeZone.\n"},{"name":"freeCancellationDateTimeZone","validation":"string","documentation":"If set, you must also supply a freeCancellationDate.\n\nThese are [tz](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezones such as `America/Los_Angeles`, `Europe/Dublin`, and `Asia/Singapore`.\n"}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]},{"name":"billingAgreement","validation":"string"}]}]}]}]},"request":{"title":"Update a PaymentRequest","snippets":{"js":"paymentRequest.update({\n  total: {\n    label: 'Demo total',\n    amount: 2000,\n  },\n  shippingOptions: [\n    {\n      id: 'basic',\n      label: 'Ground shipping',\n      detail: 'Ground shipping via UPS or FedEx',\n      amount: 995,\n    },\n  ],\n});\n","es_next":"paymentRequest.update({\n  total: {\n    label: 'Demo total',\n    amount: 2000,\n  },\n  shippingOptions: [\n    {\n      id: 'basic',\n      label: 'Ground shipping',\n      detail: 'Ground shipping via UPS or FedEx',\n      amount: 995,\n    },\n  ],\n});\n"}},"section_tag":"payment_request_update"},"display_on_load":true},"payment_request_events":{"title":"Listen to PaymentRequest events","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_events","section_anchor":"payment_request_events","subsection_anchors":["payment_request_on_token","payment_request_on_payment_method","payment_request_on_source","payment_request_on_cancel","payment_request_on_shipping_address_change","payment_request_on_shipping_option_change"],"path":"/payment_request/events","gate":false,"data":{"section_type":"generic","title":"PaymentRequest events","description":"`PaymentRequest` instances emit several different types of events.\n","section_tag":"payment_request_events"},"display_on_load":true},"payment_request_on_token":{"title":"Token event","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_on_token","section_anchor":"payment_request_events","subsection_anchors":null,"path":"/payment_request/events/on_token","gate":false,"data":{"section_type":"method","title":"Token event","description":"Stripe.js automatically creates a [Token](/api/tokens) after the customer is done interacting with the browser’s payment interface.\nTo access the created `Token`, listen for this event.\n","signature":{"object_name":"paymentRequest","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `token`.\n","validation":"string","required":true,"render_as_value":"'token'"},{"name":"handler","documentation":"A callback function that will be called with a [PaymentResponse](/js/appendix/payment_response) object when the event is fired.\nThe `PaymentResponse` object will contain a `token` field.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `token`.\n","validation":"string","required":true,"render_as_value":"'token'"},{"name":"handler","documentation":"A callback function that will be called with a [PaymentResponse](/js/appendix/payment_response) object when the event is fired.\nThe `PaymentResponse` object will contain a `token` field.\n","validation":"function","required":true}]},"request":{"title":"Handle 'token' event","snippets":{"js":"paymentRequest.on('token', function(event) {\n  // event.token is available\n});\n","es_next":"paymentRequest.on('token', ({token}) =\u003E {\n  // token is available\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  token: {\n    id: \"tok_1FlM3yDbZnUGiCm0LMM4gqzs\",\n    object: \"token\",\n    // ...\n  },\n  complete: function(status) {\n    // Call this when you have processed the token data provided by\n    // the API. Note that you must must call complete within 30\n    // seconds.\n  },\n  ...,\n}\n"}},"section_tag":"payment_request_on_token"},"display_on_load":true},"payment_request_on_payment_method":{"title":"PaymentMethod event","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_on_payment_method","section_anchor":"payment_request_events","subsection_anchors":null,"path":"/payment_request/events/on_paymentmethod","gate":false,"data":{"section_type":"method","title":"PaymentMethod event","description":"Stripe.js automatically creates a [PaymentMethod](/api/payment_methods) after the customer is done interacting with the browser’s payment interface.\nTo access the created `PaymentMethod`, listen for this event.\n","signature":{"object_name":"paymentRequest","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `paymentmethod`.\n","validation":"string","required":true,"render_as_value":"'paymentmethod'"},{"name":"handler","documentation":"A callback function that will be called with a [PaymentResponse](/js/appendix/payment_response) object when the event is fired.\nThe `PaymentResponse` object will contain a `paymentMethod` field.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `paymentmethod`.\n","validation":"string","required":true,"render_as_value":"'paymentmethod'"},{"name":"handler","documentation":"A callback function that will be called with a [PaymentResponse](/js/appendix/payment_response) object when the event is fired.\nThe `PaymentResponse` object will contain a `paymentMethod` field.\n","validation":"function","required":true}]},"request":{"title":"Handle 'paymentmethod' event","snippets":{"js":"paymentRequest.on('paymentmethod', function(event) {\n  // event.paymentMethod is available\n});\n","es_next":"paymentRequest.on('paymentmethod', ({paymentMethod}) =\u003E {\n  // paymentMethod is available\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  paymentMethod: {\n    id: \"src_1FlM3yDbZnUGiCm0P8eqjAuI\",\n    object: \"payment_method\",\n    // ...,\n  },\n  complete: function(status) {\n    // Call this when you have processed the payment method data\n    // provided by the API. Note that you must must call complete\n    // within 30 seconds.\n  },\n  ...,\n}\n"}},"section_tag":"payment_request_on_payment_method"},"display_on_load":true},"payment_request_on_source":{"title":"Source event","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_on_source","section_anchor":"payment_request_events","subsection_anchors":null,"path":"/payment_request/events/on_source","gate":false,"data":{"section_type":"method","title":"Source event","description":"Stripe.js automatically creates a [Source](/api/sources) after the customer is done interacting with the browser’s payment interface.\nTo access the created source, listen for this event.\n","signature":{"object_name":"paymentRequest","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `source`.\n","validation":"string","required":true,"render_as_value":"'source'"},{"name":"handler","documentation":"A callback function that will be called with a [PaymentResponse](/js/appendix/payment_response) object when the event is fired.\nThe `PaymentResponse` object will contain a `source` field.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `source`.\n","validation":"string","required":true,"render_as_value":"'source'"},{"name":"handler","documentation":"A callback function that will be called with a [PaymentResponse](/js/appendix/payment_response) object when the event is fired.\nThe `PaymentResponse` object will contain a `source` field.\n","validation":"function","required":true}]},"request":{"title":"Handle 'source' event","snippets":{"js":"paymentRequest.on('source', function(event) {\n  // event.source is available\n});\n","es_next":"paymentRequest.on('source', ({source}) =\u003E {\n  // source is available\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  source: {\n    id: \"src_1FlM3yDbZnUGiCm0P8eqjAuI\",\n    object: \"source\",\n    // ...\n  }\n  complete: function(status) {\n    // Call this when you have processed the source data provided\n    // by the API. Note that you must must call complete within 30\n    // seconds.\n  },\n  ...,\n}\n"}},"section_tag":"payment_request_on_source"},"display_on_load":true},"payment_request_on_cancel":{"title":"Cancel event","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_on_cancel","section_anchor":"payment_request_events","subsection_anchors":null,"path":"/payment_request/events/on_cancel","gate":false,"data":{"section_type":"method","title":"Cancel event","description":"The `cancel` event is emitted from a [PaymentRequest](/js/payment_request) when the browser‘s payment interface is dismissed.\n\nNote that in some browsers, the payment interface may be dismissed by the customer even after they authorize the payment.\nThis means that you may receive a `cancel` event on your PaymentRequest object after receiving a `token`, `paymentmethod`, or `source` event.\nIf you’re using the `cancel` event as a hook for canceling the customer’s order, make sure you also refund the payment that you just created.\n","signature":{"object_name":"paymentRequest","method_name":"on","args":[{"name":"event","documentation":"The name of the event.\nIn this case, `cancel`.\n","validation":"string","required":true,"render_as_value":"'cancel'"},{"name":"handler","documentation":"A callback function that you will provide that will be called when the event is fired.\n","validation":"function","required":true}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event.\nIn this case, `cancel`.\n","validation":"string","required":true,"render_as_value":"'cancel'"},{"name":"handler","documentation":"A callback function that you will provide that will be called when the event is fired.\n","validation":"function","required":true}]},"request":{"title":"Handle 'cancel' event","snippets":{"js":"paymentRequest.on('cancel', function() {\n  // handle cancel event\n});\n","es_next":"paymentRequest.on('cancel', () =\u003E {\n  // handle cancel event\n});\n"}},"section_tag":"payment_request_on_cancel"},"display_on_load":true},"payment_request_on_shipping_address_change":{"title":"Shipping address change event","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_on_shipping_address_change","section_anchor":"payment_request_events","subsection_anchors":null,"path":"/payment_request/events/on_shipping_address_change","gate":false,"data":{"section_type":"method","title":"Shipping address change event","description":"The `shippingaddresschange` event is emitted from a [PaymentRequest](/js/payment_request) whenever the customer selects a new address in the browser's payment interface.\n","signature":{"object_name":"paymentRequest","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `shippingaddresschange`.\n","validation":"string","required":true,"render_as_value":"'shippingaddresschange'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","required":true,"expanded":true,"subspec_title":"handler event object properties","subspec":[{"name":"updateWith","validation":"function","documentation":"`updateWith(updateDetails) =\u003E void` is a Stripe.js provided function that is called with an [UpdateDetails](/js/appendix/update_details) object to merge your updates into the current `PaymentRequest` object.\nNote that if you subscribe to `shippingaddresschange` events, then you must call `updateWith` within 30 seconds.\n"},{"name":"shippingAddress","validation":"ShippingAddress","documentation":"The customer's selected [ShippingAddress](/js/appendix/shipping_address).\n\nTo maintain privacy, browsers may anonymize the shipping address by removing sensitive information that is not necessary to calculate shipping costs.\nDepending on the country, some fields can be missing or partially redacted.\nFor example, the shipping address in the U.S. may only contain a city, state, and ZIP code.\nThe full shipping address appears in the [PaymentResponse](/js/appendix/payment_response) object after the purchase is confirmed in the browser’s payment interface\n"}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `shippingaddresschange`.\n","validation":"string","required":true,"render_as_value":"'shippingaddresschange'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","required":true,"expanded":true,"subspec_title":"handler event object properties","subspec":[{"name":"updateWith","validation":"function","documentation":"`updateWith(updateDetails) =\u003E void` is a Stripe.js provided function that is called with an [UpdateDetails](/js/appendix/update_details) object to merge your updates into the current `PaymentRequest` object.\nNote that if you subscribe to `shippingaddresschange` events, then you must call `updateWith` within 30 seconds.\n"},{"name":"shippingAddress","validation":"ShippingAddress","documentation":"The customer's selected [ShippingAddress](/js/appendix/shipping_address).\n\nTo maintain privacy, browsers may anonymize the shipping address by removing sensitive information that is not necessary to calculate shipping costs.\nDepending on the country, some fields can be missing or partially redacted.\nFor example, the shipping address in the U.S. may only contain a city, state, and ZIP code.\nThe full shipping address appears in the [PaymentResponse](/js/appendix/payment_response) object after the purchase is confirmed in the browser’s payment interface\n"}]}]},"request":{"title":"Handle 'shippingaddresschange' event","snippets":{"js":"paymentRequest.on('shippingaddresschange', function(event) {\n  var updateWith = event.updateWith;\n  var shippingAddress = event.shippingAddress;\n  // handle shippingaddresschange event\n\n  // call event.updateWith within 30 seconds\n  updateWith(updateDetails);\n});\n","es_next":"paymentRequest.on('shippingaddresschange', (event) =\u003E {\n  const {updateWith, shippingAddress} = event;\n  // handle shippingaddresschange event\n\n  // call event.updateWith within 30 seconds\n  updateWith(updateDetails);\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  shippingAddress: {\n    country: \"US\",\n    addressLine: [\n      \"185 Berry St.\",\n      \"Suite 500\",\n    ],\n    region: \"CA\",\n    city: \"San Francisco\",\n    ...,\n  },\n  updateWith: function(updateDetails) {\n    // Call this function to merge your updates into the current\n    // PaymentRequest object. Note that you must call this\n    // within 30 seconds.\n  },\n}\n"}},"section_tag":"payment_request_on_shipping_address_change"},"display_on_load":true},"payment_request_on_shipping_option_change":{"title":"Shipping option change event","group_title":"The Payment Request object","group_anchor":"payment_request","anchor":"payment_request_on_shipping_option_change","section_anchor":"payment_request_events","subsection_anchors":null,"path":"/payment_request/events/on_shipping_option_change","gate":false,"data":{"section_type":"method","title":"Shipping option change event","description":"The `shippingoptionchange` event is emitted from a [PaymentRequest](/js/payment_request) whenever the customer selects a new shipping option in the browser's payment interface.\n","signature":{"object_name":"paymentRequest","method_name":"on","args":[{"name":"event","documentation":"The name of the event. In this case, `shippingoptionchange`.\n","validation":"string","required":true,"render_as_value":"'shippingoptionchange'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","required":true,"expanded":true,"subspec_title":"handler event object properties","subspec":[{"name":"updateWith","validation":"function","documentation":"`updateWith(updateDetails) =\u003E void` is a Stripe.js provided function that is called with an [UpdateDetails](/js/appendix/update_details) object to merge your updates into the current `PaymentRequest` object.\nNote that if you subscribe to `shippingoptionchange` events, then you must call `updateWith` within 30 seconds.\n"},{"name":"shippingOption","validation":"ShippingOption","documentation":"The customer's selected [ShippingOption](/js/appendix/shipping_option).\n"}]}]},"table_content":{"items":[{"name":"event","documentation":"The name of the event. In this case, `shippingoptionchange`.\n","validation":"string","required":true,"render_as_value":"'shippingoptionchange'"},{"name":"handler","documentation":"`handler(event) =\u003E void` is a **callback function** that you provide that will be called when the event is fired.\n\nWhen called it will be passed an event object with the following properties:\n","validation":"function","required":true,"expanded":true,"subspec_title":"handler event object properties","subspec":[{"name":"updateWith","validation":"function","documentation":"`updateWith(updateDetails) =\u003E void` is a Stripe.js provided function that is called with an [UpdateDetails](/js/appendix/update_details) object to merge your updates into the current `PaymentRequest` object.\nNote that if you subscribe to `shippingoptionchange` events, then you must call `updateWith` within 30 seconds.\n"},{"name":"shippingOption","validation":"ShippingOption","documentation":"The customer's selected [ShippingOption](/js/appendix/shipping_option).\n"}]}]},"request":{"title":"Handle 'shippingoptionchange' event","snippets":{"js":"paymentRequest.on('shippingoptionchange', function(event) {\n  var updateWith = event.updateWith;\n  var shippingOption = event.shippingOption;\n  // handle shippingoptionchange event\n\n  // call event.updateWith within 30 seconds\n  updateWith(updateDetails);\n});\n","es_next":"paymentRequest.on('shippingoptionchange', (event) =\u003E {\n  const {updateWith, shippingOption} = event;\n  // handle shippingoptionschange event\n\n  // call event.updateWith within 30 seconds\n  updateWith(updateDetails);\n});\n"}},"response":{"title":"Handler event object","snippets":{"success":"{\n  shippingOption: {\n    id: \"someUniqueID\",\n    label: \"Ground\",\n    detail: \"UPS standard ground shipping\",\n    amount: 999,\n  },\n  updateWith: function(updateDetails) {\n    // Call this function to merge your updates into the current\n    // PaymentRequest object. Note that you must must call this\n    // within 30 seconds.\n  },\n}\n"}},"section_tag":"payment_request_on_shipping_option_change"},"display_on_load":true},"confirmation_tokens_intro":{"title":"Introduction","group_title":"Confirmation Tokens","group_anchor":"confirmation_tokens","anchor":"confirmation_tokens_intro","section_anchor":"confirmation_tokens_intro","subsection_anchors":null,"path":"/confirmation_tokens","gate":false,"data":{"section_type":"generic","title":"Confirmation Tokens","description":"ConfirmationTokens transport client-side data collected by Stripe.js to your server. You can use them to confirm a PaymentIntent or SetupIntent on your server.\n","section_tag":"confirmation_tokens_intro"},"display_on_load":true},"create_confirmation_token":{"title":"Create a ConfirmationToken","group_title":"Confirmation Tokens","group_anchor":"confirmation_tokens","anchor":"create_confirmation_token","section_anchor":"create_confirmation_token","subsection_anchors":null,"path":"/confirmation_tokens/create_confirmation_token","gate":false,"data":{"section_type":"method","title":"Create a ConfirmationToken with Elements","description":"Convert payment information collected by Elements into a [ConfirmationToken](/api/confirmation_tokens) object.\n\nUse this method if you want to [confirm payment on your server](/payments/finalize-payments-on-the-server) or [confirm payment on a subsequent page](/payments/build-a-two-step-confirmation).\n","signature":{"object_name":"stripe","method_name":"createConfirmationToken","args":[{"name":"options","required":true,"expanded":true,"validation":"object","subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance that was used to create the Express Checkout Element or Payment Element. Calling `stripe.createConfirmationToken` pulls payment method, billing address, and shipping address data from the Elements instance.\n","validation":"object","required":true},{"name":"params","documentation":"Parameters that will be passed on to the Stripe API.\n","validation":"object","required":false,"subspec":[{"name":"payment_method_data","validation":"object","required":false,"documentation":"When you call `stripe.createConfirmationToken`, payment details are collected from Elements.\nYou can include additional `payment_method_data` fields, which will be merged with the data collected from Elements.\nRefer to the [PaymentMethod API](/api/payment_methods/create) for a full list of parameters.\n\nThis is mutually exclusive with the `payment_method` parameter.\n","subspec":[{"name":"billing_details","validation":"object","required":false,"documentation":"[Billing information](/api/payment_methods/create#create_payment_method-billing_details) associated with the PaymentMethod that may be used or required by particular types of payment methods.\n"},{"name":"allow_redisplay","documentation":"Indicates whether the payment method can be displayed to the customer in subsequent checkout flows. The value passed here will override the [allow_redisplay](docs/api/payment_methods/object#payment_method_object-allow_redisplay) determined by the provided `elements` parameter.\n","validation":"'unspecified' | 'always' | 'limited'"}]},{"name":"payment_method","validation":"string","required":false,"documentation":"If collected previously, the ID of the Payment Method to attach to this ConfirmationToken.\n\nThis is mutually exclusive with the `payment_method_data` parameter.\n"},{"name":"shipping","validation":"object","required":false,"documentation":"The [shipping details](/api/payment_intents/object#payment_intent_object-shipping) for the payment, if collected. You can't specify `shipping` if `mode: 'setup'` is specified on the `elements` object.\n\n**Note**: When the [Address Element](/js/element/address_element) in shipping mode is being used, shipping address details are collected from the Address Element. You can also include additional `shipping` fields, which will be merged with the data collected from the Element, overriding any fields that were also collected by the Address Element.\n"},{"name":"return_url","validation":"string","required":false,"documentation":"The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.\nIf you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.\nThis parameter is only used for cards and other redirect-based payment methods.\n"}]}]}]},"table_content":{"items":[{"name":"options","required":true,"expanded":true,"validation":"object","subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance that was used to create the Express Checkout Element or Payment Element. Calling `stripe.createConfirmationToken` pulls payment method, billing address, and shipping address data from the Elements instance.\n","validation":"object","required":true},{"name":"params","documentation":"Parameters that will be passed on to the Stripe API.\n","validation":"object","required":false,"subspec":[{"name":"payment_method_data","validation":"object","required":false,"documentation":"When you call `stripe.createConfirmationToken`, payment details are collected from Elements.\nYou can include additional `payment_method_data` fields, which will be merged with the data collected from Elements.\nRefer to the [PaymentMethod API](/api/payment_methods/create) for a full list of parameters.\n\nThis is mutually exclusive with the `payment_method` parameter.\n","subspec":[{"name":"billing_details","validation":"object","required":false,"documentation":"[Billing information](/api/payment_methods/create#create_payment_method-billing_details) associated with the PaymentMethod that may be used or required by particular types of payment methods.\n"},{"name":"allow_redisplay","documentation":"Indicates whether the payment method can be displayed to the customer in subsequent checkout flows. The value passed here will override the [allow_redisplay](docs/api/payment_methods/object#payment_method_object-allow_redisplay) determined by the provided `elements` parameter.\n","validation":"'unspecified' | 'always' | 'limited'"}]},{"name":"payment_method","validation":"string","required":false,"documentation":"If collected previously, the ID of the Payment Method to attach to this ConfirmationToken.\n\nThis is mutually exclusive with the `payment_method_data` parameter.\n"},{"name":"shipping","validation":"object","required":false,"documentation":"The [shipping details](/api/payment_intents/object#payment_intent_object-shipping) for the payment, if collected. You can't specify `shipping` if `mode: 'setup'` is specified on the `elements` object.\n\n**Note**: When the [Address Element](/js/element/address_element) in shipping mode is being used, shipping address details are collected from the Address Element. You can also include additional `shipping` fields, which will be merged with the data collected from the Element, overriding any fields that were also collected by the Address Element.\n"},{"name":"return_url","validation":"string","required":false,"documentation":"The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.\nIf you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.\nThis parameter is only used for cards and other redirect-based payment methods.\n"}]}]}]},"request":{"title":"Create a ConfirmationToken","snippets":{"js":"stripe\n  .createConfirmationToken({\n    elements,\n    params: {\n      payment_method_data: {\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.confirmationToken\n  });\n","es_next":"const {confirmationToken, error} = await stripe.createConfirmationToken({\n  elements,\n  params: {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  },\n});\n"}},"returns":"`stripe.createConfirmationToken(options)` returns a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.confirmationToken`: a [ConfirmationToken](/api/confirmation_tokens) was created successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"create_confirmation_token"},"display_on_load":true},"payment_methods_intro":{"title":"Introduction","group_title":"Payment Methods","group_anchor":"payment_methods","anchor":"payment_methods_intro","section_anchor":"payment_methods_intro","subsection_anchors":null,"path":"/payment_methods","gate":false,"data":{"section_type":"generic","title":"Payment Methods","description":"PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.\n\nRelated guides: [Payment Methods](/payments/payment-methods) and [More Payment Scenarios](/payments/more-payment-scenarios).\n","section_tag":"payment_methods_intro"},"display_on_load":true},"stripe_create_payment_method":{"title":"Create a PaymentMethod","group_title":"Payment Methods","group_anchor":"payment_methods","anchor":"stripe_create_payment_method","section_anchor":"stripe_create_payment_method","subsection_anchors":null,"path":"/payment_methods/create_payment_method","gate":false,"data":{"section_type":"method","title":"Create a PaymentMethod","description":"Use `stripe.createPaymentMethod` to convert payment information collected by elements into a [PaymentMethod](/api/payment_methods) object that you safely pass to your server to use in an API call.\n\n**NOTE:** In most integrations, you will not need to use this method. Instead, use methods like [stripe.confirmCardPayment](/js/payment_intents/confirm_card_payment), which will automatically create a PaymentMethod when you confirm a [PaymentIntent](/api/payment_intents).\n","signature":{"object_name":"stripe","method_name":"createPaymentMethod","args":[{"name":"paymentMethodData","documentation":"Refer to the [PaymentMethod API](/api/payment_methods/create) for a full list of parameters.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"type","validation":"string","required":true,"documentation":"The type of the [PaymentMethod](/api/payment_methods/create) to create.\nRefer to the [PaymentMethod API](/api/payment_methods/create#create_payment_method-type) for all possible values.\n"},{"name":"card","validation":"Element","required":false,"documentation":"A `card` or `cardNumber` Element.\n"},{"name":"au_becs_debit","validation":"Element","required":false,"documentation":"An `auBankAccount` Element.\n"},{"name":"fpx","validation":"Element","required":false,"documentation":"An `fpx` Element.\n"},{"name":"fpx[bank]","validation":"string","required":false,"documentation":"The customer's [bank](/payments/fpx/accept-a-payment#bank-reference).\n"},{"name":"netbanking[bank]","validation":"string","required":false,"documentation":"The customer's bank.\n"},{"name":"ideal","validation":"Element","required":false,"documentation":"An `idealBank` Element.\n"},{"name":"ideal[bank]","validation":"string","required":false,"documentation":"The customer's [bank](/sources/ideal#specifying-customer-bank).\n"},{"name":"sepa_debit","validation":"Element","required":false,"documentation":"An `iban` Element.\n"},{"name":"sepa_debit[iban]","validation":"string","required":false,"documentation":"An IBAN account number.\n"},{"name":"upi[vpa]","validation":"string","required":false,"documentation":"The customer's VPA.\n"},{"name":"billing_details","validation":"object","required":false,"documentation":"[Billing information](/api/payment_methods/create#create_payment_method-billing_details) associated with the PaymentMethod that may be used or required by particular types of payment methods.\n"}]}]},"table_content":{"items":[{"name":"paymentMethodData","documentation":"Refer to the [PaymentMethod API](/api/payment_methods/create) for a full list of parameters.\n","validation":"object","required":true,"expanded":true,"subspec":[{"name":"type","validation":"string","required":true,"documentation":"The type of the [PaymentMethod](/api/payment_methods/create) to create.\nRefer to the [PaymentMethod API](/api/payment_methods/create#create_payment_method-type) for all possible values.\n"},{"name":"card","validation":"Element","required":false,"documentation":"A `card` or `cardNumber` Element.\n"},{"name":"au_becs_debit","validation":"Element","required":false,"documentation":"An `auBankAccount` Element.\n"},{"name":"fpx","validation":"Element","required":false,"documentation":"An `fpx` Element.\n"},{"name":"fpx[bank]","validation":"string","required":false,"documentation":"The customer's [bank](/payments/fpx/accept-a-payment#bank-reference).\n"},{"name":"netbanking[bank]","validation":"string","required":false,"documentation":"The customer's bank.\n"},{"name":"ideal","validation":"Element","required":false,"documentation":"An `idealBank` Element.\n"},{"name":"ideal[bank]","validation":"string","required":false,"documentation":"The customer's [bank](/sources/ideal#specifying-customer-bank).\n"},{"name":"sepa_debit","validation":"Element","required":false,"documentation":"An `iban` Element.\n"},{"name":"sepa_debit[iban]","validation":"string","required":false,"documentation":"An IBAN account number.\n"},{"name":"upi[vpa]","validation":"string","required":false,"documentation":"The customer's VPA.\n"},{"name":"billing_details","validation":"object","required":false,"documentation":"[Billing information](/api/payment_methods/create#create_payment_method-billing_details) associated with the PaymentMethod that may be used or required by particular types of payment methods.\n"}]}]},"request":{"title":"Create a PaymentMethod","snippets":{"js":"stripe\n  .createPaymentMethod({\n    type: 'card',\n    card: cardElement,\n    billing_details: {\n      name: 'Jenny Rosen',\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentMethod\n  });\n","es_next":"const {paymentMethod, error} = await stripe.createPaymentMethod({\n  type: 'card',\n  card: cardElement,\n  billing_details: {\n    name: 'Jenny Rosen',\n  },\n});\n"}},"returns":"`stripe.createPaymentMethod(paymentMethodData)` returns a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentMethod`: a [PaymentMethod](/api/payment_methods) was created successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_create_payment_method"},"display_on_load":true},"stripe_create_payment_method_elements":{"title":"Create a PaymentMethod with Elements","group_title":"Payment Methods","group_anchor":"payment_methods","anchor":"stripe_create_payment_method_elements","section_anchor":"stripe_create_payment_method_elements","subsection_anchors":null,"path":"/payment_methods/create_payment_method_elements","gate":false,"data":{"section_type":"method","title":"Create a PaymentMethod with Elements","description":"Use `stripe.createPaymentMethod` to convert payment information collected by elements into a [PaymentMethod](/api/payment_methods) object that you safely pass to your server to use in an API call.\n\n**NOTE:** In most integrations, you will not need to use this method. Instead, use methods like [stripe.confirmPayment](/js/payment_intents/confirm_payment), which will automatically create a PaymentMethod when you confirm a [PaymentIntent](/api/payment_intents).\n","signature":{"object_name":"stripe","method_name":"createPaymentMethod","args":[{"name":"options","required":true,"expanded":true,"validation":"object","subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance that was used to create the Payment Element. It will be used to pull payment method and billing address data from.\n","validation":"object","required":true},{"name":"params","documentation":"Parameters that will be passed on to the Stripe API. Refer to the [PaymentMethod API](/api/payment_methods/create) for a full list of parameters.\n","validation":"object","required":false,"subspec":[{"name":"billing_details","validation":"object","required":false,"documentation":"[Billing information](/api/payment_methods/create#create_payment_method-billing_details) associated with the PaymentMethod that may be used or required by particular types of payment methods.\n"}]}]}]},"table_content":{"items":[{"name":"options","required":true,"expanded":true,"validation":"object","subspec":[{"name":"elements","documentation":"The [Elements](#payment_element_create) instance that was used to create the Payment Element. It will be used to pull payment method and billing address data from.\n","validation":"object","required":true},{"name":"params","documentation":"Parameters that will be passed on to the Stripe API. Refer to the [PaymentMethod API](/api/payment_methods/create) for a full list of parameters.\n","validation":"object","required":false,"subspec":[{"name":"billing_details","validation":"object","required":false,"documentation":"[Billing information](/api/payment_methods/create#create_payment_method-billing_details) associated with the PaymentMethod that may be used or required by particular types of payment methods.\n"}]}]}]},"request":{"title":"Create a PaymentMethod","snippets":{"js":"stripe\n  .createPaymentMethod({\n    elements,\n    params: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentMethod\n  });\n","es_next":"const {paymentMethod, error} = await stripe.createPaymentMethod({\n  elements,\n  params: {\n    billing_details: {\n      name: 'Jenny Rosen',\n    },\n  },\n});\n"}},"returns":"`stripe.createPaymentMethod(options)` returns a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.paymentMethod`: a [PaymentMethod](/api/payment_methods) was created successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_create_payment_method_elements"},"display_on_load":true},"tokens_intro":{"title":"Introduction","group_title":"Tokens","group_anchor":"tokens","anchor":"tokens_intro","section_anchor":"tokens_intro","subsection_anchors":null,"path":"/tokens","gate":false,"data":{"section_type":"generic","title":"Tokens","description":"Stripe uses tokens to collect sensitive client information without exposing it. When you use the [Payment Intents API](/js/payment_intents), the client handles tokenization and you don't have to create tokens yourself.\n\nStripe.js provides the following method to create [Tokens](/api/tokens).\n","section_tag":"tokens_intro"},"display_on_load":true},"stripe_create_token":{"title":"Create a Token","group_title":"Tokens","group_anchor":"tokens","anchor":"stripe_create_token","section_anchor":"stripe_create_token","subsection_anchors":null,"path":"/tokens/create_token","gate":false,"data":{"section_type":"method","title":"Create a Token","signature":{"object_name":"stripe","method_name":"createToken","args":[{"name":"tokenType","documentation":"An type of token to create or an element with data to tokenize.\n","validation":"string","required":true,"selectable":true},{"name":"data","documentation":"An object containing information to tokenize.\n","validation":"object"}]},"types_parent":"tokenType","types_data":{"cardElement":{"description":"Use `stripe.createToken` to convert information collected by card elements into a single-use [Token](/api#tokens) that you safely pass to your server to use in an API call.\n","table_content":{"items":[{"name":"tokenType","display_name":"cardElement","documentation":"The `card` [Element](/js/element) you wish to tokenize data from.\nIf applicable, the `Element` tokenizes by pulling data from other elements\nyou’ve created on the same instance of [Elements](#elements_create)—you\nonly need to supply one `Element` as the parameter.\n","validation":"Element","required":true},{"name":"data","documentation":"An object containing additional payment information you might have collected.\n\nAlthough these fields are optional, we highly recommend collecting name and address.\nThis information can be used to perform a number of verifications, such as CVC, ZIP, and address verification.\n[Radar](/radar) includes [built-in](/radar/rules#traditional-bank-checks) rules that can block payments where the ZIP or CVC verifications with the cardholder’s bank failed.\n","validation":"object","subspec":[{"name":"name","documentation":"Cardholder name.\n","validation":"string","badge_text":"recommended"},{"name":"address_line1","validation":"string"},{"name":"address_line2","validation":"string"},{"name":"address_city","validation":"string"},{"name":"address_state","validation":"string"},{"name":"address_zip","validation":"string"},{"name":"address_country","documentation":"A two character country code (for example, `US`).\n","validation":"string","badge_text":"recommended"},{"name":"currency","documentation":"Required in order to [add the card to a Connect account](/connect/bank-debit-card-payouts) (in all other cases, this parameter is not used).\n","validation":"string"}]}]},"request":{"title":"Create token from card","snippets":{"js":"stripe.createToken(cardElement).then(function(result) {\n  // Handle result.error or result.token\n});\n","es_next":"const {token, error} = await stripe.createToken(cardElement);\n"}}},"cardNumberElement":{"description":"Use `stripe.createToken` to convert information collected by card elements into a single-use [Token](/api#tokens) that you safely pass to your server to use in an API call.\n","table_content":{"items":[{"name":"tokenType","display_name":"cardNumberElement","documentation":"The `cardNumber` [Element](/js/element) you wish to tokenize data from.\nIf applicable, the `Element` tokenizes by pulling data from other elements\nyou’ve created on the same instance of [Elements](#elements_create)—you\nonly need to supply one `Element` as the parameter.\n","validation":"Element","required":true},{"name":"data","documentation":"An object containing additional payment information you might have collected.\n\nAlthough these fields are optional, we highly recommend collecting name and address.\nThis information can be used to perform a number of verifications, such as CVC, ZIP, and address verification.\n[Radar](/radar) includes [built-in](/radar/rules#traditional-bank-checks) rules that can block payments where the ZIP or CVC verifications with the cardholder’s bank failed.\n","validation":"object","subspec":[{"name":"name","documentation":"Cardholder name.\n","validation":"string","badge_text":"recommended"},{"name":"address_line1","validation":"string"},{"name":"address_line2","validation":"string"},{"name":"address_city","validation":"string"},{"name":"address_state","validation":"string"},{"name":"address_zip","validation":"string"},{"name":"address_country","documentation":"A two character country code (for example, `US`).\n","validation":"string","badge_text":"recommended"},{"name":"currency","documentation":"Required in order to [add the card to a Connect account](/connect/bank-debit-card-payouts) (in all other cases, this parameter is not used).\n","validation":"string"}]}]},"request":{"title":"Create token from cardNumber","snippets":{"js":"stripe.createToken(cardNumberElement).then(function(result) {\n  // Handle result.error or result.token\n});\n","es_next":"const {token, error} = await stripe.createToken(cardNumberElement);\n"}}},"cardCvcElement":{"description":"Use `stripe.createToken` to convert information collected by card elements into a single-use [Token](/api#tokens) that you safely pass to your server to use in an API call.\n","table_content":{"items":[{"name":"tokenType","display_name":"cardCvcElement","documentation":"The `cardCvc` [Element](/js/element) you wish to tokenize data from.\n","validation":"Element","required":true},{"name":"data","documentation":"An object containing additional payment information you might have collected.\n\nAlthough these fields are optional, we highly recommend collecting name and address.\nThis information can be used to perform a number of verifications, such as CVC, ZIP, and address verification.\n[Radar](/radar) includes [built-in](/radar/rules#traditional-bank-checks) rules that can block payments where the ZIP or CVC verifications with the cardholder’s bank failed.\n","validation":"object","subspec":[{"name":"name","documentation":"Cardholder name.\n","validation":"string","badge_text":"recommended"},{"name":"address_line1","validation":"string"},{"name":"address_line2","validation":"string"},{"name":"address_city","validation":"string"},{"name":"address_state","validation":"string"},{"name":"address_zip","validation":"string"},{"name":"address_country","documentation":"A two character country code (for example, `US`).\n","validation":"string","badge_text":"recommended"},{"name":"currency","documentation":"Required in order to [add the card to a Connect account](/connect/bank-debit-card-payouts) (in all other cases, this parameter is not used).\n","validation":"string"}]}]},"request":{"title":"Create token from cardCvc","snippets":{"js":"stripe.createToken(cardCvcElement).then(function(result) {\n  // Handle result.error or result.token\n});\n","es_next":"const {token, error} = await stripe.createToken(cardCvcElement);\n"}}},"ibanElement":{"description":"Use `stripe.createToken` to convert information collected by an `iban` element into a single-use token that you safely pass to your server to use in an API call.\n","table_content":{"items":[{"name":"tokenType","display_name":"ibanElement","documentation":"An `iban` [Element](/js/element) you wish to tokenize data from.\n","validation":"Element","required":true},{"name":"data","documentation":"An object passed as the second argument. It must have the following properties:\n","validation":"object","required":true,"requirement_text":"Required for iban","expanded":true,"subspec":[{"name":"currency","documentation":"Three character currency code (e.g., `eur`).\n","validation":"string","required":true},{"name":"account_holder_name","documentation":"The name of the account holder.\n","validation":"string","required":true},{"name":"account_holder_type","documentation":"The type of entity that holds the account. Can be either `individual` or `company`.\n","validation":"string","required":true}]}]},"request":{"title":"Create token from iban","snippets":{"js":"stripe\n  .createToken(ibanElement, {\n    // country and account_number are automatically populated from the IBAN Element\n    currency: 'eur',\n    account_holder_name: 'Jenny Rosen',\n    account_holder_type: 'individual',\n  })\n  .then(function(result) {\n    // Handle result.error or result.token\n  });\n","es_next":"const {token, error} = await stripe.createToken(ibanElement, {\n  // country and account_number are automatically populated from the IBAN Element\n  currency: 'eur',\n  account_holder_name: 'Jenny Rosen',\n  account_holder_type: 'individual',\n});\n"}}},"pii":{"render_as_value":"'pii'","description":"Use `stripe.createToken` to convert personally identifiable information (PII) into a single-use token for account identity verification.\n","request":{"title":"Create a token for PII","snippets":{"js":"stripe\n  .createToken('pii', {\n    personal_id_number: '123131185',\n  })\n  .then(function(result) {\n    // Handle result.error or result.token\n  });\n","es_next":"const {token, error} = await stripe.createToken('pii', {\n  personal_id_number: '123131185',\n});\n"}},"table_content":{"items":[{"name":"tokenType","documentation":"The type of token to create. In this case, `pii`.\n","validation":"'pii'","required":true,"selectable":true},{"name":"data","documentation":"An object passed as the second argument. It must have the following properties:\n","validation":"object","required":true,"requirement_text":"Required for pii","expanded":true,"subspec":[{"name":"personal_id_number","documentation":"The personal ID number.\n","validation":"string","required":true}]}]}},"bank_account":{"render_as_value":"'bank_account'","description":"Use `stripe.createToken` to convert bank account information into a single-use token that you safely pass to your server to use in an API call.\n","table_content":{"items":[{"name":"tokenType","documentation":"The type of token to create. In this case, `bank_account`.\n","validation":"'bank_account'","required":true,"selectable":true},{"name":"data","documentation":"An object passed as the second argument. It must have the following properties:\n","validation":"object","required":true,"requirement_text":"Required for bank_account","expanded":true,"subspec":[{"name":"country","documentation":"Two character country code (e.g., `US`).\n","validation":"string","required":true},{"name":"currency","documentation":"Three character currency code (e.g., `usd`).\n","validation":"string","required":true},{"name":"routing_number","documentation":"The bank routing number (e.g., `111000025`). Optional if the currency is `eur`, as the account number is an IBAN.\n","validation":"string","required":false},{"name":"account_number","documentation":"The bank account number (e.g., `000123456789`).\n","validation":"string","required":true},{"name":"account_holder_name","documentation":"The name of the account holder.\n","validation":"string","required":false},{"name":"account_holder_type","documentation":"The type of entity that holds the account. Can be either `individual` or `company`.\n","validation":"string","required":false},{"name":"account_type","documentation":"The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.\n","validation":"string","required":false}]}]},"request":{"title":"Create a bank account token","snippets":{"js":"stripe\n  .createToken('bank_account', {\n    country: 'US',\n    currency: 'usd',\n    routing_number: '110000000',\n    account_number: '000123456789',\n    account_holder_name: 'Jenny Rosen',\n    account_holder_type: 'individual',\n  })\n  .then(function(result) {\n    // Handle result.error or result.token\n  });\n","es_next":"const {token, error} = await stripe.createToken('bank_account', {\n  country: 'US',\n  currency: 'usd',\n  routing_number: '110000000',\n  account_number: '000123456789',\n  account_holder_name: 'Jenny Rosen',\n  account_holder_type: 'individual',\n});\n"}}},"person":{"render_as_value":"'person'","description":"Use `stripe.createToken` to create a single-use token that represents the details for a person.\nUse this when creating or updating persons associated with a Connect account.\nSee [the documentation](/connect/account-tokens) to learn more.\n","table_content":{"items":[{"name":"tokenType","documentation":"The type of token to create.\nIn this case, `person`.\n","validation":"'person'","required":true,"selectable":true},{"name":"data","documentation":"[Person data](/api/tokens/create_person) this token will represent.\n","validation":"object","required":true,"expanded":true}]},"request":{"title":"Create a person token","snippets":{"js":"stripe\n  .createToken('person', {\n    first_name: 'Jane',\n    last_name: 'Doe',\n    relationship: {owner: true},\n  })\n  .then(function(result) {\n    // Handle result.error or result.token\n  });\n","es_next":"const {token, error} = await stripe.createToken('person', {\n  first_name: 'Jane',\n  last_name: 'Doe',\n  relationship: {owner: true},\n});\n"}}},"account":{"render_as_value":"'account'","description":"Use `stripe.createToken` to create a single-use token that wraps a user’s legal entity information.\nUse this when creating or updating a Connect account.\nSee the [account tokens documentation](/connect/account-tokens) to learn more.\n","table_content":{"items":[{"name":"tokenType","documentation":"The type of token to create.\nIn this case, `account`.\n","validation":"'person'","required":true,"selectable":true},{"name":"data","documentation":"[Account data](/api/tokens/create_account) this token will represent.\n","validation":"object","required":true,"expanded":true}]},"request":{"title":"Create a account token","snippets":{"js":"stripe\n  .createToken('account', {\n    individual: {\n      first_name: 'Jane',\n      last_name: 'Doe',\n    },\n    tos_shown_and_accepted: true,\n  })\n  .then(function(result) {\n    // Handle result.error or result.token\n  });\n","es_next":"const {token, error} = await stripe.createToken('account', {\n  individual: {\n    first_name: 'Jane',\n    last_name: 'Doe',\n  },\n  tos_shown_and_accepted: true,\n});\n"}}},"cvc_update":{"render_as_value":"'cvc_update'","description":"Use `stripe.createToken` to tokenize the re-collected CVC on a saved card for use in [CVC re-collection](/payments/accept-a-payment-synchronously#web-recollect-cvc).\n\nFirst, render an element of type `cardCvc` to collect the data. Then, pass the `cardCvc` element to `stripe.createToken` to tokenize the collected data.\n","table_content":{"items":[{"name":"tokenType","documentation":"The type of token to create.\nIn this case, `cvc_update`.\n","validation":"'cvc_update'","required":true,"selectable":true},{"name":"tokenType","display_name":"cardCvcElement","documentation":"The `cardCvc` [Element](/js/element) you wish to tokenize data from.\n","validation":"Element","required":true}]},"request":{"title":"Create token from updated CVC","snippets":{"js":"stripe.createToken('cvc_update',\n  cardCvcElement,\n).then(function(result) {\n  // Handle result.error or result.token\n});\n","es_next":"const {token, error} = await stripe.createToken('cvc_update',\n  cardCvcElement\n);\n"}}}},"returns":"`stripe.createToken` returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.token`: a [Token](/api/tokens) was created successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_create_token"},"display_on_load":true},"stripe_verify_identity":{"title":"Show verification modal","group_title":"Identity","group_anchor":"identity","anchor":"stripe_verify_identity","section_anchor":"stripe_verify_identity","subsection_anchors":null,"path":"/identity/modal","gate":false,"data":{"section_type":"method","title":"Show verification modal","description":"Use `stripe.verifyIdentity` to display an [Identity](/identity) modal that securely collects verification information.\n","signature":{"object_name":"stripe","method_name":"verifyIdentity","args":[{"name":"clientSecret","documentation":"The [client secret](/api/identity/verification_sessions/object#identity_verification_session_object-client_secret) of the `VerificationSession`.\n","validation":"string","required":true}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/identity/verification_sessions/object#identity_verification_session_object-client_secret) of the `VerificationSession`.\n","validation":"string","required":true}]},"request":{"title":"Show verification modal","snippets":{"js":"var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n// Call your backend to create the VerificationSession\nfetch('/create-verification-session', {\n  method: 'POST',\n})\n.then(function(response) {\n  return response.json();\n})\n.then(function(verificationSession) {\n  return stripe.verifyIdentity(verificationSession.client_secret);\n})\n.then(function(result) {\n  // If `verifyIdentity` fails due to a browser or network\n  // error, you should display the localized error message to your\n  // customer using `error.message`.\n  if (result.error) {\n    alert(result.error.message);\n  }\n});\n","es_next":"const stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n// Call your backend to create the VerificationSession\nconst response = await fetch('/create-verification-session', { method: 'POST' });\nconst verificationSession = await response.json();\n\n// When the user clicks on the button, open the Identity modal.\nconst {error} = await stripe.verifyIdentity(verificationSession.client_secret);\n\nif (error) {\n  // If `verifyIdentity` fails due to a browser or network\n  // error, display the localized error message to your customer\n  // using `error.message`.\n}\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nIf this method fails, the result object will contain a localized error message in the `error.message` field.\n","section_tag":"stripe_verify_identity"},"display_on_load":true},"stripe_create_ephemeral_key_nonce":{"title":"Create an ephemeral key nonce","group_title":"Issuing","group_anchor":"issuing_elements","anchor":"stripe_create_ephemeral_key_nonce","section_anchor":"stripe_create_ephemeral_key_nonce","subsection_anchors":null,"path":"/issuing/create_ephemeral_key_nonce","gate":false,"data":{"section_type":"method","title":"Create an ephemeral key nonce","description":"Use `stripe.createEphemeralKeyNonce` in the [Issuing Elements](/issuing/elements) flow to create an ephemeral key nonce. Refer to our [integration guide](/issuing/elements#web-api-integration) for more details.\n","signature":{"object_name":"stripe","method_name":"createEphemeralKeyNonce","args":[{"name":"options","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"issuingCard","documentation":"The `id` of an existing [Issuing card](/api/issuing/cards/object). The nonce returned by this method can only be used to retrieve this Issuing card.\n","validation":"string","required":true}],"required":true}]},"table_content":{"items":[{"name":"options","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"issuingCard","documentation":"The `id` of an existing [Issuing card](/api/issuing/cards/object). The nonce returned by this method can only be used to retrieve this Issuing card.\n","validation":"string","required":true}],"required":true}]},"request":{"title":"Create ephemeral key nonce","snippets":{"js":"stripe\n  .createEphemeralKeyNonce({\n    issuingCard: 'ic_1ITi6XKYfU8ZP6raDAXem8ql'\n  })\n  .then(function(result) {\n    // Handle result.error or result.nonce\n  });\n"}},"returns":"`stripe.createEphemeralKeyNonce` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.nonce`: the successful ephemeral key nonce.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_create_ephemeral_key_nonce"},"display_on_load":true},"stripe_retrieve_issuing_card":{"title":"Retrieve an Issuing card","group_title":"Issuing","group_anchor":"issuing_elements","anchor":"stripe_retrieve_issuing_card","section_anchor":"stripe_retrieve_issuing_card","subsection_anchors":null,"path":"/issuing/retrieve_issuing_card","gate":false,"data":{"section_type":"method","title":"Retrieve an Issuing card","deprecated":true,"description":"Use `stripe.retrieveIssuingCard` in the [Issuing Elements](/issuing/elements) flow to retrieve an Issuing card.\nNote that once you retrieve the card, you still need to display the card details in Elements.\nYou need to pass in the `issuing_elements_2` beta to the Stripe instance to access this method.\nRefer to our [integration guide](/issuing/elements#web-api-integration) for more details.\n","signature":{"object_name":"stripe","method_name":"retrieveIssuingCard","args":[{"name":"issuingCard","documentation":"The `id` of an existing [Issuing card](/api/issuing/cards/object).\n","validation":"string","required":true},{"name":"options","documentation":"An options object to configure the Issuing card retrieved from this method.\n","validation":"object","expanded":true,"subspec":[{"name":"ephemeralKeySecret","documentation":"The ephemeral key secret retrieved from the API.\nThe card `id` used to retrieve the ephemeral key must match the card `id` passed into this method.\nSee the [integration guide](/issuing/elements#create-secure-endpoint) for more details.\n","validation":"string","required":true},{"name":"nonce","documentation":"The ephemeral key nonce returned by [stripe.createEphemeralKeyNonce](/js/issuing/create_ephemeral_key_nonce).\nThe card `id` used to create the nonce must match the card `id` passed into this method.\n","validation":"string","required":true},{"name":"expand","documentation":"An array of Card fields to expand in the response from the Stripe API. Can be one or more of `number`, `cvc`, and `pin.number`. Expand fields as required to display Issuing Elements for those fields.\n","validation":"array","required":false}],"required":true}]},"table_content":{"items":[{"name":"issuingCard","documentation":"The `id` of an existing [Issuing card](/api/issuing/cards/object).\n","validation":"string","required":true},{"name":"options","documentation":"An options object to configure the Issuing card retrieved from this method.\n","validation":"object","expanded":true,"subspec":[{"name":"ephemeralKeySecret","documentation":"The ephemeral key secret retrieved from the API.\nThe card `id` used to retrieve the ephemeral key must match the card `id` passed into this method.\nSee the [integration guide](/issuing/elements#create-secure-endpoint) for more details.\n","validation":"string","required":true},{"name":"nonce","documentation":"The ephemeral key nonce returned by [stripe.createEphemeralKeyNonce](/js/issuing/create_ephemeral_key_nonce).\nThe card `id` used to create the nonce must match the card `id` passed into this method.\n","validation":"string","required":true},{"name":"expand","documentation":"An array of Card fields to expand in the response from the Stripe API. Can be one or more of `number`, `cvc`, and `pin.number`. Expand fields as required to display Issuing Elements for those fields.\n","validation":"array","required":false}],"required":true}]},"request":{"title":"Retrieve an Issuing card","snippets":{"js":"stripe.retrieveIssuingCard(\n  'ic_1ITi6XKYfU8ZP6raDAXem8ql',\n  {\n    ephemeralKeySecret: 'ek_test_YWNjdF8xSVRpNkhLWWZVOFpQNnJhLGNYbEpnTEJXUUN4aWhsUHFwMXR1S2NsSDdnc3JTdWY_00GReOJAVP ',\n    nonce: 'ephkn_pub_i4LvSOayGrKKHm6DYLOOKmzX',\n  },\n).then(function(result) {\n  // Handle result.error or result.issuingCard\n});\n"}},"returns":"`stripe.retrieveIssuingCard` will return a `Promise` which resolves with a `result` object.\nThis object has either:\n* `result.issuingCard`: the successful [Issuing card](/api/issuing/cards/object).\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_retrieve_issuing_card"},"display_on_load":true},"financial_connections_intro":{"title":"Introduction","group_title":"Financial Connections","group_anchor":"financial_connections","anchor":"financial_connections_intro","section_anchor":"financial_connections_intro","subsection_anchors":null,"path":"/financial_connections","gate":false,"data":{"section_type":"generic","title":"Financial Connections","description":"[Stripe Financial Connections](/financial-connections) enables your users to\nsecurely share their financial data by linking their external financial accounts to your\nbusiness.\n","section_tag":"financial_connections_intro"},"display_on_load":true},"financial_connections_collect_financial_connections_accounts":{"title":"Collect Financial Connections Accounts","group_title":"Financial Connections","group_anchor":"financial_connections","anchor":"financial_connections_collect_financial_connections_accounts","section_anchor":"financial_connections_collect_financial_connections_accounts","subsection_anchors":null,"path":"/financial_connections/collect_financial_connections_accounts","gate":false,"data":{"section_type":"method","title":"Collect Financial Connections Accounts","description":"Use `stripe.collectFinancialConnectionsAccounts` in the [Add a Financial Connections\nAccount to retrieve data](/financial-connections/other-data-powered-products) flow.\nWhen called, it will load the [Authentication Flow](/financial-connections/fundamentals#authentication-flow),\nan on-page modal UI which allows your user to securely link their external financial\naccount(s).\n","signature":{"object_name":"stripe","method_name":"collectFinancialConnectionsAccounts","args":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The `client_secret` of the [Financial Connections Session](/api/financial_connections/session).\n","validation":"string","required":true}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The `client_secret` of the [Financial Connections Session](/api/financial_connections/session).\n","validation":"string","required":true}]}]},"request":{"title":"Collect Financial Connections Accounts","snippets":{"js":"stripe.collectFinancialConnectionsAccounts({\n  clientSecret: '{FINANCIAL_CONNECTIONS_SESSION_CLIENT_SECRET}'\n})\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n      console.log(result.error.message);\n\n    // Handle next step based on length of accounts array\n    } else if (result.financialConnectionsSession.accounts.length === 0) {\n      console.log('No accounts were linked');\n    } else {\n      console.log(result.financialConnectionsSession.accounts)\n    }\n  });\n","es_next":"const result = await stripe.collectFinancialConnectionsAccounts({\n  clientSecret: '{FINANCIAL_CONNECTIONS_SESSION_CLIENT_SECRET}'\n});\n\nif (result.error) {\n  // Inform the customer that there was an error.\n  console.log(result.error.message);\n\n// Handle next step based on length of accounts array\n} else if (result.financialConnectionsSession.accounts.length === 0) {\n  console.log('No accounts were linked');\n} else {\n  console.log(result.financialConnectionsSession.accounts)\n}\n"}},"returns":"`stripe.collectFinancialConnectionsAccounts` returns a `Promise` which resolves with a\n`result` object. The object has either:\n\n* `result.financialConnectionsSession`: the updated [Financial Connections Session](/api/financial_connections/session)\nobject. The `accounts` property will contain the list of accounts collected during this\nsession. If the user chooses to link no accounts, or exits the Authentication Flow early,\nthe `accounts` array will be empty.\n* `result.error`: there was an error launching the Authentication Flow. For example, the\nFinancial Connections Session has expired, or the Financial Connections Session has\nalready been used.\n","section_tag":"financial_connections_collect_financial_connections_accounts"},"display_on_load":true},"financial_connections_collect_bank_account_token":{"title":"Use Financial Connections to collect a bank account Token for payouts","group_title":"Financial Connections","group_anchor":"financial_connections","anchor":"financial_connections_collect_bank_account_token","section_anchor":"financial_connections_collect_bank_account_token","subsection_anchors":null,"path":"/financial_connections/collect_bank_account_token","gate":false,"data":{"section_type":"method","title":"Use Financial Connections to collect a bank account Token for payouts","description":"Use `stripe.collectBankAccountToken` in the [Add a Financial Connections Account to a\nUS Custom Connect account](/financial-connections/connect-payouts) flow. When\ncalled, it will load the [Authentication Flow](/financial-connections/fundamentals#authentication-flow),\nan on-page modal UI which allows your user to securely link their external financial\naccount for payouts.\n","signature":{"object_name":"stripe","method_name":"collectBankAccountToken","args":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The `client_secret` of the [Financial Connections Session](/api/financial_connections/session).\n","validation":"string","required":true}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":true,"expanded":true,"subspec":[{"name":"clientSecret","documentation":"The `client_secret` of the [Financial Connections Session](/api/financial_connections/session).\n","validation":"string","required":true}]}]},"request":{"title":"Use Financial Connections to collect a bank account Token for payouts","snippets":{"js":"stripe.collectBankAccountToken({\n  clientSecret: '{FINANCIAL_CONNECTIONS_SESSION_CLIENT_SECRET}'\n})\n  .then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n      console.log(result.error.message);\n    } else if (result.token) {\n      // Use result.token to set your user's external payout account\n      console.log(result.token)\n    }\n  });\n","es_next":"const result = await stripe.collectBankAccountToken({\n  clientSecret: '{FINANCIAL_CONNECTIONS_SESSION_CLIENT_SECRET}'\n});\n\nif (result.error) {\n  // Inform the customer that there was an error.\n  console.log(result.error.message);\n} else if (result.token) {\n  // Use result.token to set your user's external payout account\n  console.log(result.token)\n}\n"}},"returns":"`stripe.collectBankAccountToken` returns a `Promise` which resolves with a `result`\nobject.\n\nIf an external financial account was successfully collected, the result object will\ncontain:\n\n* `result.token`: a bank account [Token](/api/tokens).\n* `result.financialConnectionsSession`: the updated [Financial Connections Session](/api/financial_connections/session)\nobject. The `accounts` array will contain a single Financial Connections Account\n(representing the same external financial account used for `result.token`).\n\nIf there was an error launching the Authentication Flow, the result object will contain:\n\n* `result.error`: there was an error launching the Authentication Flow. For example, the\nFinancial Connections Session has expired, or the Financial Connections Session has\nalready been used.\n\nIf the user chooses to link no accounts, or exits the Authentication Flow early, the\nresult object will contain:\n\n* `result.financialConnectionsSession`: the updated [Financial Connections Session](/api/financial_connections/session)\nobject. The `accounts` array will be empty.\n","section_tag":"financial_connections_collect_bank_account_token"},"display_on_load":true},"css_font_source_object":{"title":"CssFontSource object","group_title":"Appendix","group_anchor":"appendix","anchor":"css_font_source_object","section_anchor":"css_font_source_object","subsection_anchors":null,"path":"/appendix/css_font_source_object","gate":false,"data":{"section_type":"object","title":"The CssFontSource object","description":"This object is used to pass custom fonts via a stylesheet URL when creating an [Elements](/js/elements_object/create) object.\n","object_name":"CssFontSource","table_content":{"items":[{"name":"cssSrc","documentation":"A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en/docs/Web/CSS/@font-face) definitions, for example:\n\n```\nhttps://fonts.googleapis.com/css?family=Open+Sans\n```\n\nNote that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP), [additional directives](/security/guide#content-security-policy) may be necessary.\n","validation":"string"}]},"response":{"title":"Example CssFontSource object","snippets":{"success":"{\n  cssSrc: 'https://fonts.googleapis.com/css?family=Open+Sans'\n}\n"}},"section_tag":"css_font_source_object"},"display_on_load":true},"custom_font_source_object":{"title":"CustomFontSource object","group_title":"Appendix","group_anchor":"appendix","anchor":"custom_font_source_object","section_anchor":"custom_font_source_object","subsection_anchors":null,"path":"/appendix/custom_font_source_object","gate":false,"data":{"section_type":"object","title":"The CustomFontSource object","description":"This object is used to pass custom fonts when creating an [Elements](/js/elements_object/create) object.\n","object_name":"CustomFontSource","table_content":{"items":[{"name":"family","documentation":"The name to give the font.\n","validation":"string","required":true},{"name":"src","documentation":"A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your custom font file.\nThis is usually (though not always) a link to a file with a `.woff` , `.otf`, or `.svg` suffix.\n","validation":"string","required":true},{"name":"display","documentation":"A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n","validation":"string","required":false},{"name":"style","documentation":"One of `normal`, `italic`, `oblique`.\nDefaults to `normal`.\n","validation":"string","required":false},{"name":"unicodeRange","documentation":"A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n","validation":"string","required":false},{"name":"weight","documentation":"A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight).\nNote that this is a string, not a number.\n","validation":"string","required":false}]},"response":{"title":"Example CustomFontSource object","snippets":{"success":"{\n  family: 'Avenir',\n  src: 'url(https://my-domain.com/assets/avenir.woff)',\n  weight: '500',\n}\n"}},"section_tag":"custom_font_source_object"},"display_on_load":true},"contact_object":{"title":"Contact object","group_title":"Appendix","group_anchor":"appendix","anchor":"contact_object","section_anchor":"contact_object","subsection_anchors":null,"path":"/appendix/contact_object","gate":false,"data":{"section_type":"object","title":"The Contact object","description":"The `Contact` object describes a saved contact passed in to the [Address Element](/js/element/address_element).\n","object_name":"Contact","table_content":{"items":[{"name":"name","validation":"string","documentation":"The name of the contact.\nThis might be a person, or a business name.\n"},{"name":"address","validation":"object","documentation":"The address of the contact.\n","expanded":true,"subspec":[{"name":"line1","validation":"string","required":true},{"name":"line2","validation":"string"},{"name":"city","validation":"string","required":true,"documentation":"The name of a city, town, village, etc.\n"},{"name":"state","validation":"string","required":true,"documentation":"The most coarse subdivision of a country.\nDepending on the country, this might correspond to a state, a province, an oblast, a prefecture, or something else along these lines.\n"},{"name":"postal_code","validation":"string","required":true,"documentation":"The postal code or ZIP code, also known as PIN code in India.\n"},{"name":"country","validation":"string","required":true,"documentation":"Two-letter country code, capitalized. Valid two-letter country codes are specified by ISO3166 alpha-2.\n"}]},{"name":"phone","validation":"string","documentation":"The phone number of the contact.\n\nThe [fields.phone](/js/elements_object/create_address_element#address_element_create-options-fields-phone) option must be set to `always` if this property is specified.\n"}]},"response":{"title":"Example Contact object","snippets":{"success":"{\n  name: 'Jenny Rosen',\n  address: {\n    line1: '185 Berry St.',\n    city: 'San Francisco',\n    state: 'CA',\n    postal_code: '94941',\n    country: 'US',\n  },\n}\n"}},"section_tag":"contact_object"},"display_on_load":true},"payment_item_object":{"title":"PaymentItem object","group_title":"Appendix","group_anchor":"appendix","anchor":"payment_item_object","section_anchor":"payment_item_object","subsection_anchors":null,"path":"/appendix/payment_item_object","gate":false,"data":{"section_type":"object","title":"The PaymentItem object","description":"The `PaymentItem` object is used to configure a [PaymentRequest](/js/payment_request/create).\n","object_name":"PaymentItem","table_content":{"items":[{"name":"amount","documentation":"The amount in the currency's subunit (e.g. cents, yen, etc.)\n","validation":"number","required":true},{"name":"label","documentation":"A name that the browser shows the customer in the payment interface.\n","validation":"string","required":true},{"name":"pending","documentation":"If you might change this amount later (for example, after you have calcluated shipping costs), set this to `true`.\nNote that browsers treat this as a hint for how to display things, and not necessarily as something that will prevent submission.\n","validation":"boolean","required":false}]},"response":{"title":"Example PaymentItem object","snippets":{"success":"{\n  amount: 2000,\n  label: 'A soft cotton shirt',\n}\n"}},"section_tag":"payment_item_object"},"display_on_load":true},"payment_response_object":{"title":"PaymentResponse object","group_title":"Appendix","group_anchor":"appendix","anchor":"payment_response_object","section_anchor":"payment_response_object","subsection_anchors":null,"path":"/appendix/payment_response","gate":false,"data":{"section_type":"object","title":"The PaymentResponse object","description":"This object is returned as the payload of the `PaymentRequest` object's [`token`](/js/payment_request/events/on_token), [`paymentmethod`](/js/payment_request/events/on_payment_method), or [`source`](/js/payment_request/events/on_source) event handlers.\n","object_name":"PaymentResponse","table_content":{"items":[{"name":"token","documentation":"A [Token](/api/tokens) object.\nPresent if this was the result of a `token` event listener.\n","validation":"object"},{"name":"paymentMethod","documentation":"A [PaymentMethod](/api/payment_methods) object.\nPresent if this was the result of a `paymentmethod` event listener.\n","validation":"object"},{"name":"source","documentation":"A [Source](/api/sources) object.\nPresent if this was the result of a `source` event listener.\n","validation":"object"},{"name":"complete","documentation":"`complete(status) =\u003E void` is a Stripe.js provided function.\nCall this when you have processed the token data provided by the API.\nNote that you must must call `complete` within 30 seconds.\n\nAccepts one of the following values:\n","validation":"function","expanded":true,"subspec_title":"allowed status values","subspec":[{"name":"success","display_name":"'success'","documentation":"Report to the browser that the payment was successful, and that it can close any active payment interface.\n","validation":"value"},{"name":"fail","display_name":"'fail'","documentation":"Report to the browser that you were unable to process the customer‘s payment.\nBrowsers may re-show the payment interface, or simply show a message and close.\n","validation":"value"},{"name":"invalid_payer_name","display_name":"'invalid_payer_name'","documentation":"Equivalent to `fail`, except that the browser can choose to show a more-specific error message.\n","validation":"value"},{"name":"invalid_payer_phone","display_name":"'invalid_payer_phone'","documentation":"Equivalent to `fail`, except that the browser can choose to show a more-specific error message.\n","validation":"value"},{"name":"invalid_payer_email","display_name":"'invalid_payer_email'","documentation":"Equivalent to `fail`, except that the browser can choose to show a more-specific error message.\n","validation":"value"},{"name":"invalid_shipping_address","display_name":"'invalid_shipping_address'","documentation":"Equivalent to `fail`, except that the browser can choose to show a more-specific error message.\n","validation":"value"}]},{"name":"payerName","documentation":"The customer's name.\nOnly present if it was explicitly [asked for](#payment_request_create-options-requestPayerName) when [creating the PaymentRequest object](/js/payment_request/create).\n","validation":"string"},{"name":"payerEmail","documentation":"The customer's email.\nOnly present if it was explicitly [asked for](#payment_request_create-options-requestPayerEmail) when [creating the PaymentRequest object](/js/payment_request/create).\n","validation":"string"},{"name":"payerPhone","documentation":"The customer's phone.\nOnly present if it was explicitly [asked for](#payment_request_create-options-requestPayerPhone) when [creating the PaymentRequest object](/js/payment_request/create).\n","validation":"string"},{"name":"shippingAddress","documentation":"The final [ShippingAddress](/js/appendix/shipping_address) the customer selected.\n\nOnly populated when `requestShipping` is `true` when [creating the PaymentRequest object](/js/payment_request/create), and you've supplied at least one `ShippingOption`.\n","validation":"ShippingAddress"},{"name":"shippingOption","documentation":"The final [ShippingOption](/js/appendix/shipping_option) the customer selected.\n\nOnly present when `requestShipping` is `true` when [creating the PaymentRequest object](/js/payment_request/create), and you've supplied at least one `ShippingOption`.\n","validation":"ShippingOption"},{"name":"walletName","documentation":"The unique name of the wallet the customer chose to authorize payment.\nFor example, `browserCard`.\n","validation":"string"}]},"response":{"title":"Example PaymentResponse object","snippets":{"success":"{\n  source: {\n    id: \"src_1FlM3yDbZnUGiCm0P8eqjAuI\",\n    object: \"source\",\n    // ...\n  }\n  complete: function(status) {\n    // Call this when you have processed the source data provided\n    // by the API. Note that you must must call complete within 30\n    // seconds.\n  },\n  payerName: 'Jenny Rosen',\n  payerEmail: 'jenny@example.com',\n  walletName: 'browserCard',\n  shippingOption: {\n    id: 'basic',\n    label: 'Ground shipping',\n    detail: 'Ground shipping via UPS or FedEx',\n    amount: 995,\n  }\n}\n"}},"section_tag":"payment_response_object"},"display_on_load":true},"shipping_option_object":{"title":"ShippingOption object","group_title":"Appendix","group_anchor":"appendix","anchor":"shipping_option_object","section_anchor":"shipping_option_object","subsection_anchors":null,"path":"/appendix/shipping_option","gate":false,"data":{"section_type":"object","title":"The ShippingOption object","description":"The `ShippingOption` object describes a shipping method used with a [PaymentRequest](/js/payment_request/create).\n","object_name":"ShippingOption","table_content":{"items":[{"name":"id","validation":"string","documentation":"A unique ID you create to keep track of this shipping option.\nYou’ll be told the ID of the selected option on changes and on completion.\n"},{"name":"label","documentation":"A short label for this shipping option.\n","validation":"string"},{"name":"detail","documentation":"A longer description of this shipping option.\n","validation":"string"},{"name":"amount","documentation":"The amount to show for this shipping option.\nIf the cost of this shipping option depends on the shipping address the customer enters, listen for the `shippingaddresschange` event.\n","validation":"number"}]},"response":{"title":"Example ShippingOption object","snippets":{"success":"{\n  id: 'basic',\n  label: 'Ground shipping',\n  detail: 'Ground shipping via UPS or FedEx',\n  amount: 995,\n}\n"}},"section_tag":"shipping_option_object"},"display_on_load":true},"shipping_address_object":{"title":"ShippingAddress object","group_title":"Appendix","group_anchor":"appendix","anchor":"shipping_address_object","section_anchor":"shipping_address_object","subsection_anchors":null,"path":"/appendix/shipping_address","gate":false,"data":{"section_type":"object","title":"The ShippingAddress object","description":"The `ShippingAddress` object describes a shipping address collected with a [PaymentRequest](/js/payment_request/create).\n","object_name":"ShippingAddress","table_content":{"items":[{"name":"country","validation":"string","documentation":"Two-letter country code, capitalized. Valid two-letter country codes are specified by ISO3166 alpha-2.\n"},{"name":"addressLine","validation":"array","documentation":"An array of address line items.\nFor example, `185 Berry St.`, `Suite 500`, `P.O. Box 12345`, etc.\n"},{"name":"region","validation":"string","documentation":"The most coarse subdivision of a country.\nDepending on the country, this might correspond to a state, a province, an oblast, a prefecture, or something else along these lines.\n"},{"name":"city","validation":"string","documentation":"The name of a city, town, village, etc.\n"},{"name":"postalCode","validation":"string","documentation":"The postal code or ZIP code, also known as PIN code in India.\n"},{"name":"recipient","validation":"string","documentation":"The name of the recipient.\nThis might be a person, a business name, or contain “care of” (c/o) instructions.\n"},{"name":"phone","validation":"string","documentation":"The phone number of the recipient.\nNote that this might be different from any phone number you collect with [`requestPayerPhone`](#payment_request_create-options-requestPayerPhone).\n"},{"name":"sortingCode","validation":"string","documentation":"The sorting code as used in, for example, France.\nNot present on Apple platforms.\n"},{"name":"dependentLocality","validation":"string","documentation":"A logical subdivision of a city.\nCan be used for things like neighborhoods, boroughs, districts, or UK dependent localities. Not present on Apple platforms.\n"}]},"response":{"title":"Example ShippingAddress object","snippets":{"success":"{\n  recipient: 'Jenny Rosen',\n  addressLine: ['185 Berry St.'],\n  city: 'San Francisco',\n  region: 'CA',\n  postalCode: '94941',\n  country: 'US',\n}\n"}},"section_tag":"shipping_address_object"},"display_on_load":true},"style_object":{"title":"Style object","group_title":"Appendix","group_anchor":"appendix","anchor":"style_object","section_anchor":"style_object","subsection_anchors":null,"path":"/appendix/style","gate":false,"data":{"section_type":"object","title":"The Style object","description":"Elements are styled using a `Style` object, which consists of CSS properties nested under objects for any of the following variants:\n\n* `base`, base variant—all other variants inherit from these styles\n* `complete`, applied when the Element has valid input\n* `empty`, applied when the Element has no customer input\n* `invalid`, applied when the Element has invalid input\n\nThe following pseudo-classes and pseudo-elements can also be styled using a nested object inside of a variant:\n\n* `:hover`\n* `:focus`\n* `::placeholder`\n* `::selection`\n* `:-webkit-autofill`\n* `:disabled`, available for all Elements except the `paymentRequestButton` Element.\n* `::-ms-clear`, available for the `cardNumber`, `cardExpiry`, and `cardCvc` Elements.\n  Inside the `::-ms-clear` selector, the display property can be customized.\n\nThe following CSS properties are supported:\n","object_name":"Style","table_content":{"title":"Supported CSS properties","items":[{"name":"backgroundColor","validation":"string","documentation":"The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n\nThis property works best with the `::selection` pseudo-class.\nIn other cases, consider setting the background color on the Element's container instead.\n"},{"name":"color","validation":"string","documentation":"The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n"},{"name":"fontFamily","validation":"string","documentation":"The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n"},{"name":"fontSize","validation":"string","documentation":"The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n"},{"name":"fontSmoothing","validation":"string","documentation":"The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth) CSS property.\n"},{"name":"fontStyle","validation":"string","documentation":"The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n"},{"name":"fontVariant","validation":"string","documentation":"The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n"},{"name":"fontWeight","validation":"string","documentation":"The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n"},{"name":"iconColor","validation":"string","documentation":"A custom property, used to set the color of the icons that are rendered in an Element.\n"},{"name":"lineHeight","validation":"string","documentation":"The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n\nTo avoid cursors being rendered inconsistently across browsers, consider using a padding on the Element's container instead.\n"},{"name":"letterSpacing","validation":"string","documentation":"The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n"},{"name":"textAlign","validation":"string","documentation":"The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n\nAvailable for the `cardNumber`, `cardExpiry`, `cardCvc` and `iban` Elements.\n"},{"name":"padding","validation":"string","documentation":"The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n\nAvailable for the `idealBank` Element.\nAccepts integer length with `px` unit as values.\n"},{"name":"textDecoration","validation":"string","documentation":"The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n"},{"name":"textShadow","validation":"string","documentation":"The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n"},{"name":"textTransform","validation":"string","documentation":"The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n"}]},"request":{"title":"Creating a styled element","snippets":{"js":"var element = elements.create('card', {\n  style: {\n    base: {\n      iconColor: '#c4f0ff',\n      color: '#fff',\n      fontWeight: '500',\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n      fontSize: '16px',\n      fontSmoothing: 'antialiased',\n      ':-webkit-autofill': {\n        color: '#fce883',\n      },\n      '::placeholder': {\n        color: '#87BBFD',\n      },\n    },\n    invalid: {\n      iconColor: '#FFC7EE',\n      color: '#FFC7EE',\n    },\n  },\n});\n","es_next":"const element = elements.create('card', {\n  style: {\n    base: {\n      iconColor: '#c4f0ff',\n      color: '#fff',\n      fontWeight: '500',\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n      fontSize: '16px',\n      fontSmoothing: 'antialiased',\n      ':-webkit-autofill': {\n        color: '#fce883',\n      },\n      '::placeholder': {\n        color: '#87BBFD',\n      },\n    },\n    invalid: {\n      iconColor: '#FFC7EE',\n      color: '#FFC7EE',\n    },\n  },\n});\n"}},"section_tag":"style_object"},"display_on_load":true},"update_details_object":{"title":"UpdateDetails object","group_title":"Appendix","group_anchor":"appendix","anchor":"update_details_object","section_anchor":"update_details_object","subsection_anchors":null,"path":"/appendix/update_details","gate":false,"data":{"section_type":"object","title":"The UpdateDetails object\n","description":"This object is passed to the `updateWith` callback on a [PaymentRequest's](/js/payment_request/create) `shippingaddresschange` and `shippingoptionchange` events.\n","object_name":"UpdateDetails","table_content":{"items":[{"name":"status","documentation":"The browser uses this value to show an error message to the customer if they‘ve taken an action that invalidates the payment request.\nThe value must be one of the following:\n","validation":"string","expanded":true,"subspec_title":"allowed values","subspec":[{"name":"success","display_name":"'success'","documentation":"Let the customer proceed.\n","validation":"value"},{"name":"fail","display_name":"'fail'","documentation":"Prevent the customer from making the change they just made.\n","validation":"value"},{"name":"invalid_shipping_address","display_name":"'invalid_shipping_address'","documentation":"Equivalent to `fail`, except we show a more specific error message.\nCan only be used in a [`shippingaddresschange`](/js/payment_request/events/on_shipping_address_change) handler.\n","validation":"value"}]},{"name":"total","required":false,"validation":"PaymentItem","documentation":"The new total amount, if applicable, as a [PaymentItem](#payment_item_object) object.\n"},{"name":"displayItems","required":false,"validation":"array","documentation":"An array of [PaymentItem](#payment_item_object) objects.\nThese PaymentItems are shown as line items in the browser‘s payment interface.\nNote that the sum of the line item amounts does not need to add up to the total amount above.\n"},{"name":"shippingOptions","required":false,"validation":"array","documentation":"An array of [ShippingOption](/js/appendix/shipping_option) objects.\nThe first shipping option listed appears in the browser payment interface as the default option.\n"},{"name":"applePay","documentation":"Specify Apple Pay specific options. These are passed through to the Apple Pay API.\n","validation":"object","subspec":[{"name":"recurringPaymentRequest","documentation":"Specify a request to set up a recurring payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayrecurringpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"regularBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]},{"name":"trialBilling","validation":"object","required":false,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"recurringPaymentStartDate","validation":"Date"},{"name":"recurringPaymentEndDate","validation":"Date"},{"name":"recurringPaymentIntervalUnit","validation":"'year' | 'month' | 'day' | 'hour' | 'minute'"},{"name":"recurringPaymentIntervalCount","validation":"number"}]}]},{"name":"automaticReloadPaymentRequest","documentation":"Specify a request to set up an automatic reload payment. See the [Apple Pay documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepayautomaticreloadpaymentrequest) for more details.\n","validation":"object","subspec":[{"name":"paymentDescription","validation":"string","required":true},{"name":"managementURL","validation":"string","required":true},{"name":"automaticReloadBilling","validation":"object","required":true,"subspec":[{"name":"amount","validation":"number","required":true},{"name":"label","validation":"string","required":true},{"name":"automaticReloadPaymentThresholdAmount","validation":"Date","required":true}]}]}]}]},"response":{"title":"Example UpdateDetails object","snippets":{"success":"{\n  status: 'success',\n  total: {\n    amount: 15000,\n    label: 'A soft cotton shirt',\n  },\n}\n"}},"section_tag":"update_details_object"},"display_on_load":true},"supported_browsers":{"title":"Supported browsers","group_title":"Appendix","group_anchor":"appendix","anchor":"supported_browsers","section_anchor":"supported_browsers","subsection_anchors":null,"path":"/appendix/supported_browsers","gate":false,"data":{"section_type":"generic","title":"Supported browsers\n","description":"Stripe.js strives to support all recent versions of major browsers. For the sake of security and providing the best experience to the majority of customers, we do not support browsers that are no longer receiving security updates and represent a small minority of traffic. We support some older versions of evergreen browsers but recommend merchants keep their systems up to date for the best support.\nWe support the following desktop browser versions:\n\n* Chrome 38+\n* Safari 10.1+\n* Firefox 29+\n* Edge 15+\n* Opera 25+\n\nWe support the following mobile browsers:\n* iOS Safari 9+ and other browsers and web views which use the system-provided WebKit engine\n* Android Chrome 38+\n* Samsung Browser 7.1+\n\nFor browsers not explicitly supported, we limit support as follows:\n* We require TLS 1.2 to be supported by the browser.\n* We require browsers that are sufficiently modern enough that they support [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) in the JavaScript programming language.\n* We respond to bug reports but do not proactively test other browsers.\n\nIf you have an issue with Stripe.js on a specific browser, please [contact us](https://support.stripe.com/contact) so we can improve its support.\n","section_tag":"supported_browsers"},"display_on_load":true},"supported_locales":{"title":"Supported locales","group_title":"Appendix","group_anchor":"appendix","anchor":"supported_locales","section_anchor":"supported_locales","subsection_anchors":null,"path":"/appendix/supported_locales","gate":false,"data":{"section_type":"generic","title":"Supported locales","description":"The following subset of [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag) can be used to configure localization in Stripe.js.\n\nNote that Checkout supports a slightly different set of locales than Stripe.js.\nIf you are using Checkout with [`stripe.redirectToCheckout`](#stripe_redirect_to_checkout), make sure to use a locale that Checkout supports.\n\nValue   | Locale                                   | Elements | Checkout\n--------|------------------------------------------|----------|----------\n`auto`  | Stripe detects the locale of the browser | ✔        | ✔\n`ar`    | Arabic                                   | ✔        |\n`bg`    | Bulgarian (Bulgaria)                     | ✔        | ✔\n`cs`    | Czech (Czech Republic)                   | ✔        | ✔\n`da`    | Danish (Denmark)                         | ✔        | ✔\n`de`    | German (Germany)                         | ✔        | ✔\n`el`    | Greek (Greece)                           | ✔        | ✔\n`en`    | English                                  | ✔        | ✔\n`en-GB` | English (United Kingdom)                 | ✔        | ✔\n`es`    | Spanish (Spain)                          | ✔        | ✔\n`es-419`| Spanish (Latin America)                  | ✔        | ✔\n`et`    | Estonian (Estonia)                       | ✔        | ✔\n`fi`    | Finnish (Finland)                        | ✔        | ✔\n`fil`   | Filipino (Philipines)                    | ✔        | ✔\n`fr`    | French (France)                          | ✔        | ✔\n`fr-CA` | French (Canada)                          | ✔        | ✔\n`he`    | Hebrew (Israel)                          | ✔        |\n`hr`    | Croatian (Croatia)                       | ✔        | ✔\n`hu`    | Hungarian (Hungary)                      | ✔        | ✔\n`id`    | Indonesian (Indonesia)                   | ✔        | ✔\n`it`    | Italian (Italy)                          | ✔        | ✔\n`ja`    | Japanese (Japan)                         | ✔        | ✔\n`ko`    | Korean (Korea)                           | ✔        | ✔\n`lt`    | Lithuanian (Lithuania)                   | ✔        | ✔\n`lv`    | Latvian (Latvia)                         | ✔        | ✔\n`ms`    | Malay (Malaysia)                         | ✔        | ✔\n`mt`    | Maltese (Malta)                          | ✔        | ✔\n`nb`    | Norwegian Bokmål                         | ✔        | ✔\n`nl`    | Dutch (Netherlands)                      | ✔        | ✔\n`pl`    | Polish (Poland)                          | ✔        | ✔\n`pt-BR` | Portuguese (Brazil)                      | ✔        | ✔\n`pt`    | Portuguese (Brazil)                      | ✔        | ✔\n`ro`    | Romanian (Romania)                       | ✔        | ✔\n`ru`    | Russian (Russia)                         | ✔        | ✔\n`sk`    | Slovak (Slovakia)                        | ✔        | ✔\n`sl`    | Slovenian (Slovenia)                     | ✔        | ✔\n`sv`    | Swedish (Sweden)                         | ✔        | ✔\n`th`    | Thai (Thailand)                          | ✔        | ✔\n`tr`    | Turkish (Turkey)                         | ✔        | ✔\n`vi`    | Vietnamese (Vietnam)                     | ✔        | ✔\n`zh`    | Chinese Simplified (China)               | ✔        | ✔\n`zh-HK` | Chinese Traditional (Hong Kong)          | ✔        | ✔\n`zh-TW` | Chinese Traditional (Taiwan)             | ✔        | ✔\n","request":{"title":"Create a Stripe instance with a locale","snippets":{"js":"var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx', {\n  locale: 'fr'\n});\n","es_next":"const stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx', {\n  locale: 'fr'\n});\n"}},"section_tag":"supported_locales"},"display_on_load":true},"cookies":{"title":"Cookies","group_title":"Appendix","group_anchor":"appendix","anchor":"cookies","section_anchor":"cookies","subsection_anchors":null,"path":"/appendix/cookies","gate":false,"data":{"section_type":"generic","title":"Cookies\n","description":"Stripe uses cookies to ensure that the site works properly, detect and prevent fraud,\nand understand how people interact with Stripe. There are some cookies that are essential\nfor Stripe to function properly. These Necessary Cookies provide secure access to the site\nand enable page navigation. Other categories of cookies include Advertising Cookies,\nAnalytics Cookies, and Preference Cookies.\n\nYou can find more information in the [Stripe Cookies Policy](/cookies-policy/legal),\nincluding how to opt-out or manage your cookie preferences.\n\n","section_tag":"cookies"},"display_on_load":true},"viewport_meta_requirements":{"title":"Viewport meta tag requirements","group_title":"Appendix","group_anchor":"appendix","anchor":"viewport_meta_requirements","section_anchor":"viewport_meta_requirements","subsection_anchors":null,"path":"/appendix/viewport_meta_requirements","gate":false,"data":{"section_type":"generic","title":"Viewport meta tag requirements","response":{"title":"Example viewport meta tag","snippets":{"success":"\u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003E\n"}},"description":"In order to provide a great user experience for 3D Secure on all devices,\nyou should set your page's viewport `width` to `device-width` with the\n[viewport meta tag](https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag).\n\nThere are several other viewport settings, and you can configure those\nbased on your needs. Just make sure you include `width=device-width`\nsomewhere in your configuration.\n","section_tag":"viewport_meta_requirements"},"display_on_load":true},"stripe_checkout_redirect_to_checkout":{"title":"Redirect to Checkout","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_checkout_redirect_to_checkout","section_anchor":"stripe_checkout_redirect_to_checkout","subsection_anchors":null,"path":"/deprecated/redirect_to_checkout","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Redirect to Checkout","description":"Use `stripe.redirectToCheckout` to redirect your customers to [Checkout](/payments/checkout), a Stripe-hosted page to securely collect payment information.\nWhen the customer completes their purchase, they are redirected back to your website.\n","callout":"If you are currently on a beta of the new version of Checkout, read the [Beta Migration Guide](/payments/checkout/migration-from-beta) to upgrade to the latest version.\n","signature":{"object_name":"stripe","method_name":"redirectToCheckout","args":[{"name":"options","documentation":"","validation":"object","required":false,"expanded":true,"subspec":[{"name":"sessionId","documentation":"The ID of the [Checkout Session](/api/checkout/sessions) that is used in [Checkout's client and server integration](/payments/accept-a-payment?integration=checkout).\n","validation":"string","required":false},{"name":"lineItems","documentation":"An array of objects representing the items that your customer would like to purchase.\nThese items are shown as line items in the Checkout interface and make up the total amount to be collected by Checkout.\nUsed with the [client-only](/payments/checkout/client) integration.\n","validation":"array","required":false,"subspec":[{"name":"price","documentation":"The ID of the price that the customer would like to purchase or subscribe to. May also be a SKU or plan.\n","validation":"string","required":true},{"name":"quantity","validation":"integer","documentation":"The quantity of units for the item.\n","required":true}]},{"name":"mode","documentation":"The mode of the Checkout Session, one of `payment` or `subscription`. Required if\nusing `lineItems` with the [client-only](/payments/checkout/client) integration.\n","validation":"string","required":false},{"name":"successUrl","documentation":"The URL to which Stripe should send customers when payment is complete.\nIf you’d like access to the Checkout Session for the successful payment, read more about it in the guide on [fulfilling orders](/payments/checkout/fulfill-orders).\nRequired if using the [client-only](/payments/checkout/client) integration.\n","validation":"string","required":false},{"name":"cancelUrl","documentation":"The URL to which Stripe should send customers when payment is canceled.\nRequired if using the [client-only](/payments/checkout/client) integration.\n","validation":"string","required":false},{"name":"clientReferenceId","documentation":"A unique string to reference the Checkout session.\nThis can be a customer ID, a cart ID, or similar.\nIt is included in the `checkout.session.completed` webhook and can be used to fulfill the purchase.\n","validation":"string","required":false},{"name":"customerEmail","documentation":"The email address used to create the customer object.\nIf you already know your customer's email address, use this attribute to prefill it on Checkout.\n","validation":"string","required":false},{"name":"billingAddressCollection","documentation":"Specify whether Checkout should collect the customer’s billing address.\nIf set to `required`, Checkout will attempt to collect the customer’s billing address.\nIf not set or set to `auto` Checkout will only attempt to collect the billing address when necessary.\n","validation":"string","required":false},{"name":"shippingAddressCollection","documentation":"When set, provides configuration for Checkout to collect a shipping address from a customer.\n","validation":"object","required":false,"subspec":[{"name":"allowedCountries","documentation":"An array of [two-letter ISO country codes](https://www.iban.com/country-codes) representing\nwhich countries Checkout should provide as options for shipping locations.\nUnsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.\n","validation":"array","required":true}]},{"name":"locale","documentation":"A [locale](#supported_locales) that will be used to localize the display of Checkout.\nDefault is `auto` (Stripe detects the locale of the browser).\n","validation":"string","required":false},{"name":"submitType","documentation":"Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the **Submit** button.\n`submitType` can only be specified when using using line items or SKUs, and not subscriptions.\nThe default is `auto`. Supported values are: `auto`, `book`, `donate`, `pay`.\n","validation":"string","required":false},{"name":"items","documentation":"An array of objects representing the items that your customer would like to purchase.\nThese items are shown as line items in the Checkout interface and make up the total amount to be collected by Checkout.\nUsing `lineItems` is preferred.\n","validation":"array","required":false,"subspec":[{"name":"sku, plan","documentation":"The ID of the SKU that the customer would like to purchase, or the ID of the plan or recurring price that the customer would like to subscribe to.\n","validation":"string","required":false},{"name":"quantity","validation":"integer","documentation":"The quantity of units for the item.\n","required":false}]}]}]},"table_content":{"items":[{"name":"options","documentation":"","validation":"object","required":false,"expanded":true,"subspec":[{"name":"sessionId","documentation":"The ID of the [Checkout Session](/api/checkout/sessions) that is used in [Checkout's client and server integration](/payments/accept-a-payment?integration=checkout).\n","validation":"string","required":false},{"name":"lineItems","documentation":"An array of objects representing the items that your customer would like to purchase.\nThese items are shown as line items in the Checkout interface and make up the total amount to be collected by Checkout.\nUsed with the [client-only](/payments/checkout/client) integration.\n","validation":"array","required":false,"subspec":[{"name":"price","documentation":"The ID of the price that the customer would like to purchase or subscribe to. May also be a SKU or plan.\n","validation":"string","required":true},{"name":"quantity","validation":"integer","documentation":"The quantity of units for the item.\n","required":true}]},{"name":"mode","documentation":"The mode of the Checkout Session, one of `payment` or `subscription`. Required if\nusing `lineItems` with the [client-only](/payments/checkout/client) integration.\n","validation":"string","required":false},{"name":"successUrl","documentation":"The URL to which Stripe should send customers when payment is complete.\nIf you’d like access to the Checkout Session for the successful payment, read more about it in the guide on [fulfilling orders](/payments/checkout/fulfill-orders).\nRequired if using the [client-only](/payments/checkout/client) integration.\n","validation":"string","required":false},{"name":"cancelUrl","documentation":"The URL to which Stripe should send customers when payment is canceled.\nRequired if using the [client-only](/payments/checkout/client) integration.\n","validation":"string","required":false},{"name":"clientReferenceId","documentation":"A unique string to reference the Checkout session.\nThis can be a customer ID, a cart ID, or similar.\nIt is included in the `checkout.session.completed` webhook and can be used to fulfill the purchase.\n","validation":"string","required":false},{"name":"customerEmail","documentation":"The email address used to create the customer object.\nIf you already know your customer's email address, use this attribute to prefill it on Checkout.\n","validation":"string","required":false},{"name":"billingAddressCollection","documentation":"Specify whether Checkout should collect the customer’s billing address.\nIf set to `required`, Checkout will attempt to collect the customer’s billing address.\nIf not set or set to `auto` Checkout will only attempt to collect the billing address when necessary.\n","validation":"string","required":false},{"name":"shippingAddressCollection","documentation":"When set, provides configuration for Checkout to collect a shipping address from a customer.\n","validation":"object","required":false,"subspec":[{"name":"allowedCountries","documentation":"An array of [two-letter ISO country codes](https://www.iban.com/country-codes) representing\nwhich countries Checkout should provide as options for shipping locations.\nUnsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.\n","validation":"array","required":true}]},{"name":"locale","documentation":"A [locale](#supported_locales) that will be used to localize the display of Checkout.\nDefault is `auto` (Stripe detects the locale of the browser).\n","validation":"string","required":false},{"name":"submitType","documentation":"Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the **Submit** button.\n`submitType` can only be specified when using using line items or SKUs, and not subscriptions.\nThe default is `auto`. Supported values are: `auto`, `book`, `donate`, `pay`.\n","validation":"string","required":false},{"name":"items","documentation":"An array of objects representing the items that your customer would like to purchase.\nThese items are shown as line items in the Checkout interface and make up the total amount to be collected by Checkout.\nUsing `lineItems` is preferred.\n","validation":"array","required":false,"subspec":[{"name":"sku, plan","documentation":"The ID of the SKU that the customer would like to purchase, or the ID of the plan or recurring price that the customer would like to subscribe to.\n","validation":"string","required":false},{"name":"quantity","validation":"integer","documentation":"The quantity of units for the item.\n","required":false}]}]}]},"request":{"title":"Redirect to Checkout","snippets":{"js":"// Call your backend to create the Checkout Session\nfetch('/create-checkout-session', {\n  method: 'POST',\n})\n.then(function(response) {\n  return response.json();\n})\n.then(function(session) {\n  return stripe.redirectToCheckout({ sessionId: session.id });\n})\n.then(function(result) {\n  // If `redirectToCheckout` fails due to a browser or network\n  // error, you should display the localized error message to your\n  // customer using `error.message`.\n  if (result.error) {\n    alert(result.error.message);\n  }\n});\n","es_next":"// Call your backend to create the Checkout Session\nconst response = await fetch('/create-checkout-session', { method: 'POST' });\nconst session = await response.json();\n\n// When the customer clicks on the button, redirect them to Checkout.\nconst result = await stripe.redirectToCheckout({\n  sessionId: session.id,\n});\n\nif (result.error) {\n  // If `redirectToCheckout` fails due to a browser or network\n  // error, display the localized error message to your customer\n  // using `result.error.message`.\n}\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nIf this method fails, the result object will contain a localized error message in the `error.message` field.\n","section_tag":"stripe_checkout_redirect_to_checkout"},"display_on_load":true},"stripe_handle_card_payment_element":{"title":"Handle a card payment with an Element","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_handle_card_payment_element","section_anchor":"stripe_handle_card_payment_element","subsection_anchors":null,"path":"/deprecated/handle_card_payment_element","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Handle card payment with an Element","description":"*`handleCardPayment` has been renamed to [confirmCardPayment](#stripe_confirm_card_payment).\nIn addition to the rename, we have slightly modified the arguments.\nThese changes do not affect the behavior of the method.\nWhile we have no plans to ever remove support for `handleCardPayment`, we think the new name and arguments are easier to understand and better convey what the method is doing.*\n\nUse `stripe.handleCardPayment(clientSecret, element, data?)` when the customer submits your payment form.\nIt will gather payment information from the element, which can be a `card` or `cardNumber` element, along with any other data you provide.\nIt will then confirm the `PaymentIntent` and carry out 3DS or other `next_action`s if they are required.\n\nIf you are using [Dynamic 3D Secure](/payments/3d-secure#three-ds-radar), `handleCardPayment` will trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n","callout":"Note that `stripe.handleCardPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleCardPayment` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThis will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers.\nYou should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n","signature":{"object_name":"stripe","method_name":"handleCardPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"element","documentation":"A `card` or `cardNumber` [Element](/js/element) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details during payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"element","documentation":"A `card` or `cardNumber` [Element](/js/element) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details during payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"request":{"title":"Handle a card payment","snippets":{"js":"stripe\n  .handleCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', element, {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.handleCardPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen',\n      },\n    },\n  },\n);\n"}},"returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_card_payment_element"},"display_on_load":true},"stripe_handle_card_payment":{"title":"Handle a card payment","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_handle_card_payment","section_anchor":"stripe_handle_card_payment","subsection_anchors":null,"path":"/deprecated/handle_card_payment","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Handle card payment","description":"*`handleCardPayment` has been renamed to [confirmCardPayment](#stripe_confirm_card_payment). In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for `handleCardPayment`, we think the new name and arguments are easier to understand and better convey what the method is doing.*\n\nUse `stripe.handleCardPayment(clientSecret, data?)` to advance the [PaymentIntent](/api/payment_intents) towards completion when you are not gathering payment method information from an [Element](/js/elements_object/create_element).\n\nCall this variation when you have already attached a card to this `PaymentIntent` or if you want to attach an existing card to it.\n","callout":"Note that `stripe.handleCardPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleCardPayment` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThis will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers.\nYou should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n","signature":{"object_name":"stripe","method_name":"handleCardPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details after a payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details after a payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"request":{"title":"Handle a card payment","snippets":{"js":"stripe\n  .handleCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.handleCardPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}},"returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_card_payment"},"display_on_load":true},"stripe_confirm_payment_intent_element":{"title":"Confirm a PaymentIntent with an Element","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_confirm_payment_intent_element","section_anchor":"stripe_confirm_payment_intent_element","subsection_anchors":null,"path":"/deprecated/confirm_payment_intent_element","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Confirm a Payment Intent with an Element","description":"*`confirmPaymentIntent` has been deprecated. Going forward, if you wish to confirm on the client without handling next actions, simply pass `{handleActions: false}` as a third argument to [confirmCardPayment](#stripe_confirm_card_payment). While we have no plans to ever remove support for `confirmPaymentIntent`, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.*\n\nUse `stripe.confirmPaymentIntent(clientSecret, element, data)` when the customer submits your payment form. It will gather payment information from element, along with any other data you provide, and confirm the `PaymentIntent`.\n\nOnly use this method if you want to [handle next actions yourself](/payments/payment-intents/verifying-status#next-actions). Otherwise, use [stripe.handleCardPayment](#stripe_handle_card_payment).\n","callout":"Note that `stripe.confirmPaymentIntent` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","signature":{"object_name":"stripe","method_name":"confirmPaymentIntent","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` to confirm.\n","validation":"string","required":true},{"name":"element","documentation":"An [Element](/js/element) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details after a payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` to confirm.\n","validation":"string","required":true},{"name":"element","documentation":"An [Element](/js/element) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details after a payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"request":{"title":"Confirm a PaymentIntent","snippets":{"js":"stripe.confirmPaymentIntent(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    },\n    return_url: 'https://example.com/return_url'\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.confirmPaymentIntent(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: \"Jenny Rosen\"\n      }\n    },\n    return_url: 'https://example.com/return_url'\n  }\n);\n"}},"returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_confirm_payment_intent_element"},"display_on_load":true},"stripe_confirm_payment_intent":{"title":"Confirm a PaymentIntent","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_confirm_payment_intent","section_anchor":"stripe_confirm_payment_intent","subsection_anchors":null,"path":"/deprecated/confirm_payment_intent","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Confirm a Payment Intent","description":"*`confirmPaymentIntent` has been deprecated.\nGoing forward, if you wish to confirm on the client without handling next actions, simply pass `{handleActions: false}` as a third argument to [confirmCardPayment](#stripe_confirm_card_payment).\nWhile we have no plans to ever remove support for `confirmPaymentIntent`, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.*\n\nUse `stripe.confirmPaymentIntent(clientSecret, data)` to confirm the `PaymentIntent` when you are not gathering payment information from an `Element`.\nCall this variation when you have already attached a payment method to this `PaymentIntent`, or if you want to attach an existing card, token, or `PaymentMethod` to it.\n\nOnly use this method if you want to handle next actions yourself.\nOtherwise, use `stripe.handleCardPayment`.\n\n","callout":"Note that `stripe.confirmPaymentIntent` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","signature":{"object_name":"stripe","method_name":"confirmPaymentIntent","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` to confirm.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details after a payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` to confirm.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]},{"name":"shipping","documentation":"The [shipping details](/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n","validation":"object","badge_text":"recommended"},{"name":"receipt_email","documentation":"Email address that the receipt for the resulting payment will be sent to.\n","validation":"string"},{"name":"setup_future_usage","documentation":"Indicates that you intend to make future payments with this [PaymentIntent](/api/payment_intents)'s payment method.\n\nIf present, the `PaymentMethod` used with this PaymentIntent can be [attached to a Customer](/api/payment_methods/attach), even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the `PaymentMethod` when your customer is present in your checkout flow.\nUse `off_session` if your customer may or may not be in your checkout flow.\nSee [saving card details after a payment](/payments/cards/saving-cards-after-payment) to learn more.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules.\nFor example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent.\nYou will then be able to collect [off-session payments](/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n","validation":"string"}]}]},"request":{"title":"Confirm a PaymentIntent","snippets":{"js":"stripe\n  .confirmPaymentIntent('{PAYMENT_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    return_url: 'https://example.com/return_url',\n  })\n  .then(function(result) {\n    // Handle result.error or result.paymentIntent\n  });\n","es_next":"const {paymentIntent, error} = await stripe.confirmPaymentIntent(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    return_url: 'https://example.com/return_url'\n  }\n);\n"}},"returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.paymentIntent`: the successful [PaymentIntent](/api/payment_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_confirm_payment_intent"},"display_on_load":true},"stripe_handle_card_setup_element":{"title":"Handle card setup with an Element","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_handle_card_setup_element","section_anchor":"stripe_handle_card_setup_element","subsection_anchors":null,"path":"/deprecated/handle_card_setup_element","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Handle card setup with an Element","description":"*`handleCardSetup` has been renamed to [confirmCardSetup](#stripe_confirm_card_setup). In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for `handleCardSetup`, we think the new name and arguments are easier to understand and better convey what the method is doing.*\n\nUse `stripe.handleCardSetup(clientSecret, element, data?)` in the [Setup Intents API flow](/payments/save-and-reuse) when the customer submits your payment form.\nIt will gather payment information from the `element`, which can be a `card` or `cardNumber` element, along with any other data you provide.\nIt will then confirm the `SetupIntent` and carry out 3DS or other `next_action`s if they are required.\n","signature":{"object_name":"stripe","method_name":"handleCardSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"element","documentation":"A `card` or `cardNumber` Element that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"element","documentation":"A `card` or `cardNumber` Element that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]}]}]},"request":{"title":"Handle card setup","snippets":{"js":"stripe.handleCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    }\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\n","es_next":"const {setupIntent, error} = await stripe.handleCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    }\n  }\n);\n"}},"callout":"Note that `stripe.handleCardSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleCardSetup` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThis will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers.\nYou should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n","returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_card_setup_element"},"display_on_load":true},"stripe_handle_card_setup":{"title":"Handle card setup","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_handle_card_setup","section_anchor":"stripe_handle_card_setup","subsection_anchors":null,"path":"/deprecated/handle_card_setup","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Handle card setup","description":"*`handleCardSetup` has been renamed to [confirmCardSetup](#stripe_confirm_card_setup). In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we have no plans to ever remove support for `handleCardSetup`, we think the new name and arguments are easier to understand and better convey what the method is doing.*\n\nUse `stripe.handleCardSetup(clientSecret, data)` to advance the `SetupIntent` towards completion when you are not gathering payment method information from an `Element`.\n\nCall this variation when you have already attached a card to this `SetupIntent` or if you want to attach an existing card to it.\n","signature":{"object_name":"stripe","method_name":"handleCardSetup","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent`.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]}]}]},"request":{"title":"Handle card setup","snippets":{"js":"stripe\n  .handleCardSetup('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.handleCardSetup(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n  },\n);\n"}},"callout":"Note that `stripe.handleCardSetup` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n\nAdditionally, `stripe.handleCardSetup` may trigger a [3D Secure](/payments/3d-secure) authentication challenge.\nThis will be shown in a modal dialog and may be confusing for customers using assistive technologies like screen readers.\nYou should make your form accessible by ensuring that success or error messages are clearly read out after this method completes.\n","returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_handle_card_setup"},"display_on_load":true},"stripe_confirm_setup_intent_element":{"title":"Confirm a SetupIntent with an Element","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_confirm_setup_intent_element","section_anchor":"stripe_confirm_setup_intent_element","subsection_anchors":null,"path":"/deprecated/confirm_setup_intent_element","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Confirm a Setup Intent with an Element","description":"*`confirmSetupIntent` has been deprecated. Going forward, if you wish to confirm on the client without handling next actions, simply pass `{handleActions: false}` as a third argument to [confirmCardSetup](#stripe_confirm_card_setup). While we have no plans to ever remove support for `confirmSetupIntent`, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.*\n\nUse `stripe.confirmSetupIntent(clientSecret, element, data)` when the customer submits your save payment method form. It will gather payment information from `element`, along with any other `data` you provide, and confirm the `SetupIntent`.\n\nOnly use this method if you want to [handle next actions yourself](/payments/payment-intents/verifying-status#next-actions). Otherwise, use [stripe.handleCardSetup](#stripe_handle_card_payment).\n","callout":"Note that `stripe.confirmSetupIntent` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","signature":{"object_name":"stripe","method_name":"confirmSetupIntent","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` to confirm.\n","validation":"string","required":true},{"name":"element","documentation":"An [Element](/js/element) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` to confirm.\n","validation":"string","required":true},{"name":"element","documentation":"An [Element](/js/element) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"}]}]}]},"request":{"title":"Confirm a SetupIntent","snippets":{"js":"stripe.confirmSetupIntent(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    },\n    return_url: 'https://example.com/return_url'\n  }\n).then(function(result) {\n  // Handle result.error or result.setupIntent\n});\n","es_next":"const {setupIntent, error} = await stripe.confirmSetupIntent(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    payment_method_data: {\n      billing_details: {\n        name: \"Jenny Rosen\"\n      }\n    },\n    return_url: 'https://example.com/return_url'\n  }\n);\n"}},"returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_confirm_setup_intent_element"},"display_on_load":true},"stripe_confirm_setup_intent":{"title":"Confirm a SetupIntent","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_confirm_setup_intent","section_anchor":"stripe_confirm_setup_intent","subsection_anchors":null,"path":"/deprecated/confirm_setup_intent","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Confirm a Setup Intent","description":"*`confirmSetupIntent` has been deprecated.\nGoing forward, if you wish to confirm on the client without handling next actions, simply pass `{handleActions: false}` as a third argument to [confirmCardSetup](#stripe_confirm_card_setup).\nWhile we have no plans to ever remove support for `confirmSetupIntent`, we think that explicitly opting out of next action handling is easier to understand and will better convey what the method is doing.*\n\nUse `stripe.confirmSetupIntent(clientSecret, data)` to confirm the `SetupIntent` when you are not gathering payment information from an `Element`.\nCall this variation when you have already attached a payment method to this `SetupIntent`, or if you want to attach an existing card, token, or `PaymentMethod` to it.\n\nOnly use this method if you want to handle next actions yourself.\nOtherwise, use `stripe.handleCardSetup`.\n","callout":"Note that `stripe.confirmSetupIntent` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","signature":{"object_name":"stripe","method_name":"confirmSetupIntent","args":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` to confirm.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` to confirm.\n","validation":"string","required":true},{"name":"data","documentation":"Data to be sent with the request. It can contain the following parameters\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"If you are [handling next actions yourself](/payments/payment-intents/verifying-status#next-actions), pass in a `return_url`.\nIf the subsequent action is `redirect_to_url`, this URL will be used on the return path for the redirect.\n","validation":"string"},{"name":"payment_method","documentation":"Use `payment_method` to specify an existing [PaymentMethod](/api/payment_methods) to use for this payment.\n\nOnly one of `payment_method_data` and `payment_method` is required.\n","validation":"string"},{"name":"payment_method_data","documentation":"Use this parameter to supply additional data relevant to the payment method, such as billing details.\n","validation":"object","expanded":true,"subspec":[{"name":"billing_details","documentation":"The [billing details](/api/payment_methods/create#create_payment_method-billing_details) associated with the card.","validation":"object","badge_text":"recommended"},{"name":"card[token]","validation":"string","documentation":"Converts the provided token into a `PaymentMethod` to use for the payment.\n"}]}]}]},"request":{"title":"Confirm a SetupIntent","snippets":{"js":"stripe\n  .confirmSetupIntent('{SETUP_INTENT_CLIENT_SECRET}', {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    return_url: 'https://example.com/return_url',\n  })\n  .then(function(result) {\n    // Handle result.error or result.setupIntent\n  });\n","es_next":"const {setupIntent, error} = await stripe.confirmSetupIntent(\n  '{SETUP_INTENT_CLIENT_SECRET}',\n  {\n    payment_method: '{PAYMENT_METHOD_ID}',\n    return_url: 'https://example.com/return_url'\n  }\n);\n"}},"returns":"A Promise which resolves with a `result` object.\n\nThe object will have either:\n\n* `result.setupIntent`: the successful [SetupIntent](/api/setup_intents).\n* `result.error`: An error. Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_confirm_setup_intent"},"display_on_load":true},"stripe_handle_fpx_payment":{"title":"Handle an FPX payment","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_handle_fpx_payment","section_anchor":"stripe_handle_fpx_payment","subsection_anchors":null,"path":"/deprecated/handle_fpx_payment","gate":false,"data":{"deprecated":true,"section_type":"method","title":"Handle an FPX payment","description":"*`handleFpxPayment` has been renamed to [confirmFpxPayment](#stripe_confirm_fpx_payment). In addition to the rename, we have slightly modified the arguments. These changes do not affect the behavior of the method. While we will continue to support `handleFpxPayment` for the duration of the beta, we think the new name and arguments are easier to understand and better convey what the method is doing.*\n\nUse `stripe.handleFpxPayment` in the [FPX payment method creation](/stripe-js/elements/fpx-bank) flow when the customer selects a bank from the dropdown. It will gather the [bank code](/payments/fpx/accept-a-payment#bank-reference) from the element, along with any other `PaymentIntent` `data` you provide. It will then create an FPX payment method and confirm the `PaymentIntent`.\n","callout":"Note that `stripe.handleFpxPayment` may take several seconds to complete.\nDuring that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.\nIf you receive an error result, you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n","signature":{"object_name":"stripe","method_name":"handleFpxPayment","args":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"element","documentation":"An `fpxBank` [Element](/payments/elements) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"A data object to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication. Be sure to review the [payment confirmation page requirements](/payments/fpx/accept-a-payment#payment-confirmation-page).\n","validation":"string"}]}]},"table_content":{"items":[{"name":"clientSecret","documentation":"The [client secret](/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent`.\n","validation":"string","required":true},{"name":"element","documentation":"An `fpxBank` [Element](/payments/elements) that will be used to create a payment method.\n","validation":"Element","required":true},{"name":"data","documentation":"A data object to be sent with the request.\n","validation":"object","expanded":true,"subspec":[{"name":"return_url","documentation":"The url your customer will be directed to after they complete authentication. Be sure to review the [payment confirmation page requirements](/payments/fpx/accept-a-payment#payment-confirmation-page).\n","validation":"string"}]}]},"request":{"title":"Handle a FPX payment","snippets":{"js":"stripe.handleFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    return_url: 'https://example.com/return_url',\n  }\n).then(function(result) {\n  // Handle result.error or result.paymentIntent\n});\n","es_next":"const {paymentIntent, error} = await stripe.handleFpxPayment(\n  '{PAYMENT_INTENT_CLIENT_SECRET}',\n  element,\n  {\n    return_url: 'https://example.com/return_url',\n  }\n);\n"}},"returns":"This method returns a `Promise` which resolves with a `result` object.\nThis object has either:\n\n* `result.paymentIntent`: a [PaymentIntent](/api/payment_intents) with the `requires_confirmation` status to confirm server-side.\n* `result.error`: an error.\n  Refer to the [API reference](/api#errors) for all possible errors and the [FPX guide](/payments/fpx/accept-a-payment#error-codes) for FPX specific errors.\n","section_tag":"stripe_handle_fpx_payment"},"display_on_load":true},"sources":{"title":"Sources","group_title":"Deprecated","group_anchor":"deprecated","anchor":"sources","section_anchor":"sources","subsection_anchors":["stripe_create_source","stripe_create_source_data","stripe_retrieve_source"],"path":"/deprecated/sources","gate":false,"data":{"section_type":"generic","title":"Sources","deprecated":true,"description":"The Sources API has been deprecated and replaced by the [Payment Intents API](/js/payment_intents).\n\nStripe.js provides the following methods to create and retrieve [Sources](/api/sources), which are part of the Charges API.\n","section_tag":"sources"},"display_on_load":true},"stripe_create_source":{"title":"Create a Source","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_create_source","section_anchor":"sources","subsection_anchors":null,"path":"/deprecated/sources/create_source","gate":false,"data":{"section_type":"method","title":"Create a Source","deprecated":true,"description":"Use `stripe.createSource` to convert payment information collected by elements into a [Source](/api#sources) object that you safely pass to your server to use in an API call.\nSee the [Sources documentation](/sources) for more information about sources.\n","signature":{"object_name":"stripe","method_name":"createSource","args":[{"name":"element","documentation":"The [Element](/js/element) containing payment information.\nIf applicable, the `Element` pulls data from other elements you’ve created on the same [Elements](#elements_create) instance.\n","validation":"object","required":true},{"name":"sourceData","documentation":"A required object containing the `type` of `Source` you want to create, and any additional payment information that you have collected.\nSee the [Sources API](/api#create_source) reference for details.\n","validation":"object","required":true}]},"table_content":{"items":[{"name":"element","documentation":"The [Element](/js/element) containing payment information.\nIf applicable, the `Element` pulls data from other elements you’ve created on the same [Elements](#elements_create) instance.\n","validation":"object","required":true},{"name":"sourceData","documentation":"A required object containing the `type` of `Source` you want to create, and any additional payment information that you have collected.\nSee the [Sources API](/api#create_source) reference for details.\n","validation":"object","required":true}]},"request":{"title":"Create a Source","snippets":{"js":"stripe\n  .createSource(ibanElement, {\n    type: 'sepa_debit',\n    currency: 'eur',\n    owner: {\n      name: 'Jenny Rosen',\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.source\n  });\n","es_next":"const {source, error} = await stripe.createSource(\n  ibanElement,\n  {\n    type: 'sepa_debit',\n    currency: 'eur',\n    owner: {\n      name: 'Jenny Rosen',\n    },\n  },\n);\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.source`: a [Source](/api#sources) was created successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_create_source"},"display_on_load":true},"stripe_create_source_data":{"title":"Create a Source from data","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_create_source_data","section_anchor":"sources","subsection_anchors":null,"path":"/deprecated/sources/create_source_data","gate":false,"data":{"section_type":"method","title":"Create source","deprecated":true,"description":"Use `stripe.createSource` to convert raw payment information into a [Source](/api#sources) object that you can safely pass to your server for use in an API call.\nSee the [Sources documentation](/sources) for more information about sources.\n","callout":"You cannot pass raw card information to `stripe.createSource(sourceData)`.\nInstead, you must gather card information in an Element and use [`stripe.createSource(element, sourceData)`](#stripe_create_source).\nYou can also pass an existing card token to convert it into a `Source` object.\n","signature":{"object_name":"stripe","method_name":"createSource","args":[{"name":"sourceData","documentation":"A required object containing the `type` of `Source` you want to create, and any additional payment information that you have collected.\nSee the [Sources API](/api#create_source) reference for details.\n","validation":"object","required":true}]},"table_content":{"items":[{"name":"sourceData","documentation":"A required object containing the `type` of `Source` you want to create, and any additional payment information that you have collected.\nSee the [Sources API](/api#create_source) reference for details.\n","validation":"object","required":true}]},"request":{"title":"Create a Source","snippets":{"js":"stripe\n  .createSource({\n    type: 'ideal',\n    amount: 1099,\n    currency: 'eur',\n    owner: {\n      name: 'Jenny Rosen',\n    },\n    redirect: {\n      return_url: 'https://shop.example.com/crtA6B28E1',\n    },\n  })\n  .then(function(result) {\n    // Handle result.error or result.source\n  });\n","es_next":"const {source, error} = await stripe.createSource({\n  type: 'ideal',\n  amount: 1099,\n  currency: 'eur',\n  owner: {\n    name: 'Jenny Rosen',\n  },\n  redirect: {\n    return_url: 'https://shop.example.com/crtA6B28E1',\n  },\n});\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.source`: a [Source](/api#sources) was created successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_create_source_data"},"display_on_load":true},"stripe_retrieve_source":{"title":"Retrieve a Source","group_title":"Deprecated","group_anchor":"deprecated","anchor":"stripe_retrieve_source","section_anchor":"sources","subsection_anchors":null,"path":"/deprecated/sources/retrieve_source","gate":false,"data":{"section_type":"method","title":"Retrieve a Source","deprecated":true,"description":"Retrieve a [Source](/api#sources) using its unique ID and client secret.\n","signature":{"object_name":"stripe","method_name":"retrieveSource","args":[{"name":"source","required":true,"validation":"object","documentation":"An object containing the unique ID and client secret for a `Source`.\n\nYou can use a `Source` object created with `stripe.createSource` as the argument to `stripe.retrieveSource`, as every `Source` object has both `id` and `client_secret` keys.\n","expanded":true,"subspec":[{"name":"id","required":true,"validation":"string","documentation":"Unique identifier of the `Source`.\n"},{"name":"client_secret","required":true,"validation":"string","documentation":"A secret available to the web client that created the `Source`, for purposes of retrieving the `Source` later from that same client.\n"}]}]},"table_content":{"items":[{"name":"source","required":true,"validation":"object","documentation":"An object containing the unique ID and client secret for a `Source`.\n\nYou can use a `Source` object created with `stripe.createSource` as the argument to `stripe.retrieveSource`, as every `Source` object has both `id` and `client_secret` keys.\n","expanded":true,"subspec":[{"name":"id","required":true,"validation":"string","documentation":"Unique identifier of the `Source`.\n"},{"name":"client_secret","required":true,"validation":"string","documentation":"A secret available to the web client that created the `Source`, for purposes of retrieving the `Source` later from that same client.\n"}]}]},"request":{"title":"Retrieve a Source","snippets":{"js":"stripe\n  .retrieveSource({\n    id: '{SOURCE_ID}',\n    client_secret: '{SOURCE_CLIENT_SECRET}',\n  })\n  .then(function(result) {\n    // Handle result.error or result.source\n  });\n","es_next":"const {source, error} = await stripe.retrieveSource({\n  id: '{{SOURCE_ID}}',\n  client_secret: '{{SOURCE_CLIENT_SECRET}}',\n});\n"}},"returns":"This method returns a `Promise` which resolves with a result object.\nThis object has either:\n\n* `result.source`: a [Source](/api#sources) was retrieved successfully.\n* `result.error`: there was an error.\n  This includes client-side validation errors.\n  Refer to the [API reference](/api#errors) for all possible errors.\n","section_tag":"stripe_retrieve_source"},"display_on_load":true}},
            fuseWebWorkerPath: '/apiRefFuseWebWorker.js',
            accountSwitcherData: {"user":null,"login_url":"https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fjs%2Felements_object%2Fcreate_payment_element","dashboard_host":"https://dashboard.stripe.com"},
            cookieEnforcementMode: "open",
            hiddenRefs: [],
            locale: "en-US"
          };
          APIDocs.load(window.INITIAL_STATE);
        </script>
  </body>
</html>
